// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from common.proto

package com.vikings.sanguo.protos;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class FiefDataSynInfo implements Externalizable, Message<FiefDataSynInfo>, Schema<FiefDataSynInfo>
{

    public static Schema<FiefDataSynInfo> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static FiefDataSynInfo getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final FiefDataSynInfo DEFAULT_INSTANCE = new FiefDataSynInfo();

    
    private Integer synFlag;
    private Long fiefid;

    public FiefDataSynInfo()
    {
        
    }

    // getters and setters

    // synFlag

    public boolean hasSynFlag(){
        return synFlag != null;
    }


    public Integer getSynFlag()
    {
        return synFlag == null ? 0 : synFlag;
    }

    public FiefDataSynInfo setSynFlag(Integer synFlag)
    {
        this.synFlag = synFlag;
        return this;
    }

    // fiefid

    public boolean hasFiefid(){
        return fiefid != null;
    }


    public Long getFiefid()
    {
        return fiefid == null ? 0L : fiefid;
    }

    public FiefDataSynInfo setFiefid(Long fiefid)
    {
        this.fiefid = fiefid;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<FiefDataSynInfo> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public FiefDataSynInfo newMessage()
    {
        return new FiefDataSynInfo();
    }

    public Class<FiefDataSynInfo> typeClass()
    {
        return FiefDataSynInfo.class;
    }

    public String messageName()
    {
        return FiefDataSynInfo.class.getSimpleName();
    }

    public String messageFullName()
    {
        return FiefDataSynInfo.class.getName();
    }

    public boolean isInitialized(FiefDataSynInfo message)
    {
        return true;
    }

    public void mergeFrom(Input input, FiefDataSynInfo message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 10:
                    message.synFlag = input.readUInt32();
                    break;
                case 20:
                    message.fiefid = input.readUInt64();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, FiefDataSynInfo message) throws IOException
    {
        if(message.synFlag != null)
            output.writeUInt32(10, message.synFlag, false);

        if(message.fiefid != null)
            output.writeUInt64(20, message.fiefid, false);
    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
