// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from client.proto

package com.vikings.sanguo.protos;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class MsgReqManorRevive implements Externalizable, Message<MsgReqManorRevive>, Schema<MsgReqManorRevive>
{

    public static Schema<MsgReqManorRevive> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static MsgReqManorRevive getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final MsgReqManorRevive DEFAULT_INSTANCE = new MsgReqManorRevive();

    
    private Integer target;
    private Integer buildingid;
    private List<Integer> armids;
    private Integer bossArmid;
    private Integer bossCount;

    public MsgReqManorRevive()
    {
        
    }

    // getters and setters

    // target

    public boolean hasTarget(){
        return target != null;
    }


    public Integer getTarget()
    {
        return target == null ? 0 : target;
    }

    public MsgReqManorRevive setTarget(Integer target)
    {
        this.target = target;
        return this;
    }

    // buildingid

    public boolean hasBuildingid(){
        return buildingid != null;
    }


    public Integer getBuildingid()
    {
        return buildingid == null ? 0 : buildingid;
    }

    public MsgReqManorRevive setBuildingid(Integer buildingid)
    {
        this.buildingid = buildingid;
        return this;
    }

    // armids

    public boolean hasArmids(){
        return armids != null;
    }


    public List<Integer> getArmidsList()
    {
        return armids == null?  new ArrayList<Integer>():armids;
    }

    public int getArmidsCount()
    {
        return armids == null?0:armids.size();
    }

    public Integer getArmids(int i)
    {
        return armids == null?null:armids.get(i);
    }


    public MsgReqManorRevive setArmidsList(List<Integer> armids)
    {
        this.armids = armids;
        return this;    
    }

    // bossArmid

    public boolean hasBossArmid(){
        return bossArmid != null;
    }


    public Integer getBossArmid()
    {
        return bossArmid == null ? 0 : bossArmid;
    }

    public MsgReqManorRevive setBossArmid(Integer bossArmid)
    {
        this.bossArmid = bossArmid;
        return this;
    }

    // bossCount

    public boolean hasBossCount(){
        return bossCount != null;
    }


    public Integer getBossCount()
    {
        return bossCount == null ? 0 : bossCount;
    }

    public MsgReqManorRevive setBossCount(Integer bossCount)
    {
        this.bossCount = bossCount;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<MsgReqManorRevive> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public MsgReqManorRevive newMessage()
    {
        return new MsgReqManorRevive();
    }

    public Class<MsgReqManorRevive> typeClass()
    {
        return MsgReqManorRevive.class;
    }

    public String messageName()
    {
        return MsgReqManorRevive.class.getSimpleName();
    }

    public String messageFullName()
    {
        return MsgReqManorRevive.class.getName();
    }

    public boolean isInitialized(MsgReqManorRevive message)
    {
        return true;
    }

    public void mergeFrom(Input input, MsgReqManorRevive message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 10:
                    message.target = input.readUInt32();
                    break;
                case 20:
                    message.buildingid = input.readUInt32();
                    break;
                case 30:
                    if(message.armids == null)
                        message.armids = new ArrayList<Integer>();
                    message.armids.add(input.readUInt32());
                    break;
                case 40:
                    message.bossArmid = input.readUInt32();
                    break;
                case 50:
                    message.bossCount = input.readUInt32();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, MsgReqManorRevive message) throws IOException
    {
        if(message.target != null)
            output.writeUInt32(10, message.target, false);

        if(message.buildingid != null)
            output.writeUInt32(20, message.buildingid, false);

        if(message.armids != null)
        {
            for(Integer armids : message.armids)
            {
                if(armids != null)
                    output.writeUInt32(30, armids, true);
            }
        }

        if(message.bossArmid != null)
            output.writeUInt32(40, message.bossArmid, false);

        if(message.bossCount != null)
            output.writeUInt32(50, message.bossCount, false);
    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
