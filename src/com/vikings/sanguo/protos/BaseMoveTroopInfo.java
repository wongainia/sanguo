// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from common.proto

package com.vikings.sanguo.protos;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class BaseMoveTroopInfo implements Externalizable, Message<BaseMoveTroopInfo>, Schema<BaseMoveTroopInfo>
{

    public static Schema<BaseMoveTroopInfo> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static BaseMoveTroopInfo getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final BaseMoveTroopInfo DEFAULT_INSTANCE = new BaseMoveTroopInfo();

    
    private Long id;
    private Integer role;
    private Integer userid;
    private TroopInfo troopInfo;

    public BaseMoveTroopInfo()
    {
        
    }

    // getters and setters

    // id

    public boolean hasId(){
        return id != null;
    }


    public Long getId()
    {
        return id == null ? 0L : id;
    }

    public BaseMoveTroopInfo setId(Long id)
    {
        this.id = id;
        return this;
    }

    // role

    public boolean hasRole(){
        return role != null;
    }


    public Integer getRole()
    {
        return role == null ? 0 : role;
    }

    public BaseMoveTroopInfo setRole(Integer role)
    {
        this.role = role;
        return this;
    }

    // userid

    public boolean hasUserid(){
        return userid != null;
    }


    public Integer getUserid()
    {
        return userid == null ? 0 : userid;
    }

    public BaseMoveTroopInfo setUserid(Integer userid)
    {
        this.userid = userid;
        return this;
    }

    // troopInfo

    public boolean hasTroopInfo(){
        return troopInfo != null;
    }


    public TroopInfo getTroopInfo()
    {
        return troopInfo == null ? new TroopInfo() : troopInfo;
    }

    public BaseMoveTroopInfo setTroopInfo(TroopInfo troopInfo)
    {
        this.troopInfo = troopInfo;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<BaseMoveTroopInfo> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public BaseMoveTroopInfo newMessage()
    {
        return new BaseMoveTroopInfo();
    }

    public Class<BaseMoveTroopInfo> typeClass()
    {
        return BaseMoveTroopInfo.class;
    }

    public String messageName()
    {
        return BaseMoveTroopInfo.class.getSimpleName();
    }

    public String messageFullName()
    {
        return BaseMoveTroopInfo.class.getName();
    }

    public boolean isInitialized(BaseMoveTroopInfo message)
    {
        return true;
    }

    public void mergeFrom(Input input, BaseMoveTroopInfo message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 10:
                    message.id = input.readUInt64();
                    break;
                case 50:
                    message.role = input.readUInt32();
                    break;
                case 70:
                    message.userid = input.readUInt32();
                    break;
                case 100:
                    message.troopInfo = input.mergeObject(message.troopInfo, TroopInfo.getSchema());
                    break;

                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, BaseMoveTroopInfo message) throws IOException
    {
        if(message.id != null)
            output.writeUInt64(10, message.id, false);

        if(message.role != null)
            output.writeUInt32(50, message.role, false);

        if(message.userid != null)
            output.writeUInt32(70, message.userid, false);

        if(message.troopInfo != null)
             output.writeObject(100, message.troopInfo, TroopInfo.getSchema(), false);

    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
