// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from common.proto

package com.vikings.sanguo.protos;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class ConditionNum implements Externalizable, Message<ConditionNum>, Schema<ConditionNum>
{

    public static Schema<ConditionNum> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static ConditionNum getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final ConditionNum DEFAULT_INSTANCE = new ConditionNum();

    
    private Integer field;
    private Integer value;

    public ConditionNum()
    {
        
    }

    // getters and setters

    // field

    public boolean hasField(){
        return field != null;
    }


    public Integer getField()
    {
        return field == null ? 0 : field;
    }

    public ConditionNum setField(Integer field)
    {
        this.field = field;
        return this;
    }

    // value

    public boolean hasValue(){
        return value != null;
    }


    public Integer getValue()
    {
        return value == null ? 0 : value;
    }

    public ConditionNum setValue(Integer value)
    {
        this.value = value;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<ConditionNum> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public ConditionNum newMessage()
    {
        return new ConditionNum();
    }

    public Class<ConditionNum> typeClass()
    {
        return ConditionNum.class;
    }

    public String messageName()
    {
        return ConditionNum.class.getSimpleName();
    }

    public String messageFullName()
    {
        return ConditionNum.class.getName();
    }

    public boolean isInitialized(ConditionNum message)
    {
        return true;
    }

    public void mergeFrom(Input input, ConditionNum message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 10:
                    message.field = input.readUInt32();
                    break;
                case 20:
                    message.value = input.readUInt32();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, ConditionNum message) throws IOException
    {
        if(message.field != null)
            output.writeUInt32(10, message.field, false);

        if(message.value != null)
            output.writeUInt32(20, message.value, false);
    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
