// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from common.proto

package com.vikings.sanguo.protos;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class BattleEventInfo implements Externalizable, Message<BattleEventInfo>, Schema<BattleEventInfo>
{

    public static Schema<BattleEventInfo> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static BattleEventInfo getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final BattleEventInfo DEFAULT_INSTANCE = new BattleEventInfo();

    
    private Integer sn;
    private Boolean attack;
    private List<BattleEventArmInfo> actives;
    private List<BattleEventArmInfo> passives;
    private Integer event;
    private Integer value;

    public BattleEventInfo()
    {
        
    }

    // getters and setters

    // sn

    public boolean hasSn(){
        return sn != null;
    }


    public Integer getSn()
    {
        return sn == null ? 0 : sn;
    }

    public BattleEventInfo setSn(Integer sn)
    {
        this.sn = sn;
        return this;
    }

    // attack

    public boolean hasAttack(){
        return attack != null;
    }


    public Boolean getAttack()
    {
        return attack == null ? false : attack;
    }

    public BattleEventInfo setAttack(Boolean attack)
    {
        this.attack = attack;
        return this;
    }

    // actives

    public boolean hasActives(){
        return actives != null;
    }


    public List<BattleEventArmInfo> getActivesList()
    {
        return actives == null?  new ArrayList<BattleEventArmInfo>():actives;
    }

    public int getActivesCount()
    {
        return actives == null?0:actives.size();
    }

    public BattleEventArmInfo getActives(int i)
    {
        return actives == null?null:actives.get(i);
    }


    public BattleEventInfo setActivesList(List<BattleEventArmInfo> actives)
    {
        this.actives = actives;
        return this;    
    }

    // passives

    public boolean hasPassives(){
        return passives != null;
    }


    public List<BattleEventArmInfo> getPassivesList()
    {
        return passives == null?  new ArrayList<BattleEventArmInfo>():passives;
    }

    public int getPassivesCount()
    {
        return passives == null?0:passives.size();
    }

    public BattleEventArmInfo getPassives(int i)
    {
        return passives == null?null:passives.get(i);
    }


    public BattleEventInfo setPassivesList(List<BattleEventArmInfo> passives)
    {
        this.passives = passives;
        return this;    
    }

    // event

    public boolean hasEvent(){
        return event != null;
    }


    public Integer getEvent()
    {
        return event == null ? 0 : event;
    }

    public BattleEventInfo setEvent(Integer event)
    {
        this.event = event;
        return this;
    }

    // value

    public boolean hasValue(){
        return value != null;
    }


    public Integer getValue()
    {
        return value == null ? 0 : value;
    }

    public BattleEventInfo setValue(Integer value)
    {
        this.value = value;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<BattleEventInfo> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public BattleEventInfo newMessage()
    {
        return new BattleEventInfo();
    }

    public Class<BattleEventInfo> typeClass()
    {
        return BattleEventInfo.class;
    }

    public String messageName()
    {
        return BattleEventInfo.class.getSimpleName();
    }

    public String messageFullName()
    {
        return BattleEventInfo.class.getName();
    }

    public boolean isInitialized(BattleEventInfo message)
    {
        return true;
    }

    public void mergeFrom(Input input, BattleEventInfo message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 10:
                    message.sn = input.readUInt32();
                    break;
                case 20:
                    message.attack = input.readBool();
                    break;
                case 30:
                    if(message.actives == null)
                        message.actives = new ArrayList<BattleEventArmInfo>();
                    message.actives.add(input.mergeObject(null, BattleEventArmInfo.getSchema()));
                    break;

                case 40:
                    if(message.passives == null)
                        message.passives = new ArrayList<BattleEventArmInfo>();
                    message.passives.add(input.mergeObject(null, BattleEventArmInfo.getSchema()));
                    break;

                case 50:
                    message.event = input.readUInt32();
                    break;
                case 60:
                    message.value = input.readInt32();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, BattleEventInfo message) throws IOException
    {
        if(message.sn != null)
            output.writeUInt32(10, message.sn, false);

        if(message.attack != null)
            output.writeBool(20, message.attack, false);

        if(message.actives != null)
        {
            for(BattleEventArmInfo actives : message.actives)
            {
                if(actives != null)
                    output.writeObject(30, actives, BattleEventArmInfo.getSchema(), true);
            }
        }


        if(message.passives != null)
        {
            for(BattleEventArmInfo passives : message.passives)
            {
                if(passives != null)
                    output.writeObject(40, passives, BattleEventArmInfo.getSchema(), true);
            }
        }


        if(message.event != null)
            output.writeUInt32(50, message.event, false);

        if(message.value != null)
            output.writeInt32(60, message.value, false);
    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
