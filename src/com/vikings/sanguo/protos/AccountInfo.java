// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from common.proto

package com.vikings.sanguo.protos;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public final class AccountInfo implements Externalizable, Message<AccountInfo>, Schema<AccountInfo>
{

    public static Schema<AccountInfo> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static AccountInfo getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final AccountInfo DEFAULT_INSTANCE = new AccountInfo();

    
    private Integer id;
    private AccountInfoPart1 part1;
    private AccountInfoPart3 part3;

    public AccountInfo()
    {
        
    }

    public AccountInfo(
        Integer id
    )
    {
        this.id = id;
    }

    // getters and setters

    // id

    public boolean hasId(){
        return id != null;
    }


    public Integer getId()
    {
        return id == null ? 0 : id;
    }

    public AccountInfo setId(Integer id)
    {
        this.id = id;
        return this;
    }

    // part1

    public boolean hasPart1(){
        return part1 != null;
    }


    public AccountInfoPart1 getPart1()
    {
        return part1 == null ? new AccountInfoPart1() : part1;
    }

    public AccountInfo setPart1(AccountInfoPart1 part1)
    {
        this.part1 = part1;
        return this;
    }

    // part3

    public boolean hasPart3(){
        return part3 != null;
    }


    public AccountInfoPart3 getPart3()
    {
        return part3 == null ? new AccountInfoPart3() : part3;
    }

    public AccountInfo setPart3(AccountInfoPart3 part3)
    {
        this.part3 = part3;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<AccountInfo> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public AccountInfo newMessage()
    {
        return new AccountInfo();
    }

    public Class<AccountInfo> typeClass()
    {
        return AccountInfo.class;
    }

    public String messageName()
    {
        return AccountInfo.class.getSimpleName();
    }

    public String messageFullName()
    {
        return AccountInfo.class.getName();
    }

    public boolean isInitialized(AccountInfo message)
    {
        return 
            message.id != null;
    }

    public void mergeFrom(Input input, AccountInfo message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 10:
                    message.id = input.readUInt32();
                    break;
                case 30:
                    message.part1 = input.mergeObject(message.part1, AccountInfoPart1.getSchema());
                    break;

                case 50:
                    message.part3 = input.mergeObject(message.part3, AccountInfoPart3.getSchema());
                    break;

                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, AccountInfo message) throws IOException
    {
        if(message.id == null)
            throw new UninitializedMessageException(message);
        output.writeUInt32(10, message.id, false);

        if(message.part1 != null)
             output.writeObject(30, message.part1, AccountInfoPart1.getSchema(), false);


        if(message.part3 != null)
             output.writeObject(50, message.part3, AccountInfoPart3.getSchema(), false);

    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
