// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from client.proto

package com.vikings.sanguo.protos;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class MsgRspHeroFavour implements Externalizable, Message<MsgRspHeroFavour>, Schema<MsgRspHeroFavour>
{

    public static Schema<MsgRspHeroFavour> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static MsgRspHeroFavour getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final MsgRspHeroFavour DEFAULT_INSTANCE = new MsgRspHeroFavour();

    
    private ReturnInfo ri;
    private HeroInfo heroInfo;

    public MsgRspHeroFavour()
    {
        
    }

    // getters and setters

    // ri

    public boolean hasRi(){
        return ri != null;
    }


    public ReturnInfo getRi()
    {
        return ri == null ? new ReturnInfo() : ri;
    }

    public MsgRspHeroFavour setRi(ReturnInfo ri)
    {
        this.ri = ri;
        return this;
    }

    // heroInfo

    public boolean hasHeroInfo(){
        return heroInfo != null;
    }


    public HeroInfo getHeroInfo()
    {
        return heroInfo == null ? new HeroInfo() : heroInfo;
    }

    public MsgRspHeroFavour setHeroInfo(HeroInfo heroInfo)
    {
        this.heroInfo = heroInfo;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<MsgRspHeroFavour> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public MsgRspHeroFavour newMessage()
    {
        return new MsgRspHeroFavour();
    }

    public Class<MsgRspHeroFavour> typeClass()
    {
        return MsgRspHeroFavour.class;
    }

    public String messageName()
    {
        return MsgRspHeroFavour.class.getSimpleName();
    }

    public String messageFullName()
    {
        return MsgRspHeroFavour.class.getName();
    }

    public boolean isInitialized(MsgRspHeroFavour message)
    {
        return true;
    }

    public void mergeFrom(Input input, MsgRspHeroFavour message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 10:
                    message.ri = input.mergeObject(message.ri, ReturnInfo.getSchema());
                    break;

                case 20:
                    message.heroInfo = input.mergeObject(message.heroInfo, HeroInfo.getSchema());
                    break;

                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, MsgRspHeroFavour message) throws IOException
    {
        if(message.ri != null)
             output.writeObject(10, message.ri, ReturnInfo.getSchema(), false);


        if(message.heroInfo != null)
             output.writeObject(20, message.heroInfo, HeroInfo.getSchema(), false);

    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
