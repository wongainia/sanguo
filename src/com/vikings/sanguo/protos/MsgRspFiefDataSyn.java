// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from client.proto

package com.vikings.sanguo.protos;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class MsgRspFiefDataSyn implements Externalizable, Message<MsgRspFiefDataSyn>, Schema<MsgRspFiefDataSyn>
{

    public static Schema<MsgRspFiefDataSyn> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static MsgRspFiefDataSyn getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final MsgRspFiefDataSyn DEFAULT_INSTANCE = new MsgRspFiefDataSyn();

    
    private List<RichFiefInfo> infos;
    private LordFiefInfos lordFiefInfos;

    public MsgRspFiefDataSyn()
    {
        
    }

    // getters and setters

    // infos

    public boolean hasInfos(){
        return infos != null;
    }


    public List<RichFiefInfo> getInfosList()
    {
        return infos == null?  new ArrayList<RichFiefInfo>():infos;
    }

    public int getInfosCount()
    {
        return infos == null?0:infos.size();
    }

    public RichFiefInfo getInfos(int i)
    {
        return infos == null?null:infos.get(i);
    }


    public MsgRspFiefDataSyn setInfosList(List<RichFiefInfo> infos)
    {
        this.infos = infos;
        return this;    
    }

    // lordFiefInfos

    public boolean hasLordFiefInfos(){
        return lordFiefInfos != null;
    }


    public LordFiefInfos getLordFiefInfos()
    {
        return lordFiefInfos == null ? new LordFiefInfos() : lordFiefInfos;
    }

    public MsgRspFiefDataSyn setLordFiefInfos(LordFiefInfos lordFiefInfos)
    {
        this.lordFiefInfos = lordFiefInfos;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<MsgRspFiefDataSyn> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public MsgRspFiefDataSyn newMessage()
    {
        return new MsgRspFiefDataSyn();
    }

    public Class<MsgRspFiefDataSyn> typeClass()
    {
        return MsgRspFiefDataSyn.class;
    }

    public String messageName()
    {
        return MsgRspFiefDataSyn.class.getSimpleName();
    }

    public String messageFullName()
    {
        return MsgRspFiefDataSyn.class.getName();
    }

    public boolean isInitialized(MsgRspFiefDataSyn message)
    {
        return true;
    }

    public void mergeFrom(Input input, MsgRspFiefDataSyn message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 10:
                    if(message.infos == null)
                        message.infos = new ArrayList<RichFiefInfo>();
                    message.infos.add(input.mergeObject(null, RichFiefInfo.getSchema()));
                    break;

                case 20:
                    message.lordFiefInfos = input.mergeObject(message.lordFiefInfos, LordFiefInfos.getSchema());
                    break;

                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, MsgRspFiefDataSyn message) throws IOException
    {
        if(message.infos != null)
        {
            for(RichFiefInfo infos : message.infos)
            {
                if(infos != null)
                    output.writeObject(10, infos, RichFiefInfo.getSchema(), true);
            }
        }


        if(message.lordFiefInfos != null)
             output.writeObject(20, message.lordFiefInfos, LordFiefInfos.getSchema(), false);

    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
