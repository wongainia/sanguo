// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from common.proto

package com.vikings.sanguo.protos;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class LordBloodInfo implements Externalizable, Message<LordBloodInfo>, Schema<LordBloodInfo>
{

    public static Schema<LordBloodInfo> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static LordBloodInfo getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final LordBloodInfo DEFAULT_INSTANCE = new LordBloodInfo();

    
    private TroopInfo bloodTroopInfo;
    private List<HeroIdInfo> bloodHeroInfos;
    private Integer bloodCount;
    private Integer bloodRecord;
    private Integer bloodRecordMax;
    private Integer bloodRecordLast;
    private Integer bloodReward;
    private List<KeyValue> bloodPokers;
    private Integer bloodResetTime;

    public LordBloodInfo()
    {
        
    }

    // getters and setters

    // bloodTroopInfo

    public boolean hasBloodTroopInfo(){
        return bloodTroopInfo != null;
    }


    public TroopInfo getBloodTroopInfo()
    {
        return bloodTroopInfo == null ? new TroopInfo() : bloodTroopInfo;
    }

    public LordBloodInfo setBloodTroopInfo(TroopInfo bloodTroopInfo)
    {
        this.bloodTroopInfo = bloodTroopInfo;
        return this;
    }

    // bloodHeroInfos

    public boolean hasBloodHeroInfos(){
        return bloodHeroInfos != null;
    }


    public List<HeroIdInfo> getBloodHeroInfosList()
    {
        return bloodHeroInfos == null?  new ArrayList<HeroIdInfo>():bloodHeroInfos;
    }

    public int getBloodHeroInfosCount()
    {
        return bloodHeroInfos == null?0:bloodHeroInfos.size();
    }

    public HeroIdInfo getBloodHeroInfos(int i)
    {
        return bloodHeroInfos == null?null:bloodHeroInfos.get(i);
    }


    public LordBloodInfo setBloodHeroInfosList(List<HeroIdInfo> bloodHeroInfos)
    {
        this.bloodHeroInfos = bloodHeroInfos;
        return this;    
    }

    // bloodCount

    public boolean hasBloodCount(){
        return bloodCount != null;
    }


    public Integer getBloodCount()
    {
        return bloodCount == null ? 0 : bloodCount;
    }

    public LordBloodInfo setBloodCount(Integer bloodCount)
    {
        this.bloodCount = bloodCount;
        return this;
    }

    // bloodRecord

    public boolean hasBloodRecord(){
        return bloodRecord != null;
    }


    public Integer getBloodRecord()
    {
        return bloodRecord == null ? 0 : bloodRecord;
    }

    public LordBloodInfo setBloodRecord(Integer bloodRecord)
    {
        this.bloodRecord = bloodRecord;
        return this;
    }

    // bloodRecordMax

    public boolean hasBloodRecordMax(){
        return bloodRecordMax != null;
    }


    public Integer getBloodRecordMax()
    {
        return bloodRecordMax == null ? 0 : bloodRecordMax;
    }

    public LordBloodInfo setBloodRecordMax(Integer bloodRecordMax)
    {
        this.bloodRecordMax = bloodRecordMax;
        return this;
    }

    // bloodRecordLast

    public boolean hasBloodRecordLast(){
        return bloodRecordLast != null;
    }


    public Integer getBloodRecordLast()
    {
        return bloodRecordLast == null ? 0 : bloodRecordLast;
    }

    public LordBloodInfo setBloodRecordLast(Integer bloodRecordLast)
    {
        this.bloodRecordLast = bloodRecordLast;
        return this;
    }

    // bloodReward

    public boolean hasBloodReward(){
        return bloodReward != null;
    }


    public Integer getBloodReward()
    {
        return bloodReward == null ? 0 : bloodReward;
    }

    public LordBloodInfo setBloodReward(Integer bloodReward)
    {
        this.bloodReward = bloodReward;
        return this;
    }

    // bloodPokers

    public boolean hasBloodPokers(){
        return bloodPokers != null;
    }


    public List<KeyValue> getBloodPokersList()
    {
        return bloodPokers == null?  new ArrayList<KeyValue>():bloodPokers;
    }

    public int getBloodPokersCount()
    {
        return bloodPokers == null?0:bloodPokers.size();
    }

    public KeyValue getBloodPokers(int i)
    {
        return bloodPokers == null?null:bloodPokers.get(i);
    }


    public LordBloodInfo setBloodPokersList(List<KeyValue> bloodPokers)
    {
        this.bloodPokers = bloodPokers;
        return this;    
    }

    // bloodResetTime

    public boolean hasBloodResetTime(){
        return bloodResetTime != null;
    }


    public Integer getBloodResetTime()
    {
        return bloodResetTime == null ? 0 : bloodResetTime;
    }

    public LordBloodInfo setBloodResetTime(Integer bloodResetTime)
    {
        this.bloodResetTime = bloodResetTime;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<LordBloodInfo> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public LordBloodInfo newMessage()
    {
        return new LordBloodInfo();
    }

    public Class<LordBloodInfo> typeClass()
    {
        return LordBloodInfo.class;
    }

    public String messageName()
    {
        return LordBloodInfo.class.getSimpleName();
    }

    public String messageFullName()
    {
        return LordBloodInfo.class.getName();
    }

    public boolean isInitialized(LordBloodInfo message)
    {
        return true;
    }

    public void mergeFrom(Input input, LordBloodInfo message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 10:
                    message.bloodTroopInfo = input.mergeObject(message.bloodTroopInfo, TroopInfo.getSchema());
                    break;

                case 20:
                    if(message.bloodHeroInfos == null)
                        message.bloodHeroInfos = new ArrayList<HeroIdInfo>();
                    message.bloodHeroInfos.add(input.mergeObject(null, HeroIdInfo.getSchema()));
                    break;

                case 30:
                    message.bloodCount = input.readUInt32();
                    break;
                case 40:
                    message.bloodRecord = input.readUInt32();
                    break;
                case 41:
                    message.bloodRecordMax = input.readUInt32();
                    break;
                case 42:
                    message.bloodRecordLast = input.readUInt32();
                    break;
                case 50:
                    message.bloodReward = input.readUInt32();
                    break;
                case 51:
                    if(message.bloodPokers == null)
                        message.bloodPokers = new ArrayList<KeyValue>();
                    message.bloodPokers.add(input.mergeObject(null, KeyValue.getSchema()));
                    break;

                case 53:
                    message.bloodResetTime = input.readUInt32();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, LordBloodInfo message) throws IOException
    {
        if(message.bloodTroopInfo != null)
             output.writeObject(10, message.bloodTroopInfo, TroopInfo.getSchema(), false);


        if(message.bloodHeroInfos != null)
        {
            for(HeroIdInfo bloodHeroInfos : message.bloodHeroInfos)
            {
                if(bloodHeroInfos != null)
                    output.writeObject(20, bloodHeroInfos, HeroIdInfo.getSchema(), true);
            }
        }


        if(message.bloodCount != null)
            output.writeUInt32(30, message.bloodCount, false);

        if(message.bloodRecord != null)
            output.writeUInt32(40, message.bloodRecord, false);

        if(message.bloodRecordMax != null)
            output.writeUInt32(41, message.bloodRecordMax, false);

        if(message.bloodRecordLast != null)
            output.writeUInt32(42, message.bloodRecordLast, false);

        if(message.bloodReward != null)
            output.writeUInt32(50, message.bloodReward, false);

        if(message.bloodPokers != null)
        {
            for(KeyValue bloodPokers : message.bloodPokers)
            {
                if(bloodPokers != null)
                    output.writeObject(51, bloodPokers, KeyValue.getSchema(), true);
            }
        }


        if(message.bloodResetTime != null)
            output.writeUInt32(53, message.bloodResetTime, false);
    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
