// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from common.proto

package com.vikings.sanguo.protos;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class LogInfo implements Externalizable, Message<LogInfo>, Schema<LogInfo>
{

    public static Schema<LogInfo> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static LogInfo getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final LogInfo DEFAULT_INSTANCE = new LogInfo();

    
    private Long id;
    private Integer type;
    private Integer time;
    private Long pos;
    private Integer active;
    private Integer passive;
    private Integer stid;
    private Integer scheme;
    private String context;
    private Integer count;
    private List<ReturnEffectInfo> reis;
    private List<Long> params;
    private Integer guildid;

    public LogInfo()
    {
        
    }

    // getters and setters

    // id

    public boolean hasId(){
        return id != null;
    }


    public Long getId()
    {
        return id == null ? 0L : id;
    }

    public LogInfo setId(Long id)
    {
        this.id = id;
        return this;
    }

    // type

    public boolean hasType(){
        return type != null;
    }


    public Integer getType()
    {
        return type == null ? 0 : type;
    }

    public LogInfo setType(Integer type)
    {
        this.type = type;
        return this;
    }

    // time

    public boolean hasTime(){
        return time != null;
    }


    public Integer getTime()
    {
        return time == null ? 0 : time;
    }

    public LogInfo setTime(Integer time)
    {
        this.time = time;
        return this;
    }

    // pos

    public boolean hasPos(){
        return pos != null;
    }


    public Long getPos()
    {
        return pos == null ? 0L : pos;
    }

    public LogInfo setPos(Long pos)
    {
        this.pos = pos;
        return this;
    }

    // active

    public boolean hasActive(){
        return active != null;
    }


    public Integer getActive()
    {
        return active == null ? 0 : active;
    }

    public LogInfo setActive(Integer active)
    {
        this.active = active;
        return this;
    }

    // passive

    public boolean hasPassive(){
        return passive != null;
    }


    public Integer getPassive()
    {
        return passive == null ? 0 : passive;
    }

    public LogInfo setPassive(Integer passive)
    {
        this.passive = passive;
        return this;
    }

    // stid

    public boolean hasStid(){
        return stid != null;
    }


    public Integer getStid()
    {
        return stid == null ? 0 : stid;
    }

    public LogInfo setStid(Integer stid)
    {
        this.stid = stid;
        return this;
    }

    // scheme

    public boolean hasScheme(){
        return scheme != null;
    }


    public Integer getScheme()
    {
        return scheme == null ? 0 : scheme;
    }

    public LogInfo setScheme(Integer scheme)
    {
        this.scheme = scheme;
        return this;
    }

    // context

    public boolean hasContext(){
        return context != null;
    }


    public String getContext()
    {
        return context == null ? "" : context;
    }

    public LogInfo setContext(String context)
    {
        this.context = context;
        return this;
    }

    // count

    public boolean hasCount(){
        return count != null;
    }


    public Integer getCount()
    {
        return count == null ? 0 : count;
    }

    public LogInfo setCount(Integer count)
    {
        this.count = count;
        return this;
    }

    // reis

    public boolean hasReis(){
        return reis != null;
    }


    public List<ReturnEffectInfo> getReisList()
    {
        return reis == null?  new ArrayList<ReturnEffectInfo>():reis;
    }

    public int getReisCount()
    {
        return reis == null?0:reis.size();
    }

    public ReturnEffectInfo getReis(int i)
    {
        return reis == null?null:reis.get(i);
    }


    public LogInfo setReisList(List<ReturnEffectInfo> reis)
    {
        this.reis = reis;
        return this;    
    }

    // params

    public boolean hasParams(){
        return params != null;
    }


    public List<Long> getParamsList()
    {
        return params == null?  new ArrayList<Long>():params;
    }

    public int getParamsCount()
    {
        return params == null?0:params.size();
    }

    public Long getParams(int i)
    {
        return params == null?null:params.get(i);
    }


    public LogInfo setParamsList(List<Long> params)
    {
        this.params = params;
        return this;    
    }

    // guildid

    public boolean hasGuildid(){
        return guildid != null;
    }


    public Integer getGuildid()
    {
        return guildid == null ? 0 : guildid;
    }

    public LogInfo setGuildid(Integer guildid)
    {
        this.guildid = guildid;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<LogInfo> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public LogInfo newMessage()
    {
        return new LogInfo();
    }

    public Class<LogInfo> typeClass()
    {
        return LogInfo.class;
    }

    public String messageName()
    {
        return LogInfo.class.getSimpleName();
    }

    public String messageFullName()
    {
        return LogInfo.class.getName();
    }

    public boolean isInitialized(LogInfo message)
    {
        return true;
    }

    public void mergeFrom(Input input, LogInfo message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 10:
                    message.id = input.readUInt64();
                    break;
                case 20:
                    message.type = input.readUInt32();
                    break;
                case 30:
                    message.time = input.readUInt32();
                    break;
                case 40:
                    message.pos = input.readUInt64();
                    break;
                case 50:
                    message.active = input.readUInt32();
                    break;
                case 60:
                    message.passive = input.readUInt32();
                    break;
                case 70:
                    message.stid = input.readUInt32();
                    break;
                case 71:
                    message.scheme = input.readUInt32();
                    break;
                case 80:
                    message.context = input.readString();
                    break;
                case 90:
                    message.count = input.readUInt32();
                    break;
                case 100:
                    if(message.reis == null)
                        message.reis = new ArrayList<ReturnEffectInfo>();
                    message.reis.add(input.mergeObject(null, ReturnEffectInfo.getSchema()));
                    break;

                case 110:
                    if(message.params == null)
                        message.params = new ArrayList<Long>();
                    message.params.add(input.readUInt64());
                    break;
                case 120:
                    message.guildid = input.readUInt32();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, LogInfo message) throws IOException
    {
        if(message.id != null)
            output.writeUInt64(10, message.id, false);

        if(message.type != null)
            output.writeUInt32(20, message.type, false);

        if(message.time != null)
            output.writeUInt32(30, message.time, false);

        if(message.pos != null)
            output.writeUInt64(40, message.pos, false);

        if(message.active != null)
            output.writeUInt32(50, message.active, false);

        if(message.passive != null)
            output.writeUInt32(60, message.passive, false);

        if(message.stid != null)
            output.writeUInt32(70, message.stid, false);

        if(message.scheme != null)
            output.writeUInt32(71, message.scheme, false);

        if(message.context != null)
            output.writeString(80, message.context, false);

        if(message.count != null)
            output.writeUInt32(90, message.count, false);

        if(message.reis != null)
        {
            for(ReturnEffectInfo reis : message.reis)
            {
                if(reis != null)
                    output.writeObject(100, reis, ReturnEffectInfo.getSchema(), true);
            }
        }


        if(message.params != null)
        {
            for(Long params : message.params)
            {
                if(params != null)
                    output.writeUInt64(110, params, true);
            }
        }

        if(message.guildid != null)
            output.writeUInt32(120, message.guildid, false);
    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
