// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from common.proto

package com.vikings.sanguo.protos;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class LordReviveInfo implements Externalizable, Message<LordReviveInfo>, Schema<LordReviveInfo>
{

    public static Schema<LordReviveInfo> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static LordReviveInfo getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final LordReviveInfo DEFAULT_INSTANCE = new LordReviveInfo();

    
    private TroopInfo reviveInfo;
    private TroopInfo reviveBossInfo;
    private Integer lastTime;
    private Integer count;

    public LordReviveInfo()
    {
        
    }

    // getters and setters

    // reviveInfo

    public boolean hasReviveInfo(){
        return reviveInfo != null;
    }


    public TroopInfo getReviveInfo()
    {
        return reviveInfo == null ? new TroopInfo() : reviveInfo;
    }

    public LordReviveInfo setReviveInfo(TroopInfo reviveInfo)
    {
        this.reviveInfo = reviveInfo;
        return this;
    }

    // reviveBossInfo

    public boolean hasReviveBossInfo(){
        return reviveBossInfo != null;
    }


    public TroopInfo getReviveBossInfo()
    {
        return reviveBossInfo == null ? new TroopInfo() : reviveBossInfo;
    }

    public LordReviveInfo setReviveBossInfo(TroopInfo reviveBossInfo)
    {
        this.reviveBossInfo = reviveBossInfo;
        return this;
    }

    // lastTime

    public boolean hasLastTime(){
        return lastTime != null;
    }


    public Integer getLastTime()
    {
        return lastTime == null ? 0 : lastTime;
    }

    public LordReviveInfo setLastTime(Integer lastTime)
    {
        this.lastTime = lastTime;
        return this;
    }

    // count

    public boolean hasCount(){
        return count != null;
    }


    public Integer getCount()
    {
        return count == null ? 0 : count;
    }

    public LordReviveInfo setCount(Integer count)
    {
        this.count = count;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<LordReviveInfo> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public LordReviveInfo newMessage()
    {
        return new LordReviveInfo();
    }

    public Class<LordReviveInfo> typeClass()
    {
        return LordReviveInfo.class;
    }

    public String messageName()
    {
        return LordReviveInfo.class.getSimpleName();
    }

    public String messageFullName()
    {
        return LordReviveInfo.class.getName();
    }

    public boolean isInitialized(LordReviveInfo message)
    {
        return true;
    }

    public void mergeFrom(Input input, LordReviveInfo message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 10:
                    message.reviveInfo = input.mergeObject(message.reviveInfo, TroopInfo.getSchema());
                    break;

                case 20:
                    message.reviveBossInfo = input.mergeObject(message.reviveBossInfo, TroopInfo.getSchema());
                    break;

                case 30:
                    message.lastTime = input.readUInt32();
                    break;
                case 40:
                    message.count = input.readUInt32();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, LordReviveInfo message) throws IOException
    {
        if(message.reviveInfo != null)
             output.writeObject(10, message.reviveInfo, TroopInfo.getSchema(), false);


        if(message.reviveBossInfo != null)
             output.writeObject(20, message.reviveBossInfo, TroopInfo.getSchema(), false);


        if(message.lastTime != null)
            output.writeUInt32(30, message.lastTime, false);

        if(message.count != null)
            output.writeUInt32(40, message.count, false);
    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
