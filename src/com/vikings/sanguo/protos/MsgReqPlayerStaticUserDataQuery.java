// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from client.proto

package com.vikings.sanguo.protos;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class MsgReqPlayerStaticUserDataQuery implements Externalizable, Message<MsgReqPlayerStaticUserDataQuery>, Schema<MsgReqPlayerStaticUserDataQuery>
{

    public static Schema<MsgReqPlayerStaticUserDataQuery> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static MsgReqPlayerStaticUserDataQuery getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final MsgReqPlayerStaticUserDataQuery DEFAULT_INSTANCE = new MsgReqPlayerStaticUserDataQuery();

    
    private Integer targetid;
    private StaticUserDataType dataType;
    private Long id;
    private Integer count;

    public MsgReqPlayerStaticUserDataQuery()
    {
        
    }

    // getters and setters

    // targetid

    public boolean hasTargetid(){
        return targetid != null;
    }


    public Integer getTargetid()
    {
        return targetid == null ? 0 : targetid;
    }

    public MsgReqPlayerStaticUserDataQuery setTargetid(Integer targetid)
    {
        this.targetid = targetid;
        return this;
    }

    // dataType

    public boolean hasDataType(){
        return dataType != null;
    }


    public StaticUserDataType getDataType()
    {
        return dataType == null ? StaticUserDataType.STATIC_USER_DATA_TYPE_LOG : dataType;
    }

    public MsgReqPlayerStaticUserDataQuery setDataType(StaticUserDataType dataType)
    {
        this.dataType = dataType;
        return this;
    }

    // id

    public boolean hasId(){
        return id != null;
    }


    public Long getId()
    {
        return id == null ? 0L : id;
    }

    public MsgReqPlayerStaticUserDataQuery setId(Long id)
    {
        this.id = id;
        return this;
    }

    // count

    public boolean hasCount(){
        return count != null;
    }


    public Integer getCount()
    {
        return count == null ? 0 : count;
    }

    public MsgReqPlayerStaticUserDataQuery setCount(Integer count)
    {
        this.count = count;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<MsgReqPlayerStaticUserDataQuery> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public MsgReqPlayerStaticUserDataQuery newMessage()
    {
        return new MsgReqPlayerStaticUserDataQuery();
    }

    public Class<MsgReqPlayerStaticUserDataQuery> typeClass()
    {
        return MsgReqPlayerStaticUserDataQuery.class;
    }

    public String messageName()
    {
        return MsgReqPlayerStaticUserDataQuery.class.getSimpleName();
    }

    public String messageFullName()
    {
        return MsgReqPlayerStaticUserDataQuery.class.getName();
    }

    public boolean isInitialized(MsgReqPlayerStaticUserDataQuery message)
    {
        return true;
    }

    public void mergeFrom(Input input, MsgReqPlayerStaticUserDataQuery message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 10:
                    message.targetid = input.readUInt32();
                    break;
                case 20:
                    message.dataType = StaticUserDataType.valueOf(input.readEnum());
                    break;
                case 30:
                    message.id = input.readUInt64();
                    break;
                case 40:
                    message.count = input.readUInt32();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, MsgReqPlayerStaticUserDataQuery message) throws IOException
    {
        if(message.targetid != null)
            output.writeUInt32(10, message.targetid, false);

        if(message.dataType != null)
             output.writeEnum(20, message.dataType.number, false);

        if(message.id != null)
            output.writeUInt64(30, message.id, false);

        if(message.count != null)
            output.writeUInt32(40, message.count, false);
    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
