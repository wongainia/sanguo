// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from common.proto

package com.vikings.sanguo.protos;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class BaseEquipmentInfo implements Externalizable, Message<BaseEquipmentInfo>, Schema<BaseEquipmentInfo>
{

    public static Schema<BaseEquipmentInfo> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static BaseEquipmentInfo getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final BaseEquipmentInfo DEFAULT_INSTANCE = new BaseEquipmentInfo();

    
    private Long id;
    private Integer itemid;
    private Integer level;
    private Integer quality;
    private Integer slotItemid;
    private EquipEffect effect;

    public BaseEquipmentInfo()
    {
        
    }

    // getters and setters

    // id

    public boolean hasId(){
        return id != null;
    }


    public Long getId()
    {
        return id == null ? 0L : id;
    }

    public BaseEquipmentInfo setId(Long id)
    {
        this.id = id;
        return this;
    }

    // itemid

    public boolean hasItemid(){
        return itemid != null;
    }


    public Integer getItemid()
    {
        return itemid == null ? 0 : itemid;
    }

    public BaseEquipmentInfo setItemid(Integer itemid)
    {
        this.itemid = itemid;
        return this;
    }

    // level

    public boolean hasLevel(){
        return level != null;
    }


    public Integer getLevel()
    {
        return level == null ? 0 : level;
    }

    public BaseEquipmentInfo setLevel(Integer level)
    {
        this.level = level;
        return this;
    }

    // quality

    public boolean hasQuality(){
        return quality != null;
    }


    public Integer getQuality()
    {
        return quality == null ? 0 : quality;
    }

    public BaseEquipmentInfo setQuality(Integer quality)
    {
        this.quality = quality;
        return this;
    }

    // slotItemid

    public boolean hasSlotItemid(){
        return slotItemid != null;
    }


    public Integer getSlotItemid()
    {
        return slotItemid == null ? 0 : slotItemid;
    }

    public BaseEquipmentInfo setSlotItemid(Integer slotItemid)
    {
        this.slotItemid = slotItemid;
        return this;
    }

    // effect

    public boolean hasEffect(){
        return effect != null;
    }


    public EquipEffect getEffect()
    {
        return effect == null ? new EquipEffect() : effect;
    }

    public BaseEquipmentInfo setEffect(EquipEffect effect)
    {
        this.effect = effect;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<BaseEquipmentInfo> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public BaseEquipmentInfo newMessage()
    {
        return new BaseEquipmentInfo();
    }

    public Class<BaseEquipmentInfo> typeClass()
    {
        return BaseEquipmentInfo.class;
    }

    public String messageName()
    {
        return BaseEquipmentInfo.class.getSimpleName();
    }

    public String messageFullName()
    {
        return BaseEquipmentInfo.class.getName();
    }

    public boolean isInitialized(BaseEquipmentInfo message)
    {
        return true;
    }

    public void mergeFrom(Input input, BaseEquipmentInfo message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 10:
                    message.id = input.readUInt64();
                    break;
                case 20:
                    message.itemid = input.readUInt32();
                    break;
                case 30:
                    message.level = input.readUInt32();
                    break;
                case 50:
                    message.quality = input.readUInt32();
                    break;
                case 100:
                    message.slotItemid = input.readUInt32();
                    break;
                case 110:
                    message.effect = input.mergeObject(message.effect, EquipEffect.getSchema());
                    break;

                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, BaseEquipmentInfo message) throws IOException
    {
        if(message.id != null)
            output.writeUInt64(10, message.id, false);

        if(message.itemid != null)
            output.writeUInt32(20, message.itemid, false);

        if(message.level != null)
            output.writeUInt32(30, message.level, false);

        if(message.quality != null)
            output.writeUInt32(50, message.quality, false);

        if(message.slotItemid != null)
            output.writeUInt32(100, message.slotItemid, false);

        if(message.effect != null)
             output.writeObject(110, message.effect, EquipEffect.getSchema(), false);

    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
