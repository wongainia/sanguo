// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from common.proto

package com.vikings.sanguo.protos;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class ActInfo implements Externalizable, Message<ActInfo>, Schema<ActInfo>
{

    public static Schema<ActInfo> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static ActInfo getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final ActInfo DEFAULT_INSTANCE = new ActInfo();

    
    private Integer id;
    private Integer flag;
    private List<CampaignInfo> infos;
    private Integer clearTimes;
    private Integer lastResetTime;

    public ActInfo()
    {
        
    }

    // getters and setters

    // id

    public boolean hasId(){
        return id != null;
    }


    public Integer getId()
    {
        return id == null ? 0 : id;
    }

    public ActInfo setId(Integer id)
    {
        this.id = id;
        return this;
    }

    // flag

    public boolean hasFlag(){
        return flag != null;
    }


    public Integer getFlag()
    {
        return flag == null ? 0 : flag;
    }

    public ActInfo setFlag(Integer flag)
    {
        this.flag = flag;
        return this;
    }

    // infos

    public boolean hasInfos(){
        return infos != null;
    }


    public List<CampaignInfo> getInfosList()
    {
        return infos == null?  new ArrayList<CampaignInfo>():infos;
    }

    public int getInfosCount()
    {
        return infos == null?0:infos.size();
    }

    public CampaignInfo getInfos(int i)
    {
        return infos == null?null:infos.get(i);
    }


    public ActInfo setInfosList(List<CampaignInfo> infos)
    {
        this.infos = infos;
        return this;    
    }

    // clearTimes

    public boolean hasClearTimes(){
        return clearTimes != null;
    }


    public Integer getClearTimes()
    {
        return clearTimes == null ? 0 : clearTimes;
    }

    public ActInfo setClearTimes(Integer clearTimes)
    {
        this.clearTimes = clearTimes;
        return this;
    }

    // lastResetTime

    public boolean hasLastResetTime(){
        return lastResetTime != null;
    }


    public Integer getLastResetTime()
    {
        return lastResetTime == null ? 0 : lastResetTime;
    }

    public ActInfo setLastResetTime(Integer lastResetTime)
    {
        this.lastResetTime = lastResetTime;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<ActInfo> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public ActInfo newMessage()
    {
        return new ActInfo();
    }

    public Class<ActInfo> typeClass()
    {
        return ActInfo.class;
    }

    public String messageName()
    {
        return ActInfo.class.getSimpleName();
    }

    public String messageFullName()
    {
        return ActInfo.class.getName();
    }

    public boolean isInitialized(ActInfo message)
    {
        return true;
    }

    public void mergeFrom(Input input, ActInfo message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 10:
                    message.id = input.readUInt32();
                    break;
                case 20:
                    message.flag = input.readUInt32();
                    break;
                case 30:
                    if(message.infos == null)
                        message.infos = new ArrayList<CampaignInfo>();
                    message.infos.add(input.mergeObject(null, CampaignInfo.getSchema()));
                    break;

                case 40:
                    message.clearTimes = input.readUInt32();
                    break;
                case 50:
                    message.lastResetTime = input.readUInt32();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, ActInfo message) throws IOException
    {
        if(message.id != null)
            output.writeUInt32(10, message.id, false);

        if(message.flag != null)
            output.writeUInt32(20, message.flag, false);

        if(message.infos != null)
        {
            for(CampaignInfo infos : message.infos)
            {
                if(infos != null)
                    output.writeObject(30, infos, CampaignInfo.getSchema(), true);
            }
        }


        if(message.clearTimes != null)
            output.writeUInt32(40, message.clearTimes, false);

        if(message.lastResetTime != null)
            output.writeUInt32(50, message.lastResetTime, false);
    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
