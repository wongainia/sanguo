// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from common.proto

package com.vikings.sanguo.protos;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class BattleInfo implements Externalizable, Message<BattleInfo>, Schema<BattleInfo>
{

    public static Schema<BattleInfo> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static BattleInfo getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final BattleInfo DEFAULT_INSTANCE = new BattleInfo();

    
    private BaseBattleInfo bi;
    private ServerBattleInfo si;
    private ClientBattleInfo ci;

    public BattleInfo()
    {
        
    }

    // getters and setters

    // bi

    public boolean hasBi(){
        return bi != null;
    }


    public BaseBattleInfo getBi()
    {
        return bi == null ? new BaseBattleInfo() : bi;
    }

    public BattleInfo setBi(BaseBattleInfo bi)
    {
        this.bi = bi;
        return this;
    }

    // si

    public boolean hasSi(){
        return si != null;
    }


    public ServerBattleInfo getSi()
    {
        return si == null ? new ServerBattleInfo() : si;
    }

    public BattleInfo setSi(ServerBattleInfo si)
    {
        this.si = si;
        return this;
    }

    // ci

    public boolean hasCi(){
        return ci != null;
    }


    public ClientBattleInfo getCi()
    {
        return ci == null ? new ClientBattleInfo() : ci;
    }

    public BattleInfo setCi(ClientBattleInfo ci)
    {
        this.ci = ci;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<BattleInfo> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public BattleInfo newMessage()
    {
        return new BattleInfo();
    }

    public Class<BattleInfo> typeClass()
    {
        return BattleInfo.class;
    }

    public String messageName()
    {
        return BattleInfo.class.getSimpleName();
    }

    public String messageFullName()
    {
        return BattleInfo.class.getName();
    }

    public boolean isInitialized(BattleInfo message)
    {
        return true;
    }

    public void mergeFrom(Input input, BattleInfo message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 10:
                    message.bi = input.mergeObject(message.bi, BaseBattleInfo.getSchema());
                    break;

                case 20:
                    message.si = input.mergeObject(message.si, ServerBattleInfo.getSchema());
                    break;

                case 30:
                    message.ci = input.mergeObject(message.ci, ClientBattleInfo.getSchema());
                    break;

                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, BattleInfo message) throws IOException
    {
        if(message.bi != null)
             output.writeObject(10, message.bi, BaseBattleInfo.getSchema(), false);


        if(message.si != null)
             output.writeObject(20, message.si, ServerBattleInfo.getSchema(), false);


        if(message.ci != null)
             output.writeObject(30, message.ci, ClientBattleInfo.getSchema(), false);

    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
