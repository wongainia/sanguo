// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from client.proto

package com.vikings.sanguo.protos;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class MsgReqArenaConf implements Externalizable, Message<MsgReqArenaConf>, Schema<MsgReqArenaConf>
{

    public static Schema<MsgReqArenaConf> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static MsgReqArenaConf getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final MsgReqArenaConf DEFAULT_INSTANCE = new MsgReqArenaConf();

    
    private List<HeroIdInfo> heros;
    private TroopInfo troop;

    public MsgReqArenaConf()
    {
        
    }

    // getters and setters

    // heros

    public boolean hasHeros(){
        return heros != null;
    }


    public List<HeroIdInfo> getHerosList()
    {
        return heros == null?  new ArrayList<HeroIdInfo>():heros;
    }

    public int getHerosCount()
    {
        return heros == null?0:heros.size();
    }

    public HeroIdInfo getHeros(int i)
    {
        return heros == null?null:heros.get(i);
    }


    public MsgReqArenaConf setHerosList(List<HeroIdInfo> heros)
    {
        this.heros = heros;
        return this;    
    }

    // troop

    public boolean hasTroop(){
        return troop != null;
    }


    public TroopInfo getTroop()
    {
        return troop == null ? new TroopInfo() : troop;
    }

    public MsgReqArenaConf setTroop(TroopInfo troop)
    {
        this.troop = troop;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<MsgReqArenaConf> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public MsgReqArenaConf newMessage()
    {
        return new MsgReqArenaConf();
    }

    public Class<MsgReqArenaConf> typeClass()
    {
        return MsgReqArenaConf.class;
    }

    public String messageName()
    {
        return MsgReqArenaConf.class.getSimpleName();
    }

    public String messageFullName()
    {
        return MsgReqArenaConf.class.getName();
    }

    public boolean isInitialized(MsgReqArenaConf message)
    {
        return true;
    }

    public void mergeFrom(Input input, MsgReqArenaConf message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 10:
                    if(message.heros == null)
                        message.heros = new ArrayList<HeroIdInfo>();
                    message.heros.add(input.mergeObject(null, HeroIdInfo.getSchema()));
                    break;

                case 20:
                    message.troop = input.mergeObject(message.troop, TroopInfo.getSchema());
                    break;

                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, MsgReqArenaConf message) throws IOException
    {
        if(message.heros != null)
        {
            for(HeroIdInfo heros : message.heros)
            {
                if(heros != null)
                    output.writeObject(10, heros, HeroIdInfo.getSchema(), true);
            }
        }


        if(message.troop != null)
             output.writeObject(20, message.troop, TroopInfo.getSchema(), false);

    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
