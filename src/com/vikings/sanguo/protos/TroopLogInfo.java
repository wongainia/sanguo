// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from common.proto

package com.vikings.sanguo.protos;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class TroopLogInfo implements Externalizable, Message<TroopLogInfo>, Schema<TroopLogInfo>
{

    public static Schema<TroopLogInfo> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static TroopLogInfo getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final TroopLogInfo DEFAULT_INSTANCE = new TroopLogInfo();

    
    private Long id;
    private Integer time;
    private Integer event;
    private Long src;
    private Long dst;
    private Integer heroid;
    private Integer heroType;
    private TroopInfo info;
    private List<Integer> params;

    public TroopLogInfo()
    {
        
    }

    // getters and setters

    // id

    public boolean hasId(){
        return id != null;
    }


    public Long getId()
    {
        return id == null ? 0L : id;
    }

    public TroopLogInfo setId(Long id)
    {
        this.id = id;
        return this;
    }

    // time

    public boolean hasTime(){
        return time != null;
    }


    public Integer getTime()
    {
        return time == null ? 0 : time;
    }

    public TroopLogInfo setTime(Integer time)
    {
        this.time = time;
        return this;
    }

    // event

    public boolean hasEvent(){
        return event != null;
    }


    public Integer getEvent()
    {
        return event == null ? 0 : event;
    }

    public TroopLogInfo setEvent(Integer event)
    {
        this.event = event;
        return this;
    }

    // src

    public boolean hasSrc(){
        return src != null;
    }


    public Long getSrc()
    {
        return src == null ? 0L : src;
    }

    public TroopLogInfo setSrc(Long src)
    {
        this.src = src;
        return this;
    }

    // dst

    public boolean hasDst(){
        return dst != null;
    }


    public Long getDst()
    {
        return dst == null ? 0L : dst;
    }

    public TroopLogInfo setDst(Long dst)
    {
        this.dst = dst;
        return this;
    }

    // heroid

    public boolean hasHeroid(){
        return heroid != null;
    }


    public Integer getHeroid()
    {
        return heroid == null ? 0 : heroid;
    }

    public TroopLogInfo setHeroid(Integer heroid)
    {
        this.heroid = heroid;
        return this;
    }

    // heroType

    public boolean hasHeroType(){
        return heroType != null;
    }


    public Integer getHeroType()
    {
        return heroType == null ? 0 : heroType;
    }

    public TroopLogInfo setHeroType(Integer heroType)
    {
        this.heroType = heroType;
        return this;
    }

    // info

    public boolean hasInfo(){
        return info != null;
    }


    public TroopInfo getInfo()
    {
        return info == null ? new TroopInfo() : info;
    }

    public TroopLogInfo setInfo(TroopInfo info)
    {
        this.info = info;
        return this;
    }

    // params

    public boolean hasParams(){
        return params != null;
    }


    public List<Integer> getParamsList()
    {
        return params == null?  new ArrayList<Integer>():params;
    }

    public int getParamsCount()
    {
        return params == null?0:params.size();
    }

    public Integer getParams(int i)
    {
        return params == null?null:params.get(i);
    }


    public TroopLogInfo setParamsList(List<Integer> params)
    {
        this.params = params;
        return this;    
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<TroopLogInfo> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public TroopLogInfo newMessage()
    {
        return new TroopLogInfo();
    }

    public Class<TroopLogInfo> typeClass()
    {
        return TroopLogInfo.class;
    }

    public String messageName()
    {
        return TroopLogInfo.class.getSimpleName();
    }

    public String messageFullName()
    {
        return TroopLogInfo.class.getName();
    }

    public boolean isInitialized(TroopLogInfo message)
    {
        return true;
    }

    public void mergeFrom(Input input, TroopLogInfo message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 10:
                    message.id = input.readUInt64();
                    break;
                case 20:
                    message.time = input.readUInt32();
                    break;
                case 30:
                    message.event = input.readUInt32();
                    break;
                case 40:
                    message.src = input.readUInt64();
                    break;
                case 50:
                    message.dst = input.readUInt64();
                    break;
                case 55:
                    message.heroid = input.readUInt32();
                    break;
                case 58:
                    message.heroType = input.readUInt32();
                    break;
                case 60:
                    message.info = input.mergeObject(message.info, TroopInfo.getSchema());
                    break;

                case 80:
                    if(message.params == null)
                        message.params = new ArrayList<Integer>();
                    int count = input.readInt32();
                    int cur = ((com.dyuproject.protostuff.ByteArrayInput)input).currentOffset();
                    while(((com.dyuproject.protostuff.ByteArrayInput)input).currentOffset() - cur < count)
                    {
                        message.params.add(input.readUInt32());
                    }
                    break;
                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, TroopLogInfo message) throws IOException
    {
        if(message.id != null)
            output.writeUInt64(10, message.id, false);

        if(message.time != null)
            output.writeUInt32(20, message.time, false);

        if(message.event != null)
            output.writeUInt32(30, message.event, false);

        if(message.src != null)
            output.writeUInt64(40, message.src, false);

        if(message.dst != null)
            output.writeUInt64(50, message.dst, false);

        if(message.heroid != null)
            output.writeUInt32(55, message.heroid, false);

        if(message.heroType != null)
            output.writeUInt32(58, message.heroType, false);

        if(message.info != null)
             output.writeObject(60, message.info, TroopInfo.getSchema(), false);


        if(message.params != null)
        {
            for(Integer params : message.params)
            {
                if(params != null)
                    output.writeUInt32(80, params, true);
            }
        }
    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
