// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from client.proto

package com.vikings.sanguo.protos;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class MsgRspBloodReward implements Externalizable, Message<MsgRspBloodReward>, Schema<MsgRspBloodReward>
{

    public static Schema<MsgRspBloodReward> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static MsgRspBloodReward getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final MsgRspBloodReward DEFAULT_INSTANCE = new MsgRspBloodReward();

    
    private LordInfo li;

    public MsgRspBloodReward()
    {
        
    }

    // getters and setters

    // li

    public boolean hasLi(){
        return li != null;
    }


    public LordInfo getLi()
    {
        return li == null ? new LordInfo() : li;
    }

    public MsgRspBloodReward setLi(LordInfo li)
    {
        this.li = li;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<MsgRspBloodReward> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public MsgRspBloodReward newMessage()
    {
        return new MsgRspBloodReward();
    }

    public Class<MsgRspBloodReward> typeClass()
    {
        return MsgRspBloodReward.class;
    }

    public String messageName()
    {
        return MsgRspBloodReward.class.getSimpleName();
    }

    public String messageFullName()
    {
        return MsgRspBloodReward.class.getName();
    }

    public boolean isInitialized(MsgRspBloodReward message)
    {
        return true;
    }

    public void mergeFrom(Input input, MsgRspBloodReward message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 20:
                    message.li = input.mergeObject(message.li, LordInfo.getSchema());
                    break;

                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, MsgRspBloodReward message) throws IOException
    {
        if(message.li != null)
             output.writeObject(20, message.li, LordInfo.getSchema(), false);

    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
