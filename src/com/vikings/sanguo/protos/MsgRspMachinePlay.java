// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from client.proto

package com.vikings.sanguo.protos;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class MsgRspMachinePlay implements Externalizable, Message<MsgRspMachinePlay>, Schema<MsgRspMachinePlay>
{

    public static Schema<MsgRspMachinePlay> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static MsgRspMachinePlay getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final MsgRspMachinePlay DEFAULT_INSTANCE = new MsgRspMachinePlay();

    
    private List<Integer> wheels;
    private ReturnInfo ri;
    private Integer isOnList;
    private Integer freeResetTime;
    private Integer freeTimes;
    private Integer remainTimes;

    public MsgRspMachinePlay()
    {
        
    }

    // getters and setters

    // wheels

    public boolean hasWheels(){
        return wheels != null;
    }


    public List<Integer> getWheelsList()
    {
        return wheels == null?  new ArrayList<Integer>():wheels;
    }

    public int getWheelsCount()
    {
        return wheels == null?0:wheels.size();
    }

    public Integer getWheels(int i)
    {
        return wheels == null?null:wheels.get(i);
    }


    public MsgRspMachinePlay setWheelsList(List<Integer> wheels)
    {
        this.wheels = wheels;
        return this;    
    }

    // ri

    public boolean hasRi(){
        return ri != null;
    }


    public ReturnInfo getRi()
    {
        return ri == null ? new ReturnInfo() : ri;
    }

    public MsgRspMachinePlay setRi(ReturnInfo ri)
    {
        this.ri = ri;
        return this;
    }

    // isOnList

    public boolean hasIsOnList(){
        return isOnList != null;
    }


    public Integer getIsOnList()
    {
        return isOnList == null ? 0 : isOnList;
    }

    public MsgRspMachinePlay setIsOnList(Integer isOnList)
    {
        this.isOnList = isOnList;
        return this;
    }

    // freeResetTime

    public boolean hasFreeResetTime(){
        return freeResetTime != null;
    }


    public Integer getFreeResetTime()
    {
        return freeResetTime == null ? 0 : freeResetTime;
    }

    public MsgRspMachinePlay setFreeResetTime(Integer freeResetTime)
    {
        this.freeResetTime = freeResetTime;
        return this;
    }

    // freeTimes

    public boolean hasFreeTimes(){
        return freeTimes != null;
    }


    public Integer getFreeTimes()
    {
        return freeTimes == null ? 0 : freeTimes;
    }

    public MsgRspMachinePlay setFreeTimes(Integer freeTimes)
    {
        this.freeTimes = freeTimes;
        return this;
    }

    // remainTimes

    public boolean hasRemainTimes(){
        return remainTimes != null;
    }


    public Integer getRemainTimes()
    {
        return remainTimes == null ? 0 : remainTimes;
    }

    public MsgRspMachinePlay setRemainTimes(Integer remainTimes)
    {
        this.remainTimes = remainTimes;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<MsgRspMachinePlay> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public MsgRspMachinePlay newMessage()
    {
        return new MsgRspMachinePlay();
    }

    public Class<MsgRspMachinePlay> typeClass()
    {
        return MsgRspMachinePlay.class;
    }

    public String messageName()
    {
        return MsgRspMachinePlay.class.getSimpleName();
    }

    public String messageFullName()
    {
        return MsgRspMachinePlay.class.getName();
    }

    public boolean isInitialized(MsgRspMachinePlay message)
    {
        return true;
    }

    public void mergeFrom(Input input, MsgRspMachinePlay message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 10:
                    if(message.wheels == null)
                        message.wheels = new ArrayList<Integer>();
                    message.wheels.add(input.readUInt32());
                    break;
                case 20:
                    message.ri = input.mergeObject(message.ri, ReturnInfo.getSchema());
                    break;

                case 50:
                    message.isOnList = input.readUInt32();
                    break;
                case 60:
                    message.freeResetTime = input.readUInt32();
                    break;
                case 70:
                    message.freeTimes = input.readUInt32();
                    break;
                case 80:
                    message.remainTimes = input.readUInt32();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, MsgRspMachinePlay message) throws IOException
    {
        if(message.wheels != null)
        {
            for(Integer wheels : message.wheels)
            {
                if(wheels != null)
                    output.writeUInt32(10, wheels, true);
            }
        }

        if(message.ri != null)
             output.writeObject(20, message.ri, ReturnInfo.getSchema(), false);


        if(message.isOnList != null)
            output.writeUInt32(50, message.isOnList, false);

        if(message.freeResetTime != null)
            output.writeUInt32(60, message.freeResetTime, false);

        if(message.freeTimes != null)
            output.writeUInt32(70, message.freeTimes, false);

        if(message.remainTimes != null)
            output.writeUInt32(80, message.remainTimes, false);
    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
