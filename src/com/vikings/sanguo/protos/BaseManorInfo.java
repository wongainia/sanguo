// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from common.proto

package com.vikings.sanguo.protos;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class BaseManorInfo implements Externalizable, Message<BaseManorInfo>, Schema<BaseManorInfo>
{

    public static Schema<BaseManorInfo> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static BaseManorInfo getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final BaseManorInfo DEFAULT_INSTANCE = new BaseManorInfo();

    
    private Long pos;
    private Integer scale;
    private Integer curPop;
    private Integer totPop;
    private Long flag;
    private Integer update;
    private String name;
    private TroopInfo troopInfo;
    private List<BuildingInfo> buildingInfos;
    private List<BuildingEffectInfo> effectInfos;
    private List<BuildingStatusInfo> statusInfos;

    public BaseManorInfo()
    {
        
    }

    // getters and setters

    // pos

    public boolean hasPos(){
        return pos != null;
    }


    public Long getPos()
    {
        return pos == null ? 0L : pos;
    }

    public BaseManorInfo setPos(Long pos)
    {
        this.pos = pos;
        return this;
    }

    // scale

    public boolean hasScale(){
        return scale != null;
    }


    public Integer getScale()
    {
        return scale == null ? 0 : scale;
    }

    public BaseManorInfo setScale(Integer scale)
    {
        this.scale = scale;
        return this;
    }

    // curPop

    public boolean hasCurPop(){
        return curPop != null;
    }


    public Integer getCurPop()
    {
        return curPop == null ? 0 : curPop;
    }

    public BaseManorInfo setCurPop(Integer curPop)
    {
        this.curPop = curPop;
        return this;
    }

    // totPop

    public boolean hasTotPop(){
        return totPop != null;
    }


    public Integer getTotPop()
    {
        return totPop == null ? 0 : totPop;
    }

    public BaseManorInfo setTotPop(Integer totPop)
    {
        this.totPop = totPop;
        return this;
    }

    // flag

    public boolean hasFlag(){
        return flag != null;
    }


    public Long getFlag()
    {
        return flag == null ? 0L : flag;
    }

    public BaseManorInfo setFlag(Long flag)
    {
        this.flag = flag;
        return this;
    }

    // update

    public boolean hasUpdate(){
        return update != null;
    }


    public Integer getUpdate()
    {
        return update == null ? 0 : update;
    }

    public BaseManorInfo setUpdate(Integer update)
    {
        this.update = update;
        return this;
    }

    // name

    public boolean hasName(){
        return name != null;
    }


    public String getName()
    {
        return name == null ? "" : name;
    }

    public BaseManorInfo setName(String name)
    {
        this.name = name;
        return this;
    }

    // troopInfo

    public boolean hasTroopInfo(){
        return troopInfo != null;
    }


    public TroopInfo getTroopInfo()
    {
        return troopInfo == null ? new TroopInfo() : troopInfo;
    }

    public BaseManorInfo setTroopInfo(TroopInfo troopInfo)
    {
        this.troopInfo = troopInfo;
        return this;
    }

    // buildingInfos

    public boolean hasBuildingInfos(){
        return buildingInfos != null;
    }


    public List<BuildingInfo> getBuildingInfosList()
    {
        return buildingInfos == null?  new ArrayList<BuildingInfo>():buildingInfos;
    }

    public int getBuildingInfosCount()
    {
        return buildingInfos == null?0:buildingInfos.size();
    }

    public BuildingInfo getBuildingInfos(int i)
    {
        return buildingInfos == null?null:buildingInfos.get(i);
    }


    public BaseManorInfo setBuildingInfosList(List<BuildingInfo> buildingInfos)
    {
        this.buildingInfos = buildingInfos;
        return this;    
    }

    // effectInfos

    public boolean hasEffectInfos(){
        return effectInfos != null;
    }


    public List<BuildingEffectInfo> getEffectInfosList()
    {
        return effectInfos == null?  new ArrayList<BuildingEffectInfo>():effectInfos;
    }

    public int getEffectInfosCount()
    {
        return effectInfos == null?0:effectInfos.size();
    }

    public BuildingEffectInfo getEffectInfos(int i)
    {
        return effectInfos == null?null:effectInfos.get(i);
    }


    public BaseManorInfo setEffectInfosList(List<BuildingEffectInfo> effectInfos)
    {
        this.effectInfos = effectInfos;
        return this;    
    }

    // statusInfos

    public boolean hasStatusInfos(){
        return statusInfos != null;
    }


    public List<BuildingStatusInfo> getStatusInfosList()
    {
        return statusInfos == null?  new ArrayList<BuildingStatusInfo>():statusInfos;
    }

    public int getStatusInfosCount()
    {
        return statusInfos == null?0:statusInfos.size();
    }

    public BuildingStatusInfo getStatusInfos(int i)
    {
        return statusInfos == null?null:statusInfos.get(i);
    }


    public BaseManorInfo setStatusInfosList(List<BuildingStatusInfo> statusInfos)
    {
        this.statusInfos = statusInfos;
        return this;    
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<BaseManorInfo> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public BaseManorInfo newMessage()
    {
        return new BaseManorInfo();
    }

    public Class<BaseManorInfo> typeClass()
    {
        return BaseManorInfo.class;
    }

    public String messageName()
    {
        return BaseManorInfo.class.getSimpleName();
    }

    public String messageFullName()
    {
        return BaseManorInfo.class.getName();
    }

    public boolean isInitialized(BaseManorInfo message)
    {
        return true;
    }

    public void mergeFrom(Input input, BaseManorInfo message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 20:
                    message.pos = input.readUInt64();
                    break;
                case 30:
                    message.scale = input.readUInt32();
                    break;
                case 80:
                    message.curPop = input.readInt32();
                    break;
                case 90:
                    message.totPop = input.readInt32();
                    break;
                case 100:
                    message.flag = input.readUInt64();
                    break;
                case 110:
                    message.update = input.readUInt32();
                    break;
                case 120:
                    message.name = input.readString();
                    break;
                case 140:
                    message.troopInfo = input.mergeObject(message.troopInfo, TroopInfo.getSchema());
                    break;

                case 200:
                    if(message.buildingInfos == null)
                        message.buildingInfos = new ArrayList<BuildingInfo>();
                    message.buildingInfos.add(input.mergeObject(null, BuildingInfo.getSchema()));
                    break;

                case 210:
                    if(message.effectInfos == null)
                        message.effectInfos = new ArrayList<BuildingEffectInfo>();
                    message.effectInfos.add(input.mergeObject(null, BuildingEffectInfo.getSchema()));
                    break;

                case 220:
                    if(message.statusInfos == null)
                        message.statusInfos = new ArrayList<BuildingStatusInfo>();
                    message.statusInfos.add(input.mergeObject(null, BuildingStatusInfo.getSchema()));
                    break;

                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, BaseManorInfo message) throws IOException
    {
        if(message.pos != null)
            output.writeUInt64(20, message.pos, false);

        if(message.scale != null)
            output.writeUInt32(30, message.scale, false);

        if(message.curPop != null)
            output.writeInt32(80, message.curPop, false);

        if(message.totPop != null)
            output.writeInt32(90, message.totPop, false);

        if(message.flag != null)
            output.writeUInt64(100, message.flag, false);

        if(message.update != null)
            output.writeUInt32(110, message.update, false);

        if(message.name != null)
            output.writeString(120, message.name, false);

        if(message.troopInfo != null)
             output.writeObject(140, message.troopInfo, TroopInfo.getSchema(), false);


        if(message.buildingInfos != null)
        {
            for(BuildingInfo buildingInfos : message.buildingInfos)
            {
                if(buildingInfos != null)
                    output.writeObject(200, buildingInfos, BuildingInfo.getSchema(), true);
            }
        }


        if(message.effectInfos != null)
        {
            for(BuildingEffectInfo effectInfos : message.effectInfos)
            {
                if(effectInfos != null)
                    output.writeObject(210, effectInfos, BuildingEffectInfo.getSchema(), true);
            }
        }


        if(message.statusInfos != null)
        {
            for(BuildingStatusInfo statusInfos : message.statusInfos)
            {
                if(statusInfos != null)
                    output.writeObject(220, statusInfos, BuildingStatusInfo.getSchema(), true);
            }
        }

    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
