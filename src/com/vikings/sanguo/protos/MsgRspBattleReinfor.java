// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from client.proto

package com.vikings.sanguo.protos;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class MsgRspBattleReinfor implements Externalizable, Message<MsgRspBattleReinfor>, Schema<MsgRspBattleReinfor>
{

    public static Schema<MsgRspBattleReinfor> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static MsgRspBattleReinfor getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final MsgRspBattleReinfor DEFAULT_INSTANCE = new MsgRspBattleReinfor();

    
    private ReturnInfo ri;
    private ManorInfo mi;
    private List<HeroInfo> heroInfos;
    private BriefFiefInfo fiefInfo;
    private BriefBattleInfo battleInfo;

    public MsgRspBattleReinfor()
    {
        
    }

    // getters and setters

    // ri

    public boolean hasRi(){
        return ri != null;
    }


    public ReturnInfo getRi()
    {
        return ri == null ? new ReturnInfo() : ri;
    }

    public MsgRspBattleReinfor setRi(ReturnInfo ri)
    {
        this.ri = ri;
        return this;
    }

    // mi

    public boolean hasMi(){
        return mi != null;
    }


    public ManorInfo getMi()
    {
        return mi == null ? new ManorInfo() : mi;
    }

    public MsgRspBattleReinfor setMi(ManorInfo mi)
    {
        this.mi = mi;
        return this;
    }

    // heroInfos

    public boolean hasHeroInfos(){
        return heroInfos != null;
    }


    public List<HeroInfo> getHeroInfosList()
    {
        return heroInfos == null?  new ArrayList<HeroInfo>():heroInfos;
    }

    public int getHeroInfosCount()
    {
        return heroInfos == null?0:heroInfos.size();
    }

    public HeroInfo getHeroInfos(int i)
    {
        return heroInfos == null?null:heroInfos.get(i);
    }


    public MsgRspBattleReinfor setHeroInfosList(List<HeroInfo> heroInfos)
    {
        this.heroInfos = heroInfos;
        return this;    
    }

    // fiefInfo

    public boolean hasFiefInfo(){
        return fiefInfo != null;
    }


    public BriefFiefInfo getFiefInfo()
    {
        return fiefInfo == null ? new BriefFiefInfo() : fiefInfo;
    }

    public MsgRspBattleReinfor setFiefInfo(BriefFiefInfo fiefInfo)
    {
        this.fiefInfo = fiefInfo;
        return this;
    }

    // battleInfo

    public boolean hasBattleInfo(){
        return battleInfo != null;
    }


    public BriefBattleInfo getBattleInfo()
    {
        return battleInfo == null ? new BriefBattleInfo() : battleInfo;
    }

    public MsgRspBattleReinfor setBattleInfo(BriefBattleInfo battleInfo)
    {
        this.battleInfo = battleInfo;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<MsgRspBattleReinfor> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public MsgRspBattleReinfor newMessage()
    {
        return new MsgRspBattleReinfor();
    }

    public Class<MsgRspBattleReinfor> typeClass()
    {
        return MsgRspBattleReinfor.class;
    }

    public String messageName()
    {
        return MsgRspBattleReinfor.class.getSimpleName();
    }

    public String messageFullName()
    {
        return MsgRspBattleReinfor.class.getName();
    }

    public boolean isInitialized(MsgRspBattleReinfor message)
    {
        return true;
    }

    public void mergeFrom(Input input, MsgRspBattleReinfor message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 10:
                    message.ri = input.mergeObject(message.ri, ReturnInfo.getSchema());
                    break;

                case 20:
                    message.mi = input.mergeObject(message.mi, ManorInfo.getSchema());
                    break;

                case 40:
                    if(message.heroInfos == null)
                        message.heroInfos = new ArrayList<HeroInfo>();
                    message.heroInfos.add(input.mergeObject(null, HeroInfo.getSchema()));
                    break;

                case 50:
                    message.fiefInfo = input.mergeObject(message.fiefInfo, BriefFiefInfo.getSchema());
                    break;

                case 60:
                    message.battleInfo = input.mergeObject(message.battleInfo, BriefBattleInfo.getSchema());
                    break;

                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, MsgRspBattleReinfor message) throws IOException
    {
        if(message.ri != null)
             output.writeObject(10, message.ri, ReturnInfo.getSchema(), false);


        if(message.mi != null)
             output.writeObject(20, message.mi, ManorInfo.getSchema(), false);


        if(message.heroInfos != null)
        {
            for(HeroInfo heroInfos : message.heroInfos)
            {
                if(heroInfos != null)
                    output.writeObject(40, heroInfos, HeroInfo.getSchema(), true);
            }
        }


        if(message.fiefInfo != null)
             output.writeObject(50, message.fiefInfo, BriefFiefInfo.getSchema(), false);


        if(message.battleInfo != null)
             output.writeObject(60, message.battleInfo, BriefBattleInfo.getSchema(), false);

    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
