// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from common.proto

package com.vikings.sanguo.protos;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public final class RichUserInfo implements Externalizable, Message<RichUserInfo>, Schema<RichUserInfo>
{

    public static Schema<RichUserInfo> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static RichUserInfo getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final RichUserInfo DEFAULT_INSTANCE = new RichUserInfo();

    
    private DataCtrl ctrl;
    private Integer userid;
    private ExAccountInfo accountInfo;
    private ExRoleInfo roleInfo;
    private FriendInfos friendInfos;
    private BlacklistInfos blacklistInfos;
    private BagItemInfos bagItemInfos;
    private EquipmentInfos equipmentInfos;
    private ExManorInfo manorInfo;
    private QuestInfos questInfos;
    private ArmPropInfos armPropInfos;
    private ExLordInfo lordInfo;
    private LordFiefInfos lordFiefInfos;
    private BattleIdInfos battleidInfos;
    private ExUserGuildInfo guildInfo;
    private HeroInfos heroInfos;
    private ActInfos actInfos;
    private ActInfos dynamicActInfos;

    public RichUserInfo()
    {
        
    }

    public RichUserInfo(
        Integer userid
    )
    {
        this.userid = userid;
    }

    // getters and setters

    // ctrl

    public boolean hasCtrl(){
        return ctrl != null;
    }


    public DataCtrl getCtrl()
    {
        return ctrl == null ? new DataCtrl() : ctrl;
    }

    public RichUserInfo setCtrl(DataCtrl ctrl)
    {
        this.ctrl = ctrl;
        return this;
    }

    // userid

    public boolean hasUserid(){
        return userid != null;
    }


    public Integer getUserid()
    {
        return userid == null ? 0 : userid;
    }

    public RichUserInfo setUserid(Integer userid)
    {
        this.userid = userid;
        return this;
    }

    // accountInfo

    public boolean hasAccountInfo(){
        return accountInfo != null;
    }


    public ExAccountInfo getAccountInfo()
    {
        return accountInfo == null ? new ExAccountInfo() : accountInfo;
    }

    public RichUserInfo setAccountInfo(ExAccountInfo accountInfo)
    {
        this.accountInfo = accountInfo;
        return this;
    }

    // roleInfo

    public boolean hasRoleInfo(){
        return roleInfo != null;
    }


    public ExRoleInfo getRoleInfo()
    {
        return roleInfo == null ? new ExRoleInfo() : roleInfo;
    }

    public RichUserInfo setRoleInfo(ExRoleInfo roleInfo)
    {
        this.roleInfo = roleInfo;
        return this;
    }

    // friendInfos

    public boolean hasFriendInfos(){
        return friendInfos != null;
    }


    public FriendInfos getFriendInfos()
    {
        return friendInfos == null ? new FriendInfos() : friendInfos;
    }

    public RichUserInfo setFriendInfos(FriendInfos friendInfos)
    {
        this.friendInfos = friendInfos;
        return this;
    }

    // blacklistInfos

    public boolean hasBlacklistInfos(){
        return blacklistInfos != null;
    }


    public BlacklistInfos getBlacklistInfos()
    {
        return blacklistInfos == null ? new BlacklistInfos() : blacklistInfos;
    }

    public RichUserInfo setBlacklistInfos(BlacklistInfos blacklistInfos)
    {
        this.blacklistInfos = blacklistInfos;
        return this;
    }

    // bagItemInfos

    public boolean hasBagItemInfos(){
        return bagItemInfos != null;
    }


    public BagItemInfos getBagItemInfos()
    {
        return bagItemInfos == null ? new BagItemInfos() : bagItemInfos;
    }

    public RichUserInfo setBagItemInfos(BagItemInfos bagItemInfos)
    {
        this.bagItemInfos = bagItemInfos;
        return this;
    }

    // equipmentInfos

    public boolean hasEquipmentInfos(){
        return equipmentInfos != null;
    }


    public EquipmentInfos getEquipmentInfos()
    {
        return equipmentInfos == null ? new EquipmentInfos() : equipmentInfos;
    }

    public RichUserInfo setEquipmentInfos(EquipmentInfos equipmentInfos)
    {
        this.equipmentInfos = equipmentInfos;
        return this;
    }

    // manorInfo

    public boolean hasManorInfo(){
        return manorInfo != null;
    }


    public ExManorInfo getManorInfo()
    {
        return manorInfo == null ? new ExManorInfo() : manorInfo;
    }

    public RichUserInfo setManorInfo(ExManorInfo manorInfo)
    {
        this.manorInfo = manorInfo;
        return this;
    }

    // questInfos

    public boolean hasQuestInfos(){
        return questInfos != null;
    }


    public QuestInfos getQuestInfos()
    {
        return questInfos == null ? new QuestInfos() : questInfos;
    }

    public RichUserInfo setQuestInfos(QuestInfos questInfos)
    {
        this.questInfos = questInfos;
        return this;
    }

    // armPropInfos

    public boolean hasArmPropInfos(){
        return armPropInfos != null;
    }


    public ArmPropInfos getArmPropInfos()
    {
        return armPropInfos == null ? new ArmPropInfos() : armPropInfos;
    }

    public RichUserInfo setArmPropInfos(ArmPropInfos armPropInfos)
    {
        this.armPropInfos = armPropInfos;
        return this;
    }

    // lordInfo

    public boolean hasLordInfo(){
        return lordInfo != null;
    }


    public ExLordInfo getLordInfo()
    {
        return lordInfo == null ? new ExLordInfo() : lordInfo;
    }

    public RichUserInfo setLordInfo(ExLordInfo lordInfo)
    {
        this.lordInfo = lordInfo;
        return this;
    }

    // lordFiefInfos

    public boolean hasLordFiefInfos(){
        return lordFiefInfos != null;
    }


    public LordFiefInfos getLordFiefInfos()
    {
        return lordFiefInfos == null ? new LordFiefInfos() : lordFiefInfos;
    }

    public RichUserInfo setLordFiefInfos(LordFiefInfos lordFiefInfos)
    {
        this.lordFiefInfos = lordFiefInfos;
        return this;
    }

    // battleidInfos

    public boolean hasBattleidInfos(){
        return battleidInfos != null;
    }


    public BattleIdInfos getBattleidInfos()
    {
        return battleidInfos == null ? new BattleIdInfos() : battleidInfos;
    }

    public RichUserInfo setBattleidInfos(BattleIdInfos battleidInfos)
    {
        this.battleidInfos = battleidInfos;
        return this;
    }

    // guildInfo

    public boolean hasGuildInfo(){
        return guildInfo != null;
    }


    public ExUserGuildInfo getGuildInfo()
    {
        return guildInfo == null ? new ExUserGuildInfo() : guildInfo;
    }

    public RichUserInfo setGuildInfo(ExUserGuildInfo guildInfo)
    {
        this.guildInfo = guildInfo;
        return this;
    }

    // heroInfos

    public boolean hasHeroInfos(){
        return heroInfos != null;
    }


    public HeroInfos getHeroInfos()
    {
        return heroInfos == null ? new HeroInfos() : heroInfos;
    }

    public RichUserInfo setHeroInfos(HeroInfos heroInfos)
    {
        this.heroInfos = heroInfos;
        return this;
    }

    // actInfos

    public boolean hasActInfos(){
        return actInfos != null;
    }


    public ActInfos getActInfos()
    {
        return actInfos == null ? new ActInfos() : actInfos;
    }

    public RichUserInfo setActInfos(ActInfos actInfos)
    {
        this.actInfos = actInfos;
        return this;
    }

    // dynamicActInfos

    public boolean hasDynamicActInfos(){
        return dynamicActInfos != null;
    }


    public ActInfos getDynamicActInfos()
    {
        return dynamicActInfos == null ? new ActInfos() : dynamicActInfos;
    }

    public RichUserInfo setDynamicActInfos(ActInfos dynamicActInfos)
    {
        this.dynamicActInfos = dynamicActInfos;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<RichUserInfo> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public RichUserInfo newMessage()
    {
        return new RichUserInfo();
    }

    public Class<RichUserInfo> typeClass()
    {
        return RichUserInfo.class;
    }

    public String messageName()
    {
        return RichUserInfo.class.getSimpleName();
    }

    public String messageFullName()
    {
        return RichUserInfo.class.getName();
    }

    public boolean isInitialized(RichUserInfo message)
    {
        return 
            message.userid != null;
    }

    public void mergeFrom(Input input, RichUserInfo message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 10:
                    message.ctrl = input.mergeObject(message.ctrl, DataCtrl.getSchema());
                    break;

                case 20:
                    message.userid = input.readUInt32();
                    break;
                case 30:
                    message.accountInfo = input.mergeObject(message.accountInfo, ExAccountInfo.getSchema());
                    break;

                case 40:
                    message.roleInfo = input.mergeObject(message.roleInfo, ExRoleInfo.getSchema());
                    break;

                case 50:
                    message.friendInfos = input.mergeObject(message.friendInfos, FriendInfos.getSchema());
                    break;

                case 60:
                    message.blacklistInfos = input.mergeObject(message.blacklistInfos, BlacklistInfos.getSchema());
                    break;

                case 70:
                    message.bagItemInfos = input.mergeObject(message.bagItemInfos, BagItemInfos.getSchema());
                    break;

                case 80:
                    message.equipmentInfos = input.mergeObject(message.equipmentInfos, EquipmentInfos.getSchema());
                    break;

                case 90:
                    message.manorInfo = input.mergeObject(message.manorInfo, ExManorInfo.getSchema());
                    break;

                case 130:
                    message.questInfos = input.mergeObject(message.questInfos, QuestInfos.getSchema());
                    break;

                case 140:
                    message.armPropInfos = input.mergeObject(message.armPropInfos, ArmPropInfos.getSchema());
                    break;

                case 160:
                    message.lordInfo = input.mergeObject(message.lordInfo, ExLordInfo.getSchema());
                    break;

                case 170:
                    message.lordFiefInfos = input.mergeObject(message.lordFiefInfos, LordFiefInfos.getSchema());
                    break;

                case 180:
                    message.battleidInfos = input.mergeObject(message.battleidInfos, BattleIdInfos.getSchema());
                    break;

                case 190:
                    message.guildInfo = input.mergeObject(message.guildInfo, ExUserGuildInfo.getSchema());
                    break;

                case 200:
                    message.heroInfos = input.mergeObject(message.heroInfos, HeroInfos.getSchema());
                    break;

                case 210:
                    message.actInfos = input.mergeObject(message.actInfos, ActInfos.getSchema());
                    break;

                case 220:
                    message.dynamicActInfos = input.mergeObject(message.dynamicActInfos, ActInfos.getSchema());
                    break;

                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, RichUserInfo message) throws IOException
    {
        if(message.ctrl != null)
             output.writeObject(10, message.ctrl, DataCtrl.getSchema(), false);


        if(message.userid == null)
            throw new UninitializedMessageException(message);
        output.writeUInt32(20, message.userid, false);

        if(message.accountInfo != null)
             output.writeObject(30, message.accountInfo, ExAccountInfo.getSchema(), false);


        if(message.roleInfo != null)
             output.writeObject(40, message.roleInfo, ExRoleInfo.getSchema(), false);


        if(message.friendInfos != null)
             output.writeObject(50, message.friendInfos, FriendInfos.getSchema(), false);


        if(message.blacklistInfos != null)
             output.writeObject(60, message.blacklistInfos, BlacklistInfos.getSchema(), false);


        if(message.bagItemInfos != null)
             output.writeObject(70, message.bagItemInfos, BagItemInfos.getSchema(), false);


        if(message.equipmentInfos != null)
             output.writeObject(80, message.equipmentInfos, EquipmentInfos.getSchema(), false);


        if(message.manorInfo != null)
             output.writeObject(90, message.manorInfo, ExManorInfo.getSchema(), false);


        if(message.questInfos != null)
             output.writeObject(130, message.questInfos, QuestInfos.getSchema(), false);


        if(message.armPropInfos != null)
             output.writeObject(140, message.armPropInfos, ArmPropInfos.getSchema(), false);


        if(message.lordInfo != null)
             output.writeObject(160, message.lordInfo, ExLordInfo.getSchema(), false);


        if(message.lordFiefInfos != null)
             output.writeObject(170, message.lordFiefInfos, LordFiefInfos.getSchema(), false);


        if(message.battleidInfos != null)
             output.writeObject(180, message.battleidInfos, BattleIdInfos.getSchema(), false);


        if(message.guildInfo != null)
             output.writeObject(190, message.guildInfo, ExUserGuildInfo.getSchema(), false);


        if(message.heroInfos != null)
             output.writeObject(200, message.heroInfos, HeroInfos.getSchema(), false);


        if(message.actInfos != null)
             output.writeObject(210, message.actInfos, ActInfos.getSchema(), false);


        if(message.dynamicActInfos != null)
             output.writeObject(220, message.dynamicActInfos, ActInfos.getSchema(), false);

    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
