// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from common.proto

package com.vikings.sanguo.protos;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class BattleArrayInfo implements Externalizable, Message<BattleArrayInfo>, Schema<BattleArrayInfo>
{

    public static Schema<BattleArrayInfo> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static BattleArrayInfo getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final BattleArrayInfo DEFAULT_INSTANCE = new BattleArrayInfo();

    
    private Integer propid;
    private Integer morale;
    private Integer num;
    private Integer row;

    public BattleArrayInfo()
    {
        
    }

    // getters and setters

    // propid

    public boolean hasPropid(){
        return propid != null;
    }


    public Integer getPropid()
    {
        return propid == null ? 0 : propid;
    }

    public BattleArrayInfo setPropid(Integer propid)
    {
        this.propid = propid;
        return this;
    }

    // morale

    public boolean hasMorale(){
        return morale != null;
    }


    public Integer getMorale()
    {
        return morale == null ? 0 : morale;
    }

    public BattleArrayInfo setMorale(Integer morale)
    {
        this.morale = morale;
        return this;
    }

    // num

    public boolean hasNum(){
        return num != null;
    }


    public Integer getNum()
    {
        return num == null ? 0 : num;
    }

    public BattleArrayInfo setNum(Integer num)
    {
        this.num = num;
        return this;
    }

    // row

    public boolean hasRow(){
        return row != null;
    }


    public Integer getRow()
    {
        return row == null ? 0 : row;
    }

    public BattleArrayInfo setRow(Integer row)
    {
        this.row = row;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<BattleArrayInfo> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public BattleArrayInfo newMessage()
    {
        return new BattleArrayInfo();
    }

    public Class<BattleArrayInfo> typeClass()
    {
        return BattleArrayInfo.class;
    }

    public String messageName()
    {
        return BattleArrayInfo.class.getSimpleName();
    }

    public String messageFullName()
    {
        return BattleArrayInfo.class.getName();
    }

    public boolean isInitialized(BattleArrayInfo message)
    {
        return true;
    }

    public void mergeFrom(Input input, BattleArrayInfo message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 10:
                    message.propid = input.readUInt32();
                    break;
                case 20:
                    message.morale = input.readUInt32();
                    break;
                case 30:
                    message.num = input.readUInt32();
                    break;
                case 40:
                    message.row = input.readUInt32();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, BattleArrayInfo message) throws IOException
    {
        if(message.propid != null)
            output.writeUInt32(10, message.propid, false);

        if(message.morale != null)
            output.writeUInt32(20, message.morale, false);

        if(message.num != null)
            output.writeUInt32(30, message.num, false);

        if(message.row != null)
            output.writeUInt32(40, message.row, false);
    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
