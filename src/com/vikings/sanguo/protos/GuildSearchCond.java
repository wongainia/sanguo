// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from common.proto

package com.vikings.sanguo.protos;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class GuildSearchCond implements Externalizable, Message<GuildSearchCond>, Schema<GuildSearchCond>
{

    public static Schema<GuildSearchCond> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static GuildSearchCond getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final GuildSearchCond DEFAULT_INSTANCE = new GuildSearchCond();

    
    private Integer field;
    private String strValue;
    private Integer intValue;

    public GuildSearchCond()
    {
        
    }

    // getters and setters

    // field

    public boolean hasField(){
        return field != null;
    }


    public Integer getField()
    {
        return field == null ? 0 : field;
    }

    public GuildSearchCond setField(Integer field)
    {
        this.field = field;
        return this;
    }

    // strValue

    public boolean hasStrValue(){
        return strValue != null;
    }


    public String getStrValue()
    {
        return strValue == null ? "" : strValue;
    }

    public GuildSearchCond setStrValue(String strValue)
    {
        this.strValue = strValue;
        return this;
    }

    // intValue

    public boolean hasIntValue(){
        return intValue != null;
    }


    public Integer getIntValue()
    {
        return intValue == null ? 0 : intValue;
    }

    public GuildSearchCond setIntValue(Integer intValue)
    {
        this.intValue = intValue;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<GuildSearchCond> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public GuildSearchCond newMessage()
    {
        return new GuildSearchCond();
    }

    public Class<GuildSearchCond> typeClass()
    {
        return GuildSearchCond.class;
    }

    public String messageName()
    {
        return GuildSearchCond.class.getSimpleName();
    }

    public String messageFullName()
    {
        return GuildSearchCond.class.getName();
    }

    public boolean isInitialized(GuildSearchCond message)
    {
        return true;
    }

    public void mergeFrom(Input input, GuildSearchCond message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 10:
                    message.field = input.readUInt32();
                    break;
                case 20:
                    message.strValue = input.readString();
                    break;
                case 30:
                    message.intValue = input.readUInt32();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, GuildSearchCond message) throws IOException
    {
        if(message.field != null)
            output.writeUInt32(10, message.field, false);

        if(message.strValue != null)
            output.writeString(20, message.strValue, false);

        if(message.intValue != null)
            output.writeUInt32(30, message.intValue, false);
    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
