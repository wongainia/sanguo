// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from common.proto

package com.vikings.sanguo.protos;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class ExUserTroopEffectInfo implements Externalizable, Message<ExUserTroopEffectInfo>, Schema<ExUserTroopEffectInfo>
{

    public static Schema<ExUserTroopEffectInfo> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static ExUserTroopEffectInfo getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final ExUserTroopEffectInfo DEFAULT_INSTANCE = new ExUserTroopEffectInfo();

    
    private DataCtrl ctrl;
    private UserTroopEffectInfo info;

    public ExUserTroopEffectInfo()
    {
        
    }

    // getters and setters

    // ctrl

    public boolean hasCtrl(){
        return ctrl != null;
    }


    public DataCtrl getCtrl()
    {
        return ctrl == null ? new DataCtrl() : ctrl;
    }

    public ExUserTroopEffectInfo setCtrl(DataCtrl ctrl)
    {
        this.ctrl = ctrl;
        return this;
    }

    // info

    public boolean hasInfo(){
        return info != null;
    }


    public UserTroopEffectInfo getInfo()
    {
        return info == null ? new UserTroopEffectInfo() : info;
    }

    public ExUserTroopEffectInfo setInfo(UserTroopEffectInfo info)
    {
        this.info = info;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<ExUserTroopEffectInfo> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public ExUserTroopEffectInfo newMessage()
    {
        return new ExUserTroopEffectInfo();
    }

    public Class<ExUserTroopEffectInfo> typeClass()
    {
        return ExUserTroopEffectInfo.class;
    }

    public String messageName()
    {
        return ExUserTroopEffectInfo.class.getSimpleName();
    }

    public String messageFullName()
    {
        return ExUserTroopEffectInfo.class.getName();
    }

    public boolean isInitialized(ExUserTroopEffectInfo message)
    {
        return true;
    }

    public void mergeFrom(Input input, ExUserTroopEffectInfo message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 10:
                    message.ctrl = input.mergeObject(message.ctrl, DataCtrl.getSchema());
                    break;

                case 20:
                    message.info = input.mergeObject(message.info, UserTroopEffectInfo.getSchema());
                    break;

                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, ExUserTroopEffectInfo message) throws IOException
    {
        if(message.ctrl != null)
             output.writeObject(10, message.ctrl, DataCtrl.getSchema(), false);


        if(message.info != null)
             output.writeObject(20, message.info, UserTroopEffectInfo.getSchema(), false);

    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
