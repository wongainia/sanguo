// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from common.proto

package com.vikings.sanguo.protos;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class BattleLogHeroInfo implements Externalizable, Message<BattleLogHeroInfo>, Schema<BattleLogHeroInfo>
{

    public static Schema<BattleLogHeroInfo> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static BattleLogHeroInfo getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final BattleLogHeroInfo DEFAULT_INSTANCE = new BattleLogHeroInfo();

    
    private Long hero;
    private Integer userid;
    private Integer heroid;
    private Integer exp;
    private Integer level;
    private Integer type;
    private Integer role;
    private Integer talent;
    private Integer attack;
    private Integer defend;
    private HeroFavourInfo favourInfo;
    private List<OtherHeroArmPropInfo> armPropInfos;
    private List<HeroSkillSlotInfo> skillSlotInfos;
    private List<EquipmentSlotInfo> equipmentInfos;

    public BattleLogHeroInfo()
    {
        
    }

    // getters and setters

    // hero

    public boolean hasHero(){
        return hero != null;
    }


    public Long getHero()
    {
        return hero == null ? 0L : hero;
    }

    public BattleLogHeroInfo setHero(Long hero)
    {
        this.hero = hero;
        return this;
    }

    // userid

    public boolean hasUserid(){
        return userid != null;
    }


    public Integer getUserid()
    {
        return userid == null ? 0 : userid;
    }

    public BattleLogHeroInfo setUserid(Integer userid)
    {
        this.userid = userid;
        return this;
    }

    // heroid

    public boolean hasHeroid(){
        return heroid != null;
    }


    public Integer getHeroid()
    {
        return heroid == null ? 0 : heroid;
    }

    public BattleLogHeroInfo setHeroid(Integer heroid)
    {
        this.heroid = heroid;
        return this;
    }

    // exp

    public boolean hasExp(){
        return exp != null;
    }


    public Integer getExp()
    {
        return exp == null ? 0 : exp;
    }

    public BattleLogHeroInfo setExp(Integer exp)
    {
        this.exp = exp;
        return this;
    }

    // level

    public boolean hasLevel(){
        return level != null;
    }


    public Integer getLevel()
    {
        return level == null ? 0 : level;
    }

    public BattleLogHeroInfo setLevel(Integer level)
    {
        this.level = level;
        return this;
    }

    // type

    public boolean hasType(){
        return type != null;
    }


    public Integer getType()
    {
        return type == null ? 0 : type;
    }

    public BattleLogHeroInfo setType(Integer type)
    {
        this.type = type;
        return this;
    }

    // role

    public boolean hasRole(){
        return role != null;
    }


    public Integer getRole()
    {
        return role == null ? 0 : role;
    }

    public BattleLogHeroInfo setRole(Integer role)
    {
        this.role = role;
        return this;
    }

    // talent

    public boolean hasTalent(){
        return talent != null;
    }


    public Integer getTalent()
    {
        return talent == null ? 0 : talent;
    }

    public BattleLogHeroInfo setTalent(Integer talent)
    {
        this.talent = talent;
        return this;
    }

    // attack

    public boolean hasAttack(){
        return attack != null;
    }


    public Integer getAttack()
    {
        return attack == null ? 0 : attack;
    }

    public BattleLogHeroInfo setAttack(Integer attack)
    {
        this.attack = attack;
        return this;
    }

    // defend

    public boolean hasDefend(){
        return defend != null;
    }


    public Integer getDefend()
    {
        return defend == null ? 0 : defend;
    }

    public BattleLogHeroInfo setDefend(Integer defend)
    {
        this.defend = defend;
        return this;
    }

    // favourInfo

    public boolean hasFavourInfo(){
        return favourInfo != null;
    }


    public HeroFavourInfo getFavourInfo()
    {
        return favourInfo == null ? new HeroFavourInfo() : favourInfo;
    }

    public BattleLogHeroInfo setFavourInfo(HeroFavourInfo favourInfo)
    {
        this.favourInfo = favourInfo;
        return this;
    }

    // armPropInfos

    public boolean hasArmPropInfos(){
        return armPropInfos != null;
    }


    public List<OtherHeroArmPropInfo> getArmPropInfosList()
    {
        return armPropInfos == null?  new ArrayList<OtherHeroArmPropInfo>():armPropInfos;
    }

    public int getArmPropInfosCount()
    {
        return armPropInfos == null?0:armPropInfos.size();
    }

    public OtherHeroArmPropInfo getArmPropInfos(int i)
    {
        return armPropInfos == null?null:armPropInfos.get(i);
    }


    public BattleLogHeroInfo setArmPropInfosList(List<OtherHeroArmPropInfo> armPropInfos)
    {
        this.armPropInfos = armPropInfos;
        return this;    
    }

    // skillSlotInfos

    public boolean hasSkillSlotInfos(){
        return skillSlotInfos != null;
    }


    public List<HeroSkillSlotInfo> getSkillSlotInfosList()
    {
        return skillSlotInfos == null?  new ArrayList<HeroSkillSlotInfo>():skillSlotInfos;
    }

    public int getSkillSlotInfosCount()
    {
        return skillSlotInfos == null?0:skillSlotInfos.size();
    }

    public HeroSkillSlotInfo getSkillSlotInfos(int i)
    {
        return skillSlotInfos == null?null:skillSlotInfos.get(i);
    }


    public BattleLogHeroInfo setSkillSlotInfosList(List<HeroSkillSlotInfo> skillSlotInfos)
    {
        this.skillSlotInfos = skillSlotInfos;
        return this;    
    }

    // equipmentInfos

    public boolean hasEquipmentInfos(){
        return equipmentInfos != null;
    }


    public List<EquipmentSlotInfo> getEquipmentInfosList()
    {
        return equipmentInfos == null?  new ArrayList<EquipmentSlotInfo>():equipmentInfos;
    }

    public int getEquipmentInfosCount()
    {
        return equipmentInfos == null?0:equipmentInfos.size();
    }

    public EquipmentSlotInfo getEquipmentInfos(int i)
    {
        return equipmentInfos == null?null:equipmentInfos.get(i);
    }


    public BattleLogHeroInfo setEquipmentInfosList(List<EquipmentSlotInfo> equipmentInfos)
    {
        this.equipmentInfos = equipmentInfos;
        return this;    
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<BattleLogHeroInfo> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public BattleLogHeroInfo newMessage()
    {
        return new BattleLogHeroInfo();
    }

    public Class<BattleLogHeroInfo> typeClass()
    {
        return BattleLogHeroInfo.class;
    }

    public String messageName()
    {
        return BattleLogHeroInfo.class.getSimpleName();
    }

    public String messageFullName()
    {
        return BattleLogHeroInfo.class.getName();
    }

    public boolean isInitialized(BattleLogHeroInfo message)
    {
        return true;
    }

    public void mergeFrom(Input input, BattleLogHeroInfo message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 10:
                    message.hero = input.readUInt64();
                    break;
                case 20:
                    message.userid = input.readUInt32();
                    break;
                case 30:
                    message.heroid = input.readUInt32();
                    break;
                case 40:
                    message.exp = input.readUInt32();
                    break;
                case 50:
                    message.level = input.readUInt32();
                    break;
                case 60:
                    message.type = input.readUInt32();
                    break;
                case 70:
                    message.role = input.readUInt32();
                    break;
                case 80:
                    message.talent = input.readUInt32();
                    break;
                case 90:
                    message.attack = input.readUInt32();
                    break;
                case 100:
                    message.defend = input.readUInt32();
                    break;
                case 180:
                    message.favourInfo = input.mergeObject(message.favourInfo, HeroFavourInfo.getSchema());
                    break;

                case 200:
                    if(message.armPropInfos == null)
                        message.armPropInfos = new ArrayList<OtherHeroArmPropInfo>();
                    message.armPropInfos.add(input.mergeObject(null, OtherHeroArmPropInfo.getSchema()));
                    break;

                case 210:
                    if(message.skillSlotInfos == null)
                        message.skillSlotInfos = new ArrayList<HeroSkillSlotInfo>();
                    message.skillSlotInfos.add(input.mergeObject(null, HeroSkillSlotInfo.getSchema()));
                    break;

                case 220:
                    if(message.equipmentInfos == null)
                        message.equipmentInfos = new ArrayList<EquipmentSlotInfo>();
                    message.equipmentInfos.add(input.mergeObject(null, EquipmentSlotInfo.getSchema()));
                    break;

                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, BattleLogHeroInfo message) throws IOException
    {
        if(message.hero != null)
            output.writeUInt64(10, message.hero, false);

        if(message.userid != null)
            output.writeUInt32(20, message.userid, false);

        if(message.heroid != null)
            output.writeUInt32(30, message.heroid, false);

        if(message.exp != null)
            output.writeUInt32(40, message.exp, false);

        if(message.level != null)
            output.writeUInt32(50, message.level, false);

        if(message.type != null)
            output.writeUInt32(60, message.type, false);

        if(message.role != null)
            output.writeUInt32(70, message.role, false);

        if(message.talent != null)
            output.writeUInt32(80, message.talent, false);

        if(message.attack != null)
            output.writeUInt32(90, message.attack, false);

        if(message.defend != null)
            output.writeUInt32(100, message.defend, false);

        if(message.favourInfo != null)
             output.writeObject(180, message.favourInfo, HeroFavourInfo.getSchema(), false);


        if(message.armPropInfos != null)
        {
            for(OtherHeroArmPropInfo armPropInfos : message.armPropInfos)
            {
                if(armPropInfos != null)
                    output.writeObject(200, armPropInfos, OtherHeroArmPropInfo.getSchema(), true);
            }
        }


        if(message.skillSlotInfos != null)
        {
            for(HeroSkillSlotInfo skillSlotInfos : message.skillSlotInfos)
            {
                if(skillSlotInfos != null)
                    output.writeObject(210, skillSlotInfos, HeroSkillSlotInfo.getSchema(), true);
            }
        }


        if(message.equipmentInfos != null)
        {
            for(EquipmentSlotInfo equipmentInfos : message.equipmentInfos)
            {
                if(equipmentInfos != null)
                    output.writeObject(220, equipmentInfos, EquipmentSlotInfo.getSchema(), true);
            }
        }

    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
