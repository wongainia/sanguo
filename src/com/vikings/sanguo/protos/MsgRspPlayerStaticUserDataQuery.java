// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from client.proto

package com.vikings.sanguo.protos;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class MsgRspPlayerStaticUserDataQuery implements Externalizable, Message<MsgRspPlayerStaticUserDataQuery>, Schema<MsgRspPlayerStaticUserDataQuery>
{

    public static Schema<MsgRspPlayerStaticUserDataQuery> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static MsgRspPlayerStaticUserDataQuery getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final MsgRspPlayerStaticUserDataQuery DEFAULT_INSTANCE = new MsgRspPlayerStaticUserDataQuery();

    
    private StaticUserDataType dataType;
    private Integer total;
    private List<LogInfo> logInfos;

    public MsgRspPlayerStaticUserDataQuery()
    {
        
    }

    // getters and setters

    // dataType

    public boolean hasDataType(){
        return dataType != null;
    }


    public StaticUserDataType getDataType()
    {
        return dataType == null ? StaticUserDataType.STATIC_USER_DATA_TYPE_LOG : dataType;
    }

    public MsgRspPlayerStaticUserDataQuery setDataType(StaticUserDataType dataType)
    {
        this.dataType = dataType;
        return this;
    }

    // total

    public boolean hasTotal(){
        return total != null;
    }


    public Integer getTotal()
    {
        return total == null ? 0 : total;
    }

    public MsgRspPlayerStaticUserDataQuery setTotal(Integer total)
    {
        this.total = total;
        return this;
    }

    // logInfos

    public boolean hasLogInfos(){
        return logInfos != null;
    }


    public List<LogInfo> getLogInfosList()
    {
        return logInfos == null?  new ArrayList<LogInfo>():logInfos;
    }

    public int getLogInfosCount()
    {
        return logInfos == null?0:logInfos.size();
    }

    public LogInfo getLogInfos(int i)
    {
        return logInfos == null?null:logInfos.get(i);
    }


    public MsgRspPlayerStaticUserDataQuery setLogInfosList(List<LogInfo> logInfos)
    {
        this.logInfos = logInfos;
        return this;    
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<MsgRspPlayerStaticUserDataQuery> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public MsgRspPlayerStaticUserDataQuery newMessage()
    {
        return new MsgRspPlayerStaticUserDataQuery();
    }

    public Class<MsgRspPlayerStaticUserDataQuery> typeClass()
    {
        return MsgRspPlayerStaticUserDataQuery.class;
    }

    public String messageName()
    {
        return MsgRspPlayerStaticUserDataQuery.class.getSimpleName();
    }

    public String messageFullName()
    {
        return MsgRspPlayerStaticUserDataQuery.class.getName();
    }

    public boolean isInitialized(MsgRspPlayerStaticUserDataQuery message)
    {
        return true;
    }

    public void mergeFrom(Input input, MsgRspPlayerStaticUserDataQuery message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 10:
                    message.dataType = StaticUserDataType.valueOf(input.readEnum());
                    break;
                case 20:
                    message.total = input.readUInt32();
                    break;
                case 50:
                    if(message.logInfos == null)
                        message.logInfos = new ArrayList<LogInfo>();
                    message.logInfos.add(input.mergeObject(null, LogInfo.getSchema()));
                    break;

                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, MsgRspPlayerStaticUserDataQuery message) throws IOException
    {
        if(message.dataType != null)
             output.writeEnum(10, message.dataType.number, false);

        if(message.total != null)
            output.writeUInt32(20, message.total, false);

        if(message.logInfos != null)
        {
            for(LogInfo logInfos : message.logInfos)
            {
                if(logInfos != null)
                    output.writeObject(50, logInfos, LogInfo.getSchema(), true);
            }
        }

    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
