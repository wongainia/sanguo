// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from common.proto

package com.vikings.sanguo.protos;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class ReturnThingInfo implements Externalizable, Message<ReturnThingInfo>, Schema<ReturnThingInfo>
{

    public static Schema<ReturnThingInfo> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static ReturnThingInfo getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final ReturnThingInfo DEFAULT_INSTANCE = new ReturnThingInfo();

    
    private Integer type;
    private Long guid;
    private Integer thingid;
    private Integer count;
    private Integer param0;
    private Integer param1;

    public ReturnThingInfo()
    {
        
    }

    // getters and setters

    // type

    public boolean hasType(){
        return type != null;
    }


    public Integer getType()
    {
        return type == null ? 0 : type;
    }

    public ReturnThingInfo setType(Integer type)
    {
        this.type = type;
        return this;
    }

    // guid

    public boolean hasGuid(){
        return guid != null;
    }


    public Long getGuid()
    {
        return guid == null ? 0L : guid;
    }

    public ReturnThingInfo setGuid(Long guid)
    {
        this.guid = guid;
        return this;
    }

    // thingid

    public boolean hasThingid(){
        return thingid != null;
    }


    public Integer getThingid()
    {
        return thingid == null ? 0 : thingid;
    }

    public ReturnThingInfo setThingid(Integer thingid)
    {
        this.thingid = thingid;
        return this;
    }

    // count

    public boolean hasCount(){
        return count != null;
    }


    public Integer getCount()
    {
        return count == null ? 0 : count;
    }

    public ReturnThingInfo setCount(Integer count)
    {
        this.count = count;
        return this;
    }

    // param0

    public boolean hasParam0(){
        return param0 != null;
    }


    public Integer getParam0()
    {
        return param0 == null ? 0 : param0;
    }

    public ReturnThingInfo setParam0(Integer param0)
    {
        this.param0 = param0;
        return this;
    }

    // param1

    public boolean hasParam1(){
        return param1 != null;
    }


    public Integer getParam1()
    {
        return param1 == null ? 0 : param1;
    }

    public ReturnThingInfo setParam1(Integer param1)
    {
        this.param1 = param1;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<ReturnThingInfo> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public ReturnThingInfo newMessage()
    {
        return new ReturnThingInfo();
    }

    public Class<ReturnThingInfo> typeClass()
    {
        return ReturnThingInfo.class;
    }

    public String messageName()
    {
        return ReturnThingInfo.class.getSimpleName();
    }

    public String messageFullName()
    {
        return ReturnThingInfo.class.getName();
    }

    public boolean isInitialized(ReturnThingInfo message)
    {
        return true;
    }

    public void mergeFrom(Input input, ReturnThingInfo message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 10:
                    message.type = input.readUInt32();
                    break;
                case 20:
                    message.guid = input.readUInt64();
                    break;
                case 30:
                    message.thingid = input.readUInt32();
                    break;
                case 40:
                    message.count = input.readInt32();
                    break;
                case 50:
                    message.param0 = input.readUInt32();
                    break;
                case 60:
                    message.param1 = input.readUInt32();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, ReturnThingInfo message) throws IOException
    {
        if(message.type != null)
            output.writeUInt32(10, message.type, false);

        if(message.guid != null)
            output.writeUInt64(20, message.guid, false);

        if(message.thingid != null)
            output.writeUInt32(30, message.thingid, false);

        if(message.count != null)
            output.writeInt32(40, message.count, false);

        if(message.param0 != null)
            output.writeUInt32(50, message.param0, false);

        if(message.param1 != null)
            output.writeUInt32(60, message.param1, false);
    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
