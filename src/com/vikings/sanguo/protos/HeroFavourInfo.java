// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from common.proto

package com.vikings.sanguo.protos;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class HeroFavourInfo implements Externalizable, Message<HeroFavourInfo>, Schema<HeroFavourInfo>
{

    public static Schema<HeroFavourInfo> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static HeroFavourInfo getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final HeroFavourInfo DEFAULT_INSTANCE = new HeroFavourInfo();

    
    private Integer level;
    private Integer exp;
    private Integer expUpdateTime;
    private List<Integer> usedSlots;
    private List<Integer> usedExps;

    public HeroFavourInfo()
    {
        
    }

    // getters and setters

    // level

    public boolean hasLevel(){
        return level != null;
    }


    public Integer getLevel()
    {
        return level == null ? 0 : level;
    }

    public HeroFavourInfo setLevel(Integer level)
    {
        this.level = level;
        return this;
    }

    // exp

    public boolean hasExp(){
        return exp != null;
    }


    public Integer getExp()
    {
        return exp == null ? 0 : exp;
    }

    public HeroFavourInfo setExp(Integer exp)
    {
        this.exp = exp;
        return this;
    }

    // expUpdateTime

    public boolean hasExpUpdateTime(){
        return expUpdateTime != null;
    }


    public Integer getExpUpdateTime()
    {
        return expUpdateTime == null ? 0 : expUpdateTime;
    }

    public HeroFavourInfo setExpUpdateTime(Integer expUpdateTime)
    {
        this.expUpdateTime = expUpdateTime;
        return this;
    }

    // usedSlots

    public boolean hasUsedSlots(){
        return usedSlots != null;
    }


    public List<Integer> getUsedSlotsList()
    {
        return usedSlots == null?  new ArrayList<Integer>():usedSlots;
    }

    public int getUsedSlotsCount()
    {
        return usedSlots == null?0:usedSlots.size();
    }

    public Integer getUsedSlots(int i)
    {
        return usedSlots == null?null:usedSlots.get(i);
    }


    public HeroFavourInfo setUsedSlotsList(List<Integer> usedSlots)
    {
        this.usedSlots = usedSlots;
        return this;    
    }

    // usedExps

    public boolean hasUsedExps(){
        return usedExps != null;
    }


    public List<Integer> getUsedExpsList()
    {
        return usedExps == null?  new ArrayList<Integer>():usedExps;
    }

    public int getUsedExpsCount()
    {
        return usedExps == null?0:usedExps.size();
    }

    public Integer getUsedExps(int i)
    {
        return usedExps == null?null:usedExps.get(i);
    }


    public HeroFavourInfo setUsedExpsList(List<Integer> usedExps)
    {
        this.usedExps = usedExps;
        return this;    
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<HeroFavourInfo> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public HeroFavourInfo newMessage()
    {
        return new HeroFavourInfo();
    }

    public Class<HeroFavourInfo> typeClass()
    {
        return HeroFavourInfo.class;
    }

    public String messageName()
    {
        return HeroFavourInfo.class.getSimpleName();
    }

    public String messageFullName()
    {
        return HeroFavourInfo.class.getName();
    }

    public boolean isInitialized(HeroFavourInfo message)
    {
        return true;
    }

    public void mergeFrom(Input input, HeroFavourInfo message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 10:
                    message.level = input.readUInt32();
                    break;
                case 30:
                    message.exp = input.readUInt32();
                    break;
                case 40:
                    message.expUpdateTime = input.readUInt32();
                    break;
                case 100:
                    if(message.usedSlots == null)
                        message.usedSlots = new ArrayList<Integer>();
                    message.usedSlots.add(input.readUInt32());
                    break;
                case 120:
                    if(message.usedExps == null)
                        message.usedExps = new ArrayList<Integer>();
                    message.usedExps.add(input.readUInt32());
                    break;
                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, HeroFavourInfo message) throws IOException
    {
        if(message.level != null)
            output.writeUInt32(10, message.level, false);

        if(message.exp != null)
            output.writeUInt32(30, message.exp, false);

        if(message.expUpdateTime != null)
            output.writeUInt32(40, message.expUpdateTime, false);

        if(message.usedSlots != null)
        {
            for(Integer usedSlots : message.usedSlots)
            {
                if(usedSlots != null)
                    output.writeUInt32(100, usedSlots, true);
            }
        }

        if(message.usedExps != null)
        {
            for(Integer usedExps : message.usedExps)
            {
                if(usedExps != null)
                    output.writeUInt32(120, usedExps, true);
            }
        }
    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
