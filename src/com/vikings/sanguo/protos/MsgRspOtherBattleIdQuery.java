// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from client.proto

package com.vikings.sanguo.protos;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class MsgRspOtherBattleIdQuery implements Externalizable, Message<MsgRspOtherBattleIdQuery>, Schema<MsgRspOtherBattleIdQuery>
{

    public static Schema<MsgRspOtherBattleIdQuery> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static MsgRspOtherBattleIdQuery getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final MsgRspOtherBattleIdQuery DEFAULT_INSTANCE = new MsgRspOtherBattleIdQuery();

    
    private List<Long> battleids;

    public MsgRspOtherBattleIdQuery()
    {
        
    }

    // getters and setters

    // battleids

    public boolean hasBattleids(){
        return battleids != null;
    }


    public List<Long> getBattleidsList()
    {
        return battleids == null?  new ArrayList<Long>():battleids;
    }

    public int getBattleidsCount()
    {
        return battleids == null?0:battleids.size();
    }

    public Long getBattleids(int i)
    {
        return battleids == null?null:battleids.get(i);
    }


    public MsgRspOtherBattleIdQuery setBattleidsList(List<Long> battleids)
    {
        this.battleids = battleids;
        return this;    
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<MsgRspOtherBattleIdQuery> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public MsgRspOtherBattleIdQuery newMessage()
    {
        return new MsgRspOtherBattleIdQuery();
    }

    public Class<MsgRspOtherBattleIdQuery> typeClass()
    {
        return MsgRspOtherBattleIdQuery.class;
    }

    public String messageName()
    {
        return MsgRspOtherBattleIdQuery.class.getSimpleName();
    }

    public String messageFullName()
    {
        return MsgRspOtherBattleIdQuery.class.getName();
    }

    public boolean isInitialized(MsgRspOtherBattleIdQuery message)
    {
        return true;
    }

    public void mergeFrom(Input input, MsgRspOtherBattleIdQuery message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 10:
                    if(message.battleids == null)
                        message.battleids = new ArrayList<Long>();
                    int count = input.readInt32();
                    int cur = ((com.dyuproject.protostuff.ByteArrayInput)input).currentOffset();
                    while(((com.dyuproject.protostuff.ByteArrayInput)input).currentOffset() - cur < count)
                    {
                        message.battleids.add(input.readUInt64());
                    }
                    break;
                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, MsgRspOtherBattleIdQuery message) throws IOException
    {
        if(message.battleids != null)
        {
            for(Long battleids : message.battleids)
            {
                if(battleids != null)
                    output.writeUInt64(10, battleids, true);
            }
        }
    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
