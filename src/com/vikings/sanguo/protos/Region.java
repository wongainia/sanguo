// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from common.proto

package com.vikings.sanguo.protos;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class Region implements Externalizable, Message<Region>, Schema<Region>
{

    public static Schema<Region> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static Region getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final Region DEFAULT_INSTANCE = new Region();

    
    private Integer left;
    private Integer right;
    private Integer bottom;
    private Integer top;

    public Region()
    {
        
    }

    // getters and setters

    // left

    public boolean hasLeft(){
        return left != null;
    }


    public Integer getLeft()
    {
        return left == null ? 0 : left;
    }

    public Region setLeft(Integer left)
    {
        this.left = left;
        return this;
    }

    // right

    public boolean hasRight(){
        return right != null;
    }


    public Integer getRight()
    {
        return right == null ? 0 : right;
    }

    public Region setRight(Integer right)
    {
        this.right = right;
        return this;
    }

    // bottom

    public boolean hasBottom(){
        return bottom != null;
    }


    public Integer getBottom()
    {
        return bottom == null ? 0 : bottom;
    }

    public Region setBottom(Integer bottom)
    {
        this.bottom = bottom;
        return this;
    }

    // top

    public boolean hasTop(){
        return top != null;
    }


    public Integer getTop()
    {
        return top == null ? 0 : top;
    }

    public Region setTop(Integer top)
    {
        this.top = top;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<Region> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public Region newMessage()
    {
        return new Region();
    }

    public Class<Region> typeClass()
    {
        return Region.class;
    }

    public String messageName()
    {
        return Region.class.getSimpleName();
    }

    public String messageFullName()
    {
        return Region.class.getName();
    }

    public boolean isInitialized(Region message)
    {
        return true;
    }

    public void mergeFrom(Input input, Region message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 10:
                    message.left = input.readUInt32();
                    break;
                case 20:
                    message.right = input.readUInt32();
                    break;
                case 30:
                    message.bottom = input.readUInt32();
                    break;
                case 40:
                    message.top = input.readUInt32();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, Region message) throws IOException
    {
        if(message.left != null)
            output.writeUInt32(10, message.left, false);

        if(message.right != null)
            output.writeUInt32(20, message.right, false);

        if(message.bottom != null)
            output.writeUInt32(30, message.bottom, false);

        if(message.top != null)
            output.writeUInt32(40, message.top, false);
    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
