// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from common.proto

package com.vikings.sanguo.protos;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class BloodRankInfo implements Externalizable, Message<BloodRankInfo>, Schema<BloodRankInfo>
{

    public static Schema<BloodRankInfo> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static BloodRankInfo getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final BloodRankInfo DEFAULT_INSTANCE = new BloodRankInfo();

    
    private Integer userid;
    private String nick;
    private Integer image;
    private Integer country;
    private Integer rank;
    private Integer guildid;
    private Integer rankData;
    private Integer reward;

    public BloodRankInfo()
    {
        
    }

    // getters and setters

    // userid

    public boolean hasUserid(){
        return userid != null;
    }


    public Integer getUserid()
    {
        return userid == null ? 0 : userid;
    }

    public BloodRankInfo setUserid(Integer userid)
    {
        this.userid = userid;
        return this;
    }

    // nick

    public boolean hasNick(){
        return nick != null;
    }


    public String getNick()
    {
        return nick == null ? "" : nick;
    }

    public BloodRankInfo setNick(String nick)
    {
        this.nick = nick;
        return this;
    }

    // image

    public boolean hasImage(){
        return image != null;
    }


    public Integer getImage()
    {
        return image == null ? 0 : image;
    }

    public BloodRankInfo setImage(Integer image)
    {
        this.image = image;
        return this;
    }

    // country

    public boolean hasCountry(){
        return country != null;
    }


    public Integer getCountry()
    {
        return country == null ? 0 : country;
    }

    public BloodRankInfo setCountry(Integer country)
    {
        this.country = country;
        return this;
    }

    // rank

    public boolean hasRank(){
        return rank != null;
    }


    public Integer getRank()
    {
        return rank == null ? 0 : rank;
    }

    public BloodRankInfo setRank(Integer rank)
    {
        this.rank = rank;
        return this;
    }

    // guildid

    public boolean hasGuildid(){
        return guildid != null;
    }


    public Integer getGuildid()
    {
        return guildid == null ? 0 : guildid;
    }

    public BloodRankInfo setGuildid(Integer guildid)
    {
        this.guildid = guildid;
        return this;
    }

    // rankData

    public boolean hasRankData(){
        return rankData != null;
    }


    public Integer getRankData()
    {
        return rankData == null ? 0 : rankData;
    }

    public BloodRankInfo setRankData(Integer rankData)
    {
        this.rankData = rankData;
        return this;
    }

    // reward

    public boolean hasReward(){
        return reward != null;
    }


    public Integer getReward()
    {
        return reward == null ? 0 : reward;
    }

    public BloodRankInfo setReward(Integer reward)
    {
        this.reward = reward;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<BloodRankInfo> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public BloodRankInfo newMessage()
    {
        return new BloodRankInfo();
    }

    public Class<BloodRankInfo> typeClass()
    {
        return BloodRankInfo.class;
    }

    public String messageName()
    {
        return BloodRankInfo.class.getSimpleName();
    }

    public String messageFullName()
    {
        return BloodRankInfo.class.getName();
    }

    public boolean isInitialized(BloodRankInfo message)
    {
        return true;
    }

    public void mergeFrom(Input input, BloodRankInfo message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 10:
                    message.userid = input.readUInt32();
                    break;
                case 20:
                    message.nick = input.readString();
                    break;
                case 30:
                    message.image = input.readUInt32();
                    break;
                case 40:
                    message.country = input.readUInt32();
                    break;
                case 50:
                    message.rank = input.readUInt32();
                    break;
                case 60:
                    message.guildid = input.readUInt32();
                    break;
                case 70:
                    message.rankData = input.readUInt32();
                    break;
                case 80:
                    message.reward = input.readUInt32();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, BloodRankInfo message) throws IOException
    {
        if(message.userid != null)
            output.writeUInt32(10, message.userid, false);

        if(message.nick != null)
            output.writeString(20, message.nick, false);

        if(message.image != null)
            output.writeUInt32(30, message.image, false);

        if(message.country != null)
            output.writeUInt32(40, message.country, false);

        if(message.rank != null)
            output.writeUInt32(50, message.rank, false);

        if(message.guildid != null)
            output.writeUInt32(60, message.guildid, false);

        if(message.rankData != null)
            output.writeUInt32(70, message.rankData, false);

        if(message.reward != null)
            output.writeUInt32(80, message.reward, false);
    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
