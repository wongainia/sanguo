// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from client.proto

package com.vikings.sanguo.protos;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class MsgReqPlayerWantedInfoQuery implements Externalizable, Message<MsgReqPlayerWantedInfoQuery>, Schema<MsgReqPlayerWantedInfoQuery>
{

    public static Schema<MsgReqPlayerWantedInfoQuery> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static MsgReqPlayerWantedInfoQuery getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final MsgReqPlayerWantedInfoQuery DEFAULT_INSTANCE = new MsgReqPlayerWantedInfoQuery();

    
    private Integer country;
    private Long id;
    private Integer count;

    public MsgReqPlayerWantedInfoQuery()
    {
        
    }

    // getters and setters

    // country

    public boolean hasCountry(){
        return country != null;
    }


    public Integer getCountry()
    {
        return country == null ? 0 : country;
    }

    public MsgReqPlayerWantedInfoQuery setCountry(Integer country)
    {
        this.country = country;
        return this;
    }

    // id

    public boolean hasId(){
        return id != null;
    }


    public Long getId()
    {
        return id == null ? 0L : id;
    }

    public MsgReqPlayerWantedInfoQuery setId(Long id)
    {
        this.id = id;
        return this;
    }

    // count

    public boolean hasCount(){
        return count != null;
    }


    public Integer getCount()
    {
        return count == null ? 0 : count;
    }

    public MsgReqPlayerWantedInfoQuery setCount(Integer count)
    {
        this.count = count;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<MsgReqPlayerWantedInfoQuery> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public MsgReqPlayerWantedInfoQuery newMessage()
    {
        return new MsgReqPlayerWantedInfoQuery();
    }

    public Class<MsgReqPlayerWantedInfoQuery> typeClass()
    {
        return MsgReqPlayerWantedInfoQuery.class;
    }

    public String messageName()
    {
        return MsgReqPlayerWantedInfoQuery.class.getSimpleName();
    }

    public String messageFullName()
    {
        return MsgReqPlayerWantedInfoQuery.class.getName();
    }

    public boolean isInitialized(MsgReqPlayerWantedInfoQuery message)
    {
        return true;
    }

    public void mergeFrom(Input input, MsgReqPlayerWantedInfoQuery message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 10:
                    message.country = input.readUInt32();
                    break;
                case 20:
                    message.id = input.readUInt64();
                    break;
                case 30:
                    message.count = input.readUInt32();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, MsgReqPlayerWantedInfoQuery message) throws IOException
    {
        if(message.country != null)
            output.writeUInt32(10, message.country, false);

        if(message.id != null)
            output.writeUInt64(20, message.id, false);

        if(message.count != null)
            output.writeUInt32(30, message.count, false);
    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
