// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from common.proto

package com.vikings.sanguo.protos;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class TrayNotifyInfo implements Externalizable, Message<TrayNotifyInfo>, Schema<TrayNotifyInfo>
{

    public static Schema<TrayNotifyInfo> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static TrayNotifyInfo getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final TrayNotifyInfo DEFAULT_INSTANCE = new TrayNotifyInfo();

    
    private Integer flag;
    private String message;
    private Integer userid;
    private Integer time;
    private BriefBattleInfo battleInfo;

    public TrayNotifyInfo()
    {
        
    }

    // getters and setters

    // flag

    public boolean hasFlag(){
        return flag != null;
    }


    public Integer getFlag()
    {
        return flag == null ? 0 : flag;
    }

    public TrayNotifyInfo setFlag(Integer flag)
    {
        this.flag = flag;
        return this;
    }

    // message

    public boolean hasMessage(){
        return message != null;
    }


    public String getMessage()
    {
        return message == null ? "" : message;
    }

    public TrayNotifyInfo setMessage(String message)
    {
        this.message = message;
        return this;
    }

    // userid

    public boolean hasUserid(){
        return userid != null;
    }


    public Integer getUserid()
    {
        return userid == null ? 0 : userid;
    }

    public TrayNotifyInfo setUserid(Integer userid)
    {
        this.userid = userid;
        return this;
    }

    // time

    public boolean hasTime(){
        return time != null;
    }


    public Integer getTime()
    {
        return time == null ? 0 : time;
    }

    public TrayNotifyInfo setTime(Integer time)
    {
        this.time = time;
        return this;
    }

    // battleInfo

    public boolean hasBattleInfo(){
        return battleInfo != null;
    }


    public BriefBattleInfo getBattleInfo()
    {
        return battleInfo == null ? new BriefBattleInfo() : battleInfo;
    }

    public TrayNotifyInfo setBattleInfo(BriefBattleInfo battleInfo)
    {
        this.battleInfo = battleInfo;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<TrayNotifyInfo> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public TrayNotifyInfo newMessage()
    {
        return new TrayNotifyInfo();
    }

    public Class<TrayNotifyInfo> typeClass()
    {
        return TrayNotifyInfo.class;
    }

    public String messageName()
    {
        return TrayNotifyInfo.class.getSimpleName();
    }

    public String messageFullName()
    {
        return TrayNotifyInfo.class.getName();
    }

    public boolean isInitialized(TrayNotifyInfo message)
    {
        return true;
    }

    public void mergeFrom(Input input, TrayNotifyInfo message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 10:
                    message.flag = input.readUInt32();
                    break;
                case 20:
                    message.message = input.readString();
                    break;
                case 40:
                    message.userid = input.readUInt32();
                    break;
                case 50:
                    message.time = input.readUInt32();
                    break;
                case 60:
                    message.battleInfo = input.mergeObject(message.battleInfo, BriefBattleInfo.getSchema());
                    break;

                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, TrayNotifyInfo message) throws IOException
    {
        if(message.flag != null)
            output.writeUInt32(10, message.flag, false);

        if(message.message != null)
            output.writeString(20, message.message, false);

        if(message.userid != null)
            output.writeUInt32(40, message.userid, false);

        if(message.time != null)
            output.writeUInt32(50, message.time, false);

        if(message.battleInfo != null)
             output.writeObject(60, message.battleInfo, BriefBattleInfo.getSchema(), false);

    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
