// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from client.proto

package com.vikings.sanguo.protos;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class MsgRspStaticUserDataQuery implements Externalizable, Message<MsgRspStaticUserDataQuery>, Schema<MsgRspStaticUserDataQuery>
{

    public static Schema<MsgRspStaticUserDataQuery> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static MsgRspStaticUserDataQuery getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final MsgRspStaticUserDataQuery DEFAULT_INSTANCE = new MsgRspStaticUserDataQuery();

    
    private StaticUserDataType dataType;
    private Integer total;
    private List<LogInfo> logInfos;
    private List<MessageInfo> messageInfos;
    private List<TrayNotifyInfo> trayInfos;
    private List<UserNotifyInfo> notifyInfos;
    private List<BriefBattleLogInfo> briefBattleLogs;
    private List<TroopLogInfo> troopLogs;
    private List<ArenaLogInfo> arenaLogs;

    public MsgRspStaticUserDataQuery()
    {
        
    }

    // getters and setters

    // dataType

    public boolean hasDataType(){
        return dataType != null;
    }


    public StaticUserDataType getDataType()
    {
        return dataType == null ? StaticUserDataType.STATIC_USER_DATA_TYPE_LOG : dataType;
    }

    public MsgRspStaticUserDataQuery setDataType(StaticUserDataType dataType)
    {
        this.dataType = dataType;
        return this;
    }

    // total

    public boolean hasTotal(){
        return total != null;
    }


    public Integer getTotal()
    {
        return total == null ? 0 : total;
    }

    public MsgRspStaticUserDataQuery setTotal(Integer total)
    {
        this.total = total;
        return this;
    }

    // logInfos

    public boolean hasLogInfos(){
        return logInfos != null;
    }


    public List<LogInfo> getLogInfosList()
    {
        return logInfos == null?  new ArrayList<LogInfo>():logInfos;
    }

    public int getLogInfosCount()
    {
        return logInfos == null?0:logInfos.size();
    }

    public LogInfo getLogInfos(int i)
    {
        return logInfos == null?null:logInfos.get(i);
    }


    public MsgRspStaticUserDataQuery setLogInfosList(List<LogInfo> logInfos)
    {
        this.logInfos = logInfos;
        return this;    
    }

    // messageInfos

    public boolean hasMessageInfos(){
        return messageInfos != null;
    }


    public List<MessageInfo> getMessageInfosList()
    {
        return messageInfos == null?  new ArrayList<MessageInfo>():messageInfos;
    }

    public int getMessageInfosCount()
    {
        return messageInfos == null?0:messageInfos.size();
    }

    public MessageInfo getMessageInfos(int i)
    {
        return messageInfos == null?null:messageInfos.get(i);
    }


    public MsgRspStaticUserDataQuery setMessageInfosList(List<MessageInfo> messageInfos)
    {
        this.messageInfos = messageInfos;
        return this;    
    }

    // trayInfos

    public boolean hasTrayInfos(){
        return trayInfos != null;
    }


    public List<TrayNotifyInfo> getTrayInfosList()
    {
        return trayInfos == null?  new ArrayList<TrayNotifyInfo>():trayInfos;
    }

    public int getTrayInfosCount()
    {
        return trayInfos == null?0:trayInfos.size();
    }

    public TrayNotifyInfo getTrayInfos(int i)
    {
        return trayInfos == null?null:trayInfos.get(i);
    }


    public MsgRspStaticUserDataQuery setTrayInfosList(List<TrayNotifyInfo> trayInfos)
    {
        this.trayInfos = trayInfos;
        return this;    
    }

    // notifyInfos

    public boolean hasNotifyInfos(){
        return notifyInfos != null;
    }


    public List<UserNotifyInfo> getNotifyInfosList()
    {
        return notifyInfos == null?  new ArrayList<UserNotifyInfo>():notifyInfos;
    }

    public int getNotifyInfosCount()
    {
        return notifyInfos == null?0:notifyInfos.size();
    }

    public UserNotifyInfo getNotifyInfos(int i)
    {
        return notifyInfos == null?null:notifyInfos.get(i);
    }


    public MsgRspStaticUserDataQuery setNotifyInfosList(List<UserNotifyInfo> notifyInfos)
    {
        this.notifyInfos = notifyInfos;
        return this;    
    }

    // briefBattleLogs

    public boolean hasBriefBattleLogs(){
        return briefBattleLogs != null;
    }


    public List<BriefBattleLogInfo> getBriefBattleLogsList()
    {
        return briefBattleLogs == null?  new ArrayList<BriefBattleLogInfo>():briefBattleLogs;
    }

    public int getBriefBattleLogsCount()
    {
        return briefBattleLogs == null?0:briefBattleLogs.size();
    }

    public BriefBattleLogInfo getBriefBattleLogs(int i)
    {
        return briefBattleLogs == null?null:briefBattleLogs.get(i);
    }


    public MsgRspStaticUserDataQuery setBriefBattleLogsList(List<BriefBattleLogInfo> briefBattleLogs)
    {
        this.briefBattleLogs = briefBattleLogs;
        return this;    
    }

    // troopLogs

    public boolean hasTroopLogs(){
        return troopLogs != null;
    }


    public List<TroopLogInfo> getTroopLogsList()
    {
        return troopLogs == null?  new ArrayList<TroopLogInfo>():troopLogs;
    }

    public int getTroopLogsCount()
    {
        return troopLogs == null?0:troopLogs.size();
    }

    public TroopLogInfo getTroopLogs(int i)
    {
        return troopLogs == null?null:troopLogs.get(i);
    }


    public MsgRspStaticUserDataQuery setTroopLogsList(List<TroopLogInfo> troopLogs)
    {
        this.troopLogs = troopLogs;
        return this;    
    }

    // arenaLogs

    public boolean hasArenaLogs(){
        return arenaLogs != null;
    }


    public List<ArenaLogInfo> getArenaLogsList()
    {
        return arenaLogs == null?  new ArrayList<ArenaLogInfo>():arenaLogs;
    }

    public int getArenaLogsCount()
    {
        return arenaLogs == null?0:arenaLogs.size();
    }

    public ArenaLogInfo getArenaLogs(int i)
    {
        return arenaLogs == null?null:arenaLogs.get(i);
    }


    public MsgRspStaticUserDataQuery setArenaLogsList(List<ArenaLogInfo> arenaLogs)
    {
        this.arenaLogs = arenaLogs;
        return this;    
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<MsgRspStaticUserDataQuery> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public MsgRspStaticUserDataQuery newMessage()
    {
        return new MsgRspStaticUserDataQuery();
    }

    public Class<MsgRspStaticUserDataQuery> typeClass()
    {
        return MsgRspStaticUserDataQuery.class;
    }

    public String messageName()
    {
        return MsgRspStaticUserDataQuery.class.getSimpleName();
    }

    public String messageFullName()
    {
        return MsgRspStaticUserDataQuery.class.getName();
    }

    public boolean isInitialized(MsgRspStaticUserDataQuery message)
    {
        return true;
    }

    public void mergeFrom(Input input, MsgRspStaticUserDataQuery message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 10:
                    message.dataType = StaticUserDataType.valueOf(input.readEnum());
                    break;
                case 20:
                    message.total = input.readUInt32();
                    break;
                case 40:
                    if(message.logInfos == null)
                        message.logInfos = new ArrayList<LogInfo>();
                    message.logInfos.add(input.mergeObject(null, LogInfo.getSchema()));
                    break;

                case 50:
                    if(message.messageInfos == null)
                        message.messageInfos = new ArrayList<MessageInfo>();
                    message.messageInfos.add(input.mergeObject(null, MessageInfo.getSchema()));
                    break;

                case 70:
                    if(message.trayInfos == null)
                        message.trayInfos = new ArrayList<TrayNotifyInfo>();
                    message.trayInfos.add(input.mergeObject(null, TrayNotifyInfo.getSchema()));
                    break;

                case 80:
                    if(message.notifyInfos == null)
                        message.notifyInfos = new ArrayList<UserNotifyInfo>();
                    message.notifyInfos.add(input.mergeObject(null, UserNotifyInfo.getSchema()));
                    break;

                case 100:
                    if(message.briefBattleLogs == null)
                        message.briefBattleLogs = new ArrayList<BriefBattleLogInfo>();
                    message.briefBattleLogs.add(input.mergeObject(null, BriefBattleLogInfo.getSchema()));
                    break;

                case 110:
                    if(message.troopLogs == null)
                        message.troopLogs = new ArrayList<TroopLogInfo>();
                    message.troopLogs.add(input.mergeObject(null, TroopLogInfo.getSchema()));
                    break;

                case 120:
                    if(message.arenaLogs == null)
                        message.arenaLogs = new ArrayList<ArenaLogInfo>();
                    message.arenaLogs.add(input.mergeObject(null, ArenaLogInfo.getSchema()));
                    break;

                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, MsgRspStaticUserDataQuery message) throws IOException
    {
        if(message.dataType != null)
             output.writeEnum(10, message.dataType.number, false);

        if(message.total != null)
            output.writeUInt32(20, message.total, false);

        if(message.logInfos != null)
        {
            for(LogInfo logInfos : message.logInfos)
            {
                if(logInfos != null)
                    output.writeObject(40, logInfos, LogInfo.getSchema(), true);
            }
        }


        if(message.messageInfos != null)
        {
            for(MessageInfo messageInfos : message.messageInfos)
            {
                if(messageInfos != null)
                    output.writeObject(50, messageInfos, MessageInfo.getSchema(), true);
            }
        }


        if(message.trayInfos != null)
        {
            for(TrayNotifyInfo trayInfos : message.trayInfos)
            {
                if(trayInfos != null)
                    output.writeObject(70, trayInfos, TrayNotifyInfo.getSchema(), true);
            }
        }


        if(message.notifyInfos != null)
        {
            for(UserNotifyInfo notifyInfos : message.notifyInfos)
            {
                if(notifyInfos != null)
                    output.writeObject(80, notifyInfos, UserNotifyInfo.getSchema(), true);
            }
        }


        if(message.briefBattleLogs != null)
        {
            for(BriefBattleLogInfo briefBattleLogs : message.briefBattleLogs)
            {
                if(briefBattleLogs != null)
                    output.writeObject(100, briefBattleLogs, BriefBattleLogInfo.getSchema(), true);
            }
        }


        if(message.troopLogs != null)
        {
            for(TroopLogInfo troopLogs : message.troopLogs)
            {
                if(troopLogs != null)
                    output.writeObject(110, troopLogs, TroopLogInfo.getSchema(), true);
            }
        }


        if(message.arenaLogs != null)
        {
            for(ArenaLogInfo arenaLogs : message.arenaLogs)
            {
                if(arenaLogs != null)
                    output.writeObject(120, arenaLogs, ArenaLogInfo.getSchema(), true);
            }
        }

    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
