// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from common.proto

package com.vikings.sanguo.protos;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class BaseLordFiefInfo implements Externalizable, Message<BaseLordFiefInfo>, Schema<BaseLordFiefInfo>
{

    public static Schema<BaseLordFiefInfo> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static BaseLordFiefInfo getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final BaseLordFiefInfo DEFAULT_INSTANCE = new BaseLordFiefInfo();

    
    private Long fiefid;
    private Integer propid;
    private TroopInfo troopInfo;
    private BuildingInfo buildingInfos;
    private List<BuildingEffectInfo> effectInfos;

    public BaseLordFiefInfo()
    {
        
    }

    // getters and setters

    // fiefid

    public boolean hasFiefid(){
        return fiefid != null;
    }


    public Long getFiefid()
    {
        return fiefid == null ? 0L : fiefid;
    }

    public BaseLordFiefInfo setFiefid(Long fiefid)
    {
        this.fiefid = fiefid;
        return this;
    }

    // propid

    public boolean hasPropid(){
        return propid != null;
    }


    public Integer getPropid()
    {
        return propid == null ? 0 : propid;
    }

    public BaseLordFiefInfo setPropid(Integer propid)
    {
        this.propid = propid;
        return this;
    }

    // troopInfo

    public boolean hasTroopInfo(){
        return troopInfo != null;
    }


    public TroopInfo getTroopInfo()
    {
        return troopInfo == null ? new TroopInfo() : troopInfo;
    }

    public BaseLordFiefInfo setTroopInfo(TroopInfo troopInfo)
    {
        this.troopInfo = troopInfo;
        return this;
    }

    // buildingInfos

    public boolean hasBuildingInfos(){
        return buildingInfos != null;
    }


    public BuildingInfo getBuildingInfos()
    {
        return buildingInfos == null ? new BuildingInfo() : buildingInfos;
    }

    public BaseLordFiefInfo setBuildingInfos(BuildingInfo buildingInfos)
    {
        this.buildingInfos = buildingInfos;
        return this;
    }

    // effectInfos

    public boolean hasEffectInfos(){
        return effectInfos != null;
    }


    public List<BuildingEffectInfo> getEffectInfosList()
    {
        return effectInfos == null?  new ArrayList<BuildingEffectInfo>():effectInfos;
    }

    public int getEffectInfosCount()
    {
        return effectInfos == null?0:effectInfos.size();
    }

    public BuildingEffectInfo getEffectInfos(int i)
    {
        return effectInfos == null?null:effectInfos.get(i);
    }


    public BaseLordFiefInfo setEffectInfosList(List<BuildingEffectInfo> effectInfos)
    {
        this.effectInfos = effectInfos;
        return this;    
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<BaseLordFiefInfo> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public BaseLordFiefInfo newMessage()
    {
        return new BaseLordFiefInfo();
    }

    public Class<BaseLordFiefInfo> typeClass()
    {
        return BaseLordFiefInfo.class;
    }

    public String messageName()
    {
        return BaseLordFiefInfo.class.getSimpleName();
    }

    public String messageFullName()
    {
        return BaseLordFiefInfo.class.getName();
    }

    public boolean isInitialized(BaseLordFiefInfo message)
    {
        return true;
    }

    public void mergeFrom(Input input, BaseLordFiefInfo message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 10:
                    message.fiefid = input.readUInt64();
                    break;
                case 20:
                    message.propid = input.readUInt32();
                    break;
                case 100:
                    message.troopInfo = input.mergeObject(message.troopInfo, TroopInfo.getSchema());
                    break;

                case 200:
                    message.buildingInfos = input.mergeObject(message.buildingInfos, BuildingInfo.getSchema());
                    break;

                case 210:
                    if(message.effectInfos == null)
                        message.effectInfos = new ArrayList<BuildingEffectInfo>();
                    message.effectInfos.add(input.mergeObject(null, BuildingEffectInfo.getSchema()));
                    break;

                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, BaseLordFiefInfo message) throws IOException
    {
        if(message.fiefid != null)
            output.writeUInt64(10, message.fiefid, false);

        if(message.propid != null)
            output.writeUInt32(20, message.propid, false);

        if(message.troopInfo != null)
             output.writeObject(100, message.troopInfo, TroopInfo.getSchema(), false);


        if(message.buildingInfos != null)
             output.writeObject(200, message.buildingInfos, BuildingInfo.getSchema(), false);


        if(message.effectInfos != null)
        {
            for(BuildingEffectInfo effectInfos : message.effectInfos)
            {
                if(effectInfos != null)
                    output.writeObject(210, effectInfos, BuildingEffectInfo.getSchema(), true);
            }
        }

    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
