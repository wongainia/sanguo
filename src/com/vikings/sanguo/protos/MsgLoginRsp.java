// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from client.proto

package com.vikings.sanguo.protos;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.ByteString;
import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class MsgLoginRsp implements Externalizable, Message<MsgLoginRsp>, Schema<MsgLoginRsp>
{

    public static Schema<MsgLoginRsp> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static MsgLoginRsp getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final MsgLoginRsp DEFAULT_INSTANCE = new MsgLoginRsp();

    
    private AccountInfo info;
    private ByteString aesKey;
    private Long sessionid;

    public MsgLoginRsp()
    {
        
    }

    // getters and setters

    // info

    public boolean hasInfo(){
        return info != null;
    }


    public AccountInfo getInfo()
    {
        return info == null ? new AccountInfo() : info;
    }

    public MsgLoginRsp setInfo(AccountInfo info)
    {
        this.info = info;
        return this;
    }

    // aesKey

    public boolean hasAesKey(){
        return aesKey != null;
    }


    public ByteString getAesKey()
    {
        return aesKey == null ? ByteString.bytesDefaultValue("") : aesKey;
    }

    public MsgLoginRsp setAesKey(ByteString aesKey)
    {
        this.aesKey = aesKey;
        return this;
    }

    // sessionid

    public boolean hasSessionid(){
        return sessionid != null;
    }


    public Long getSessionid()
    {
        return sessionid == null ? 0L : sessionid;
    }

    public MsgLoginRsp setSessionid(Long sessionid)
    {
        this.sessionid = sessionid;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<MsgLoginRsp> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public MsgLoginRsp newMessage()
    {
        return new MsgLoginRsp();
    }

    public Class<MsgLoginRsp> typeClass()
    {
        return MsgLoginRsp.class;
    }

    public String messageName()
    {
        return MsgLoginRsp.class.getSimpleName();
    }

    public String messageFullName()
    {
        return MsgLoginRsp.class.getName();
    }

    public boolean isInitialized(MsgLoginRsp message)
    {
        return true;
    }

    public void mergeFrom(Input input, MsgLoginRsp message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 10:
                    message.info = input.mergeObject(message.info, AccountInfo.getSchema());
                    break;

                case 20:
                    message.aesKey = input.readBytes();
                    break;
                case 30:
                    message.sessionid = input.readUInt64();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, MsgLoginRsp message) throws IOException
    {
        if(message.info != null)
             output.writeObject(10, message.info, AccountInfo.getSchema(), false);


        if(message.aesKey != null)
            output.writeBytes(20, message.aesKey, false);

        if(message.sessionid != null)
            output.writeUInt64(30, message.sessionid, false);
    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
