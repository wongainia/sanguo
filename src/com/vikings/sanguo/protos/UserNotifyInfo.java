// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from common.proto

package com.vikings.sanguo.protos;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class UserNotifyInfo implements Externalizable, Message<UserNotifyInfo>, Schema<UserNotifyInfo>
{

    public static Schema<UserNotifyInfo> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static UserNotifyInfo getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final UserNotifyInfo DEFAULT_INSTANCE = new UserNotifyInfo();

    
    private Integer start;
    private Integer duration;
    private Integer type;
    private String message;

    public UserNotifyInfo()
    {
        
    }

    // getters and setters

    // start

    public boolean hasStart(){
        return start != null;
    }


    public Integer getStart()
    {
        return start == null ? 0 : start;
    }

    public UserNotifyInfo setStart(Integer start)
    {
        this.start = start;
        return this;
    }

    // duration

    public boolean hasDuration(){
        return duration != null;
    }


    public Integer getDuration()
    {
        return duration == null ? 0 : duration;
    }

    public UserNotifyInfo setDuration(Integer duration)
    {
        this.duration = duration;
        return this;
    }

    // type

    public boolean hasType(){
        return type != null;
    }


    public Integer getType()
    {
        return type == null ? 0 : type;
    }

    public UserNotifyInfo setType(Integer type)
    {
        this.type = type;
        return this;
    }

    // message

    public boolean hasMessage(){
        return message != null;
    }


    public String getMessage()
    {
        return message == null ? "" : message;
    }

    public UserNotifyInfo setMessage(String message)
    {
        this.message = message;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<UserNotifyInfo> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public UserNotifyInfo newMessage()
    {
        return new UserNotifyInfo();
    }

    public Class<UserNotifyInfo> typeClass()
    {
        return UserNotifyInfo.class;
    }

    public String messageName()
    {
        return UserNotifyInfo.class.getSimpleName();
    }

    public String messageFullName()
    {
        return UserNotifyInfo.class.getName();
    }

    public boolean isInitialized(UserNotifyInfo message)
    {
        return true;
    }

    public void mergeFrom(Input input, UserNotifyInfo message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 10:
                    message.start = input.readUInt32();
                    break;
                case 20:
                    message.duration = input.readUInt32();
                    break;
                case 30:
                    message.type = input.readUInt32();
                    break;
                case 40:
                    message.message = input.readString();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, UserNotifyInfo message) throws IOException
    {
        if(message.start != null)
            output.writeUInt32(10, message.start, false);

        if(message.duration != null)
            output.writeUInt32(20, message.duration, false);

        if(message.type != null)
            output.writeUInt32(30, message.type, false);

        if(message.message != null)
            output.writeString(40, message.message, false);
    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
