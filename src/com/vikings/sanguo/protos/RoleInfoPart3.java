// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from common.proto

package com.vikings.sanguo.protos;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class RoleInfoPart3 implements Externalizable, Message<RoleInfoPart3>, Schema<RoleInfoPart3>
{

    public static Schema<RoleInfoPart3> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static RoleInfoPart3 getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final RoleInfoPart3 DEFAULT_INSTANCE = new RoleInfoPart3();

    
    private Integer country;
    private Integer powerHelpArm;
    private List<RoleAttrInfo> infos;
    private List<RoleStatusInfo> statusInfos;
    private RoleDayInfo dayInfo;
    private RoleChargeInfo chargeInfo;
    private Long training;
    private Integer regTime;
    private Integer lastCheckinTime;
    private Integer checkinCount;
    private Integer lastReceiveTime;
    private Integer currencyMachineTimes;
    private Integer staminaResetTime;

    public RoleInfoPart3()
    {
        
    }

    // getters and setters

    // country

    public boolean hasCountry(){
        return country != null;
    }


    public Integer getCountry()
    {
        return country == null ? 0 : country;
    }

    public RoleInfoPart3 setCountry(Integer country)
    {
        this.country = country;
        return this;
    }

    // powerHelpArm

    public boolean hasPowerHelpArm(){
        return powerHelpArm != null;
    }


    public Integer getPowerHelpArm()
    {
        return powerHelpArm == null ? 0 : powerHelpArm;
    }

    public RoleInfoPart3 setPowerHelpArm(Integer powerHelpArm)
    {
        this.powerHelpArm = powerHelpArm;
        return this;
    }

    // infos

    public boolean hasInfos(){
        return infos != null;
    }


    public List<RoleAttrInfo> getInfosList()
    {
        return infos == null?  new ArrayList<RoleAttrInfo>():infos;
    }

    public int getInfosCount()
    {
        return infos == null?0:infos.size();
    }

    public RoleAttrInfo getInfos(int i)
    {
        return infos == null?null:infos.get(i);
    }


    public RoleInfoPart3 setInfosList(List<RoleAttrInfo> infos)
    {
        this.infos = infos;
        return this;    
    }

    // statusInfos

    public boolean hasStatusInfos(){
        return statusInfos != null;
    }


    public List<RoleStatusInfo> getStatusInfosList()
    {
        return statusInfos == null?  new ArrayList<RoleStatusInfo>():statusInfos;
    }

    public int getStatusInfosCount()
    {
        return statusInfos == null?0:statusInfos.size();
    }

    public RoleStatusInfo getStatusInfos(int i)
    {
        return statusInfos == null?null:statusInfos.get(i);
    }


    public RoleInfoPart3 setStatusInfosList(List<RoleStatusInfo> statusInfos)
    {
        this.statusInfos = statusInfos;
        return this;    
    }

    // dayInfo

    public boolean hasDayInfo(){
        return dayInfo != null;
    }


    public RoleDayInfo getDayInfo()
    {
        return dayInfo == null ? new RoleDayInfo() : dayInfo;
    }

    public RoleInfoPart3 setDayInfo(RoleDayInfo dayInfo)
    {
        this.dayInfo = dayInfo;
        return this;
    }

    // chargeInfo

    public boolean hasChargeInfo(){
        return chargeInfo != null;
    }


    public RoleChargeInfo getChargeInfo()
    {
        return chargeInfo == null ? new RoleChargeInfo() : chargeInfo;
    }

    public RoleInfoPart3 setChargeInfo(RoleChargeInfo chargeInfo)
    {
        this.chargeInfo = chargeInfo;
        return this;
    }

    // training

    public boolean hasTraining(){
        return training != null;
    }


    public Long getTraining()
    {
        return training == null ? 0L : training;
    }

    public RoleInfoPart3 setTraining(Long training)
    {
        this.training = training;
        return this;
    }

    // regTime

    public boolean hasRegTime(){
        return regTime != null;
    }


    public Integer getRegTime()
    {
        return regTime == null ? 0 : regTime;
    }

    public RoleInfoPart3 setRegTime(Integer regTime)
    {
        this.regTime = regTime;
        return this;
    }

    // lastCheckinTime

    public boolean hasLastCheckinTime(){
        return lastCheckinTime != null;
    }


    public Integer getLastCheckinTime()
    {
        return lastCheckinTime == null ? 0 : lastCheckinTime;
    }

    public RoleInfoPart3 setLastCheckinTime(Integer lastCheckinTime)
    {
        this.lastCheckinTime = lastCheckinTime;
        return this;
    }

    // checkinCount

    public boolean hasCheckinCount(){
        return checkinCount != null;
    }


    public Integer getCheckinCount()
    {
        return checkinCount == null ? 0 : checkinCount;
    }

    public RoleInfoPart3 setCheckinCount(Integer checkinCount)
    {
        this.checkinCount = checkinCount;
        return this;
    }

    // lastReceiveTime

    public boolean hasLastReceiveTime(){
        return lastReceiveTime != null;
    }


    public Integer getLastReceiveTime()
    {
        return lastReceiveTime == null ? 0 : lastReceiveTime;
    }

    public RoleInfoPart3 setLastReceiveTime(Integer lastReceiveTime)
    {
        this.lastReceiveTime = lastReceiveTime;
        return this;
    }

    // currencyMachineTimes

    public boolean hasCurrencyMachineTimes(){
        return currencyMachineTimes != null;
    }


    public Integer getCurrencyMachineTimes()
    {
        return currencyMachineTimes == null ? 0 : currencyMachineTimes;
    }

    public RoleInfoPart3 setCurrencyMachineTimes(Integer currencyMachineTimes)
    {
        this.currencyMachineTimes = currencyMachineTimes;
        return this;
    }

    // staminaResetTime

    public boolean hasStaminaResetTime(){
        return staminaResetTime != null;
    }


    public Integer getStaminaResetTime()
    {
        return staminaResetTime == null ? 0 : staminaResetTime;
    }

    public RoleInfoPart3 setStaminaResetTime(Integer staminaResetTime)
    {
        this.staminaResetTime = staminaResetTime;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<RoleInfoPart3> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public RoleInfoPart3 newMessage()
    {
        return new RoleInfoPart3();
    }

    public Class<RoleInfoPart3> typeClass()
    {
        return RoleInfoPart3.class;
    }

    public String messageName()
    {
        return RoleInfoPart3.class.getSimpleName();
    }

    public String messageFullName()
    {
        return RoleInfoPart3.class.getName();
    }

    public boolean isInitialized(RoleInfoPart3 message)
    {
        return true;
    }

    public void mergeFrom(Input input, RoleInfoPart3 message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 30:
                    message.country = input.readUInt32();
                    break;
                case 40:
                    message.powerHelpArm = input.readUInt32();
                    break;
                case 100:
                    if(message.infos == null)
                        message.infos = new ArrayList<RoleAttrInfo>();
                    message.infos.add(input.mergeObject(null, RoleAttrInfo.getSchema()));
                    break;

                case 110:
                    if(message.statusInfos == null)
                        message.statusInfos = new ArrayList<RoleStatusInfo>();
                    message.statusInfos.add(input.mergeObject(null, RoleStatusInfo.getSchema()));
                    break;

                case 120:
                    message.dayInfo = input.mergeObject(message.dayInfo, RoleDayInfo.getSchema());
                    break;

                case 130:
                    message.chargeInfo = input.mergeObject(message.chargeInfo, RoleChargeInfo.getSchema());
                    break;

                case 150:
                    message.training = input.readUInt64();
                    break;
                case 160:
                    message.regTime = input.readUInt32();
                    break;
                case 200:
                    message.lastCheckinTime = input.readUInt32();
                    break;
                case 210:
                    message.checkinCount = input.readUInt32();
                    break;
                case 240:
                    message.lastReceiveTime = input.readUInt32();
                    break;
                case 250:
                    message.currencyMachineTimes = input.readUInt32();
                    break;
                case 260:
                    message.staminaResetTime = input.readUInt32();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, RoleInfoPart3 message) throws IOException
    {
        if(message.country != null)
            output.writeUInt32(30, message.country, false);

        if(message.powerHelpArm != null)
            output.writeUInt32(40, message.powerHelpArm, false);

        if(message.infos != null)
        {
            for(RoleAttrInfo infos : message.infos)
            {
                if(infos != null)
                    output.writeObject(100, infos, RoleAttrInfo.getSchema(), true);
            }
        }


        if(message.statusInfos != null)
        {
            for(RoleStatusInfo statusInfos : message.statusInfos)
            {
                if(statusInfos != null)
                    output.writeObject(110, statusInfos, RoleStatusInfo.getSchema(), true);
            }
        }


        if(message.dayInfo != null)
             output.writeObject(120, message.dayInfo, RoleDayInfo.getSchema(), false);


        if(message.chargeInfo != null)
             output.writeObject(130, message.chargeInfo, RoleChargeInfo.getSchema(), false);


        if(message.training != null)
            output.writeUInt64(150, message.training, false);

        if(message.regTime != null)
            output.writeUInt32(160, message.regTime, false);

        if(message.lastCheckinTime != null)
            output.writeUInt32(200, message.lastCheckinTime, false);

        if(message.checkinCount != null)
            output.writeUInt32(210, message.checkinCount, false);

        if(message.lastReceiveTime != null)
            output.writeUInt32(240, message.lastReceiveTime, false);

        if(message.currencyMachineTimes != null)
            output.writeUInt32(250, message.currencyMachineTimes, false);

        if(message.staminaResetTime != null)
            output.writeUInt32(260, message.staminaResetTime, false);
    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
