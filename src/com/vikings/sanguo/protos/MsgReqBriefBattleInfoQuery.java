// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from client.proto

package com.vikings.sanguo.protos;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class MsgReqBriefBattleInfoQuery implements Externalizable, Message<MsgReqBriefBattleInfoQuery>, Schema<MsgReqBriefBattleInfoQuery>
{

    public static Schema<MsgReqBriefBattleInfoQuery> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static MsgReqBriefBattleInfoQuery getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final MsgReqBriefBattleInfoQuery DEFAULT_INSTANCE = new MsgReqBriefBattleInfoQuery();

    
    private List<Long> battleIds;

    public MsgReqBriefBattleInfoQuery()
    {
        
    }

    // getters and setters

    // battleIds

    public boolean hasBattleIds(){
        return battleIds != null;
    }


    public List<Long> getBattleIdsList()
    {
        return battleIds == null?  new ArrayList<Long>():battleIds;
    }

    public int getBattleIdsCount()
    {
        return battleIds == null?0:battleIds.size();
    }

    public Long getBattleIds(int i)
    {
        return battleIds == null?null:battleIds.get(i);
    }


    public MsgReqBriefBattleInfoQuery setBattleIdsList(List<Long> battleIds)
    {
        this.battleIds = battleIds;
        return this;    
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<MsgReqBriefBattleInfoQuery> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public MsgReqBriefBattleInfoQuery newMessage()
    {
        return new MsgReqBriefBattleInfoQuery();
    }

    public Class<MsgReqBriefBattleInfoQuery> typeClass()
    {
        return MsgReqBriefBattleInfoQuery.class;
    }

    public String messageName()
    {
        return MsgReqBriefBattleInfoQuery.class.getSimpleName();
    }

    public String messageFullName()
    {
        return MsgReqBriefBattleInfoQuery.class.getName();
    }

    public boolean isInitialized(MsgReqBriefBattleInfoQuery message)
    {
        return true;
    }

    public void mergeFrom(Input input, MsgReqBriefBattleInfoQuery message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 10:
                    if(message.battleIds == null)
                        message.battleIds = new ArrayList<Long>();
                    int count = input.readInt32();
                    int cur = ((com.dyuproject.protostuff.ByteArrayInput)input).currentOffset();
                    while(((com.dyuproject.protostuff.ByteArrayInput)input).currentOffset() - cur < count)
                    {
                        message.battleIds.add(input.readUInt64());
                    }
                    break;
                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, MsgReqBriefBattleInfoQuery message) throws IOException
    {
        if(message.battleIds != null)
        {
            for(Long battleIds : message.battleIds)
            {
                if(battleIds != null)
                    output.writeUInt64(10, battleIds, true);
            }
        }
    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
