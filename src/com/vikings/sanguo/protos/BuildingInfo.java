// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from common.proto

package com.vikings.sanguo.protos;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class BuildingInfo implements Externalizable, Message<BuildingInfo>, Schema<BuildingInfo>
{

    public static Schema<BuildingInfo> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static BuildingInfo getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final BuildingInfo DEFAULT_INSTANCE = new BuildingInfo();

    
    private Integer itemid;
    private List<BuildingStatusInfo> sis;

    public BuildingInfo()
    {
        
    }

    // getters and setters

    // itemid

    public boolean hasItemid(){
        return itemid != null;
    }


    public Integer getItemid()
    {
        return itemid == null ? 0 : itemid;
    }

    public BuildingInfo setItemid(Integer itemid)
    {
        this.itemid = itemid;
        return this;
    }

    // sis

    public boolean hasSis(){
        return sis != null;
    }


    public List<BuildingStatusInfo> getSisList()
    {
        return sis == null?  new ArrayList<BuildingStatusInfo>():sis;
    }

    public int getSisCount()
    {
        return sis == null?0:sis.size();
    }

    public BuildingStatusInfo getSis(int i)
    {
        return sis == null?null:sis.get(i);
    }


    public BuildingInfo setSisList(List<BuildingStatusInfo> sis)
    {
        this.sis = sis;
        return this;    
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<BuildingInfo> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public BuildingInfo newMessage()
    {
        return new BuildingInfo();
    }

    public Class<BuildingInfo> typeClass()
    {
        return BuildingInfo.class;
    }

    public String messageName()
    {
        return BuildingInfo.class.getSimpleName();
    }

    public String messageFullName()
    {
        return BuildingInfo.class.getName();
    }

    public boolean isInitialized(BuildingInfo message)
    {
        return true;
    }

    public void mergeFrom(Input input, BuildingInfo message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 10:
                    message.itemid = input.readUInt32();
                    break;
                case 70:
                    if(message.sis == null)
                        message.sis = new ArrayList<BuildingStatusInfo>();
                    message.sis.add(input.mergeObject(null, BuildingStatusInfo.getSchema()));
                    break;

                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, BuildingInfo message) throws IOException
    {
        if(message.itemid != null)
            output.writeUInt32(10, message.itemid, false);

        if(message.sis != null)
        {
            for(BuildingStatusInfo sis : message.sis)
            {
                if(sis != null)
                    output.writeObject(70, sis, BuildingStatusInfo.getSchema(), true);
            }
        }

    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
