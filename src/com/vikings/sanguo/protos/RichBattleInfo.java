// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from common.proto

package com.vikings.sanguo.protos;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class RichBattleInfo implements Externalizable, Message<RichBattleInfo>, Schema<RichBattleInfo>
{

    public static Schema<RichBattleInfo> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static RichBattleInfo getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final RichBattleInfo DEFAULT_INSTANCE = new RichBattleInfo();

    
    private DataCtrl ctrl;
    private Long id;
    private ExBattleInfo battleInfo;
    private MoveTroopInfos attackTroopInfos;
    private MoveTroopInfos defendTroopInfos;
    private UserTroopInfos diffTroopInfos;
    private UserTroopEffectInfos userTroopEffectInfos;

    public RichBattleInfo()
    {
        
    }

    // getters and setters

    // ctrl

    public boolean hasCtrl(){
        return ctrl != null;
    }


    public DataCtrl getCtrl()
    {
        return ctrl == null ? new DataCtrl() : ctrl;
    }

    public RichBattleInfo setCtrl(DataCtrl ctrl)
    {
        this.ctrl = ctrl;
        return this;
    }

    // id

    public boolean hasId(){
        return id != null;
    }


    public Long getId()
    {
        return id == null ? 0L : id;
    }

    public RichBattleInfo setId(Long id)
    {
        this.id = id;
        return this;
    }

    // battleInfo

    public boolean hasBattleInfo(){
        return battleInfo != null;
    }


    public ExBattleInfo getBattleInfo()
    {
        return battleInfo == null ? new ExBattleInfo() : battleInfo;
    }

    public RichBattleInfo setBattleInfo(ExBattleInfo battleInfo)
    {
        this.battleInfo = battleInfo;
        return this;
    }

    // attackTroopInfos

    public boolean hasAttackTroopInfos(){
        return attackTroopInfos != null;
    }


    public MoveTroopInfos getAttackTroopInfos()
    {
        return attackTroopInfos == null ? new MoveTroopInfos() : attackTroopInfos;
    }

    public RichBattleInfo setAttackTroopInfos(MoveTroopInfos attackTroopInfos)
    {
        this.attackTroopInfos = attackTroopInfos;
        return this;
    }

    // defendTroopInfos

    public boolean hasDefendTroopInfos(){
        return defendTroopInfos != null;
    }


    public MoveTroopInfos getDefendTroopInfos()
    {
        return defendTroopInfos == null ? new MoveTroopInfos() : defendTroopInfos;
    }

    public RichBattleInfo setDefendTroopInfos(MoveTroopInfos defendTroopInfos)
    {
        this.defendTroopInfos = defendTroopInfos;
        return this;
    }

    // diffTroopInfos

    public boolean hasDiffTroopInfos(){
        return diffTroopInfos != null;
    }


    public UserTroopInfos getDiffTroopInfos()
    {
        return diffTroopInfos == null ? new UserTroopInfos() : diffTroopInfos;
    }

    public RichBattleInfo setDiffTroopInfos(UserTroopInfos diffTroopInfos)
    {
        this.diffTroopInfos = diffTroopInfos;
        return this;
    }

    // userTroopEffectInfos

    public boolean hasUserTroopEffectInfos(){
        return userTroopEffectInfos != null;
    }


    public UserTroopEffectInfos getUserTroopEffectInfos()
    {
        return userTroopEffectInfos == null ? new UserTroopEffectInfos() : userTroopEffectInfos;
    }

    public RichBattleInfo setUserTroopEffectInfos(UserTroopEffectInfos userTroopEffectInfos)
    {
        this.userTroopEffectInfos = userTroopEffectInfos;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<RichBattleInfo> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public RichBattleInfo newMessage()
    {
        return new RichBattleInfo();
    }

    public Class<RichBattleInfo> typeClass()
    {
        return RichBattleInfo.class;
    }

    public String messageName()
    {
        return RichBattleInfo.class.getSimpleName();
    }

    public String messageFullName()
    {
        return RichBattleInfo.class.getName();
    }

    public boolean isInitialized(RichBattleInfo message)
    {
        return true;
    }

    public void mergeFrom(Input input, RichBattleInfo message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 10:
                    message.ctrl = input.mergeObject(message.ctrl, DataCtrl.getSchema());
                    break;

                case 20:
                    message.id = input.readUInt64();
                    break;
                case 30:
                    message.battleInfo = input.mergeObject(message.battleInfo, ExBattleInfo.getSchema());
                    break;

                case 100:
                    message.attackTroopInfos = input.mergeObject(message.attackTroopInfos, MoveTroopInfos.getSchema());
                    break;

                case 110:
                    message.defendTroopInfos = input.mergeObject(message.defendTroopInfos, MoveTroopInfos.getSchema());
                    break;

                case 120:
                    message.diffTroopInfos = input.mergeObject(message.diffTroopInfos, UserTroopInfos.getSchema());
                    break;

                case 130:
                    message.userTroopEffectInfos = input.mergeObject(message.userTroopEffectInfos, UserTroopEffectInfos.getSchema());
                    break;

                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, RichBattleInfo message) throws IOException
    {
        if(message.ctrl != null)
             output.writeObject(10, message.ctrl, DataCtrl.getSchema(), false);


        if(message.id != null)
            output.writeUInt64(20, message.id, false);

        if(message.battleInfo != null)
             output.writeObject(30, message.battleInfo, ExBattleInfo.getSchema(), false);


        if(message.attackTroopInfos != null)
             output.writeObject(100, message.attackTroopInfos, MoveTroopInfos.getSchema(), false);


        if(message.defendTroopInfos != null)
             output.writeObject(110, message.defendTroopInfos, MoveTroopInfos.getSchema(), false);


        if(message.diffTroopInfos != null)
             output.writeObject(120, message.diffTroopInfos, UserTroopInfos.getSchema(), false);


        if(message.userTroopEffectInfos != null)
             output.writeObject(130, message.userTroopEffectInfos, UserTroopEffectInfos.getSchema(), false);

    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
