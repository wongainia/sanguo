// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from client.proto

package com.vikings.sanguo.protos;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class MsgRspHeartbeat implements Externalizable, Message<MsgRspHeartbeat>, Schema<MsgRspHeartbeat>
{

    public static Schema<MsgRspHeartbeat> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static MsgRspHeartbeat getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final MsgRspHeartbeat DEFAULT_INSTANCE = new MsgRspHeartbeat();

    
    private Integer userVer;
    private Integer notifyVer;
    private Long maxIdRealLog;
    private Long maxIdMessage;
    private Integer currentTime;
    private List<ChatTimeInfo> chatTimeInfos;
    private Long maxIdWantedPlayer;

    public MsgRspHeartbeat()
    {
        
    }

    // getters and setters

    // userVer

    public boolean hasUserVer(){
        return userVer != null;
    }


    public Integer getUserVer()
    {
        return userVer == null ? 0 : userVer;
    }

    public MsgRspHeartbeat setUserVer(Integer userVer)
    {
        this.userVer = userVer;
        return this;
    }

    // notifyVer

    public boolean hasNotifyVer(){
        return notifyVer != null;
    }


    public Integer getNotifyVer()
    {
        return notifyVer == null ? 0 : notifyVer;
    }

    public MsgRspHeartbeat setNotifyVer(Integer notifyVer)
    {
        this.notifyVer = notifyVer;
        return this;
    }

    // maxIdRealLog

    public boolean hasMaxIdRealLog(){
        return maxIdRealLog != null;
    }


    public Long getMaxIdRealLog()
    {
        return maxIdRealLog == null ? 0L : maxIdRealLog;
    }

    public MsgRspHeartbeat setMaxIdRealLog(Long maxIdRealLog)
    {
        this.maxIdRealLog = maxIdRealLog;
        return this;
    }

    // maxIdMessage

    public boolean hasMaxIdMessage(){
        return maxIdMessage != null;
    }


    public Long getMaxIdMessage()
    {
        return maxIdMessage == null ? 0L : maxIdMessage;
    }

    public MsgRspHeartbeat setMaxIdMessage(Long maxIdMessage)
    {
        this.maxIdMessage = maxIdMessage;
        return this;
    }

    // currentTime

    public boolean hasCurrentTime(){
        return currentTime != null;
    }


    public Integer getCurrentTime()
    {
        return currentTime == null ? 0 : currentTime;
    }

    public MsgRspHeartbeat setCurrentTime(Integer currentTime)
    {
        this.currentTime = currentTime;
        return this;
    }

    // chatTimeInfos

    public boolean hasChatTimeInfos(){
        return chatTimeInfos != null;
    }


    public List<ChatTimeInfo> getChatTimeInfosList()
    {
        return chatTimeInfos == null?  new ArrayList<ChatTimeInfo>():chatTimeInfos;
    }

    public int getChatTimeInfosCount()
    {
        return chatTimeInfos == null?0:chatTimeInfos.size();
    }

    public ChatTimeInfo getChatTimeInfos(int i)
    {
        return chatTimeInfos == null?null:chatTimeInfos.get(i);
    }


    public MsgRspHeartbeat setChatTimeInfosList(List<ChatTimeInfo> chatTimeInfos)
    {
        this.chatTimeInfos = chatTimeInfos;
        return this;    
    }

    // maxIdWantedPlayer

    public boolean hasMaxIdWantedPlayer(){
        return maxIdWantedPlayer != null;
    }


    public Long getMaxIdWantedPlayer()
    {
        return maxIdWantedPlayer == null ? 0L : maxIdWantedPlayer;
    }

    public MsgRspHeartbeat setMaxIdWantedPlayer(Long maxIdWantedPlayer)
    {
        this.maxIdWantedPlayer = maxIdWantedPlayer;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<MsgRspHeartbeat> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public MsgRspHeartbeat newMessage()
    {
        return new MsgRspHeartbeat();
    }

    public Class<MsgRspHeartbeat> typeClass()
    {
        return MsgRspHeartbeat.class;
    }

    public String messageName()
    {
        return MsgRspHeartbeat.class.getSimpleName();
    }

    public String messageFullName()
    {
        return MsgRspHeartbeat.class.getName();
    }

    public boolean isInitialized(MsgRspHeartbeat message)
    {
        return true;
    }

    public void mergeFrom(Input input, MsgRspHeartbeat message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 10:
                    message.userVer = input.readUInt32();
                    break;
                case 20:
                    message.notifyVer = input.readUInt32();
                    break;
                case 30:
                    message.maxIdRealLog = input.readUInt64();
                    break;
                case 40:
                    message.maxIdMessage = input.readUInt64();
                    break;
                case 50:
                    message.currentTime = input.readUInt32();
                    break;
                case 60:
                    if(message.chatTimeInfos == null)
                        message.chatTimeInfos = new ArrayList<ChatTimeInfo>();
                    message.chatTimeInfos.add(input.mergeObject(null, ChatTimeInfo.getSchema()));
                    break;

                case 70:
                    message.maxIdWantedPlayer = input.readUInt64();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, MsgRspHeartbeat message) throws IOException
    {
        if(message.userVer != null)
            output.writeUInt32(10, message.userVer, false);

        if(message.notifyVer != null)
            output.writeUInt32(20, message.notifyVer, false);

        if(message.maxIdRealLog != null)
            output.writeUInt64(30, message.maxIdRealLog, false);

        if(message.maxIdMessage != null)
            output.writeUInt64(40, message.maxIdMessage, false);

        if(message.currentTime != null)
            output.writeUInt32(50, message.currentTime, false);

        if(message.chatTimeInfos != null)
        {
            for(ChatTimeInfo chatTimeInfos : message.chatTimeInfos)
            {
                if(chatTimeInfos != null)
                    output.writeObject(60, chatTimeInfos, ChatTimeInfo.getSchema(), true);
            }
        }


        if(message.maxIdWantedPlayer != null)
            output.writeUInt64(70, message.maxIdWantedPlayer, false);
    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
