// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from common.proto

package com.vikings.sanguo.protos;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class BaseBattleInfo implements Externalizable, Message<BaseBattleInfo>, Schema<BaseBattleInfo>
{

    public static Schema<BaseBattleInfo> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static BaseBattleInfo getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final BaseBattleInfo DEFAULT_INSTANCE = new BaseBattleInfo();

    
    private Integer type;
    private Long defendFiefid;
    private Integer attacker;
    private Integer defender;
    private Integer state;
    private Integer time;
    private Integer scale;
    private List<PokerInfo> attackPokerResult;
    private List<PokerInfo> defendPokerResult;
    private Integer attackPokerUnit;
    private Integer defendPokerUnit;
    private List<BattleHeroInfo> attackHeroInfos;
    private List<BattleHeroInfo> defendHeroInfos;
    private List<KeyValue> usersBuyUnit;

    public BaseBattleInfo()
    {
        
    }

    // getters and setters

    // type

    public boolean hasType(){
        return type != null;
    }


    public Integer getType()
    {
        return type == null ? 0 : type;
    }

    public BaseBattleInfo setType(Integer type)
    {
        this.type = type;
        return this;
    }

    // defendFiefid

    public boolean hasDefendFiefid(){
        return defendFiefid != null;
    }


    public Long getDefendFiefid()
    {
        return defendFiefid == null ? 0L : defendFiefid;
    }

    public BaseBattleInfo setDefendFiefid(Long defendFiefid)
    {
        this.defendFiefid = defendFiefid;
        return this;
    }

    // attacker

    public boolean hasAttacker(){
        return attacker != null;
    }


    public Integer getAttacker()
    {
        return attacker == null ? 0 : attacker;
    }

    public BaseBattleInfo setAttacker(Integer attacker)
    {
        this.attacker = attacker;
        return this;
    }

    // defender

    public boolean hasDefender(){
        return defender != null;
    }


    public Integer getDefender()
    {
        return defender == null ? 0 : defender;
    }

    public BaseBattleInfo setDefender(Integer defender)
    {
        this.defender = defender;
        return this;
    }

    // state

    public boolean hasState(){
        return state != null;
    }


    public Integer getState()
    {
        return state == null ? 0 : state;
    }

    public BaseBattleInfo setState(Integer state)
    {
        this.state = state;
        return this;
    }

    // time

    public boolean hasTime(){
        return time != null;
    }


    public Integer getTime()
    {
        return time == null ? 0 : time;
    }

    public BaseBattleInfo setTime(Integer time)
    {
        this.time = time;
        return this;
    }

    // scale

    public boolean hasScale(){
        return scale != null;
    }


    public Integer getScale()
    {
        return scale == null ? 0 : scale;
    }

    public BaseBattleInfo setScale(Integer scale)
    {
        this.scale = scale;
        return this;
    }

    // attackPokerResult

    public boolean hasAttackPokerResult(){
        return attackPokerResult != null;
    }


    public List<PokerInfo> getAttackPokerResultList()
    {
        return attackPokerResult == null?  new ArrayList<PokerInfo>():attackPokerResult;
    }

    public int getAttackPokerResultCount()
    {
        return attackPokerResult == null?0:attackPokerResult.size();
    }

    public PokerInfo getAttackPokerResult(int i)
    {
        return attackPokerResult == null?null:attackPokerResult.get(i);
    }


    public BaseBattleInfo setAttackPokerResultList(List<PokerInfo> attackPokerResult)
    {
        this.attackPokerResult = attackPokerResult;
        return this;    
    }

    // defendPokerResult

    public boolean hasDefendPokerResult(){
        return defendPokerResult != null;
    }


    public List<PokerInfo> getDefendPokerResultList()
    {
        return defendPokerResult == null?  new ArrayList<PokerInfo>():defendPokerResult;
    }

    public int getDefendPokerResultCount()
    {
        return defendPokerResult == null?0:defendPokerResult.size();
    }

    public PokerInfo getDefendPokerResult(int i)
    {
        return defendPokerResult == null?null:defendPokerResult.get(i);
    }


    public BaseBattleInfo setDefendPokerResultList(List<PokerInfo> defendPokerResult)
    {
        this.defendPokerResult = defendPokerResult;
        return this;    
    }

    // attackPokerUnit

    public boolean hasAttackPokerUnit(){
        return attackPokerUnit != null;
    }


    public Integer getAttackPokerUnit()
    {
        return attackPokerUnit == null ? 0 : attackPokerUnit;
    }

    public BaseBattleInfo setAttackPokerUnit(Integer attackPokerUnit)
    {
        this.attackPokerUnit = attackPokerUnit;
        return this;
    }

    // defendPokerUnit

    public boolean hasDefendPokerUnit(){
        return defendPokerUnit != null;
    }


    public Integer getDefendPokerUnit()
    {
        return defendPokerUnit == null ? 0 : defendPokerUnit;
    }

    public BaseBattleInfo setDefendPokerUnit(Integer defendPokerUnit)
    {
        this.defendPokerUnit = defendPokerUnit;
        return this;
    }

    // attackHeroInfos

    public boolean hasAttackHeroInfos(){
        return attackHeroInfos != null;
    }


    public List<BattleHeroInfo> getAttackHeroInfosList()
    {
        return attackHeroInfos == null?  new ArrayList<BattleHeroInfo>():attackHeroInfos;
    }

    public int getAttackHeroInfosCount()
    {
        return attackHeroInfos == null?0:attackHeroInfos.size();
    }

    public BattleHeroInfo getAttackHeroInfos(int i)
    {
        return attackHeroInfos == null?null:attackHeroInfos.get(i);
    }


    public BaseBattleInfo setAttackHeroInfosList(List<BattleHeroInfo> attackHeroInfos)
    {
        this.attackHeroInfos = attackHeroInfos;
        return this;    
    }

    // defendHeroInfos

    public boolean hasDefendHeroInfos(){
        return defendHeroInfos != null;
    }


    public List<BattleHeroInfo> getDefendHeroInfosList()
    {
        return defendHeroInfos == null?  new ArrayList<BattleHeroInfo>():defendHeroInfos;
    }

    public int getDefendHeroInfosCount()
    {
        return defendHeroInfos == null?0:defendHeroInfos.size();
    }

    public BattleHeroInfo getDefendHeroInfos(int i)
    {
        return defendHeroInfos == null?null:defendHeroInfos.get(i);
    }


    public BaseBattleInfo setDefendHeroInfosList(List<BattleHeroInfo> defendHeroInfos)
    {
        this.defendHeroInfos = defendHeroInfos;
        return this;    
    }

    // usersBuyUnit

    public boolean hasUsersBuyUnit(){
        return usersBuyUnit != null;
    }


    public List<KeyValue> getUsersBuyUnitList()
    {
        return usersBuyUnit == null?  new ArrayList<KeyValue>():usersBuyUnit;
    }

    public int getUsersBuyUnitCount()
    {
        return usersBuyUnit == null?0:usersBuyUnit.size();
    }

    public KeyValue getUsersBuyUnit(int i)
    {
        return usersBuyUnit == null?null:usersBuyUnit.get(i);
    }


    public BaseBattleInfo setUsersBuyUnitList(List<KeyValue> usersBuyUnit)
    {
        this.usersBuyUnit = usersBuyUnit;
        return this;    
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<BaseBattleInfo> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public BaseBattleInfo newMessage()
    {
        return new BaseBattleInfo();
    }

    public Class<BaseBattleInfo> typeClass()
    {
        return BaseBattleInfo.class;
    }

    public String messageName()
    {
        return BaseBattleInfo.class.getSimpleName();
    }

    public String messageFullName()
    {
        return BaseBattleInfo.class.getName();
    }

    public boolean isInitialized(BaseBattleInfo message)
    {
        return true;
    }

    public void mergeFrom(Input input, BaseBattleInfo message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 10:
                    message.type = input.readUInt32();
                    break;
                case 20:
                    message.defendFiefid = input.readUInt64();
                    break;
                case 40:
                    message.attacker = input.readUInt32();
                    break;
                case 50:
                    message.defender = input.readUInt32();
                    break;
                case 60:
                    message.state = input.readUInt32();
                    break;
                case 70:
                    message.time = input.readUInt32();
                    break;
                case 80:
                    message.scale = input.readUInt32();
                    break;
                case 100:
                    if(message.attackPokerResult == null)
                        message.attackPokerResult = new ArrayList<PokerInfo>();
                    message.attackPokerResult.add(input.mergeObject(null, PokerInfo.getSchema()));
                    break;

                case 110:
                    if(message.defendPokerResult == null)
                        message.defendPokerResult = new ArrayList<PokerInfo>();
                    message.defendPokerResult.add(input.mergeObject(null, PokerInfo.getSchema()));
                    break;

                case 120:
                    message.attackPokerUnit = input.readUInt32();
                    break;
                case 130:
                    message.defendPokerUnit = input.readUInt32();
                    break;
                case 140:
                    if(message.attackHeroInfos == null)
                        message.attackHeroInfos = new ArrayList<BattleHeroInfo>();
                    message.attackHeroInfos.add(input.mergeObject(null, BattleHeroInfo.getSchema()));
                    break;

                case 150:
                    if(message.defendHeroInfos == null)
                        message.defendHeroInfos = new ArrayList<BattleHeroInfo>();
                    message.defendHeroInfos.add(input.mergeObject(null, BattleHeroInfo.getSchema()));
                    break;

                case 160:
                    if(message.usersBuyUnit == null)
                        message.usersBuyUnit = new ArrayList<KeyValue>();
                    message.usersBuyUnit.add(input.mergeObject(null, KeyValue.getSchema()));
                    break;

                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, BaseBattleInfo message) throws IOException
    {
        if(message.type != null)
            output.writeUInt32(10, message.type, false);

        if(message.defendFiefid != null)
            output.writeUInt64(20, message.defendFiefid, false);

        if(message.attacker != null)
            output.writeUInt32(40, message.attacker, false);

        if(message.defender != null)
            output.writeUInt32(50, message.defender, false);

        if(message.state != null)
            output.writeUInt32(60, message.state, false);

        if(message.time != null)
            output.writeUInt32(70, message.time, false);

        if(message.scale != null)
            output.writeUInt32(80, message.scale, false);

        if(message.attackPokerResult != null)
        {
            for(PokerInfo attackPokerResult : message.attackPokerResult)
            {
                if(attackPokerResult != null)
                    output.writeObject(100, attackPokerResult, PokerInfo.getSchema(), true);
            }
        }


        if(message.defendPokerResult != null)
        {
            for(PokerInfo defendPokerResult : message.defendPokerResult)
            {
                if(defendPokerResult != null)
                    output.writeObject(110, defendPokerResult, PokerInfo.getSchema(), true);
            }
        }


        if(message.attackPokerUnit != null)
            output.writeUInt32(120, message.attackPokerUnit, false);

        if(message.defendPokerUnit != null)
            output.writeUInt32(130, message.defendPokerUnit, false);

        if(message.attackHeroInfos != null)
        {
            for(BattleHeroInfo attackHeroInfos : message.attackHeroInfos)
            {
                if(attackHeroInfos != null)
                    output.writeObject(140, attackHeroInfos, BattleHeroInfo.getSchema(), true);
            }
        }


        if(message.defendHeroInfos != null)
        {
            for(BattleHeroInfo defendHeroInfos : message.defendHeroInfos)
            {
                if(defendHeroInfos != null)
                    output.writeObject(150, defendHeroInfos, BattleHeroInfo.getSchema(), true);
            }
        }


        if(message.usersBuyUnit != null)
        {
            for(KeyValue usersBuyUnit : message.usersBuyUnit)
            {
                if(usersBuyUnit != null)
                    output.writeObject(160, usersBuyUnit, KeyValue.getSchema(), true);
            }
        }

    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
