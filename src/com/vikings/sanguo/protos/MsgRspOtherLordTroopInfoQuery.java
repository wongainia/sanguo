// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from client.proto

package com.vikings.sanguo.protos;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class MsgRspOtherLordTroopInfoQuery implements Externalizable, Message<MsgRspOtherLordTroopInfoQuery>, Schema<MsgRspOtherLordTroopInfoQuery>
{

    public static Schema<MsgRspOtherLordTroopInfoQuery> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static MsgRspOtherLordTroopInfoQuery getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final MsgRspOtherLordTroopInfoQuery DEFAULT_INSTANCE = new MsgRspOtherLordTroopInfoQuery();

    
    private TroopInfo info;

    public MsgRspOtherLordTroopInfoQuery()
    {
        
    }

    // getters and setters

    // info

    public boolean hasInfo(){
        return info != null;
    }


    public TroopInfo getInfo()
    {
        return info == null ? new TroopInfo() : info;
    }

    public MsgRspOtherLordTroopInfoQuery setInfo(TroopInfo info)
    {
        this.info = info;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<MsgRspOtherLordTroopInfoQuery> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public MsgRspOtherLordTroopInfoQuery newMessage()
    {
        return new MsgRspOtherLordTroopInfoQuery();
    }

    public Class<MsgRspOtherLordTroopInfoQuery> typeClass()
    {
        return MsgRspOtherLordTroopInfoQuery.class;
    }

    public String messageName()
    {
        return MsgRspOtherLordTroopInfoQuery.class.getSimpleName();
    }

    public String messageFullName()
    {
        return MsgRspOtherLordTroopInfoQuery.class.getName();
    }

    public boolean isInitialized(MsgRspOtherLordTroopInfoQuery message)
    {
        return true;
    }

    public void mergeFrom(Input input, MsgRspOtherLordTroopInfoQuery message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 10:
                    message.info = input.mergeObject(message.info, TroopInfo.getSchema());
                    break;

                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, MsgRspOtherLordTroopInfoQuery message) throws IOException
    {
        if(message.info != null)
             output.writeObject(10, message.info, TroopInfo.getSchema(), false);

    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
