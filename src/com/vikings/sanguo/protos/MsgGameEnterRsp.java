// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from client.proto

package com.vikings.sanguo.protos;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class MsgGameEnterRsp implements Externalizable, Message<MsgGameEnterRsp>, Schema<MsgGameEnterRsp>
{

    public static Schema<MsgGameEnterRsp> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static MsgGameEnterRsp getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final MsgGameEnterRsp DEFAULT_INSTANCE = new MsgGameEnterRsp();

    
    private Integer time;
    private Integer mpFreeCount;
    private Integer mpResetTime;
    private ReturnInfo ri;
    private Integer worldLevel;
    private Integer worldLevelProcess;
    private Integer worldLevelProcessTotal;

    public MsgGameEnterRsp()
    {
        
    }

    // getters and setters

    // time

    public boolean hasTime(){
        return time != null;
    }


    public Integer getTime()
    {
        return time == null ? 0 : time;
    }

    public MsgGameEnterRsp setTime(Integer time)
    {
        this.time = time;
        return this;
    }

    // mpFreeCount

    public boolean hasMpFreeCount(){
        return mpFreeCount != null;
    }


    public Integer getMpFreeCount()
    {
        return mpFreeCount == null ? 0 : mpFreeCount;
    }

    public MsgGameEnterRsp setMpFreeCount(Integer mpFreeCount)
    {
        this.mpFreeCount = mpFreeCount;
        return this;
    }

    // mpResetTime

    public boolean hasMpResetTime(){
        return mpResetTime != null;
    }


    public Integer getMpResetTime()
    {
        return mpResetTime == null ? 0 : mpResetTime;
    }

    public MsgGameEnterRsp setMpResetTime(Integer mpResetTime)
    {
        this.mpResetTime = mpResetTime;
        return this;
    }

    // ri

    public boolean hasRi(){
        return ri != null;
    }


    public ReturnInfo getRi()
    {
        return ri == null ? new ReturnInfo() : ri;
    }

    public MsgGameEnterRsp setRi(ReturnInfo ri)
    {
        this.ri = ri;
        return this;
    }

    // worldLevel

    public boolean hasWorldLevel(){
        return worldLevel != null;
    }


    public Integer getWorldLevel()
    {
        return worldLevel == null ? 0 : worldLevel;
    }

    public MsgGameEnterRsp setWorldLevel(Integer worldLevel)
    {
        this.worldLevel = worldLevel;
        return this;
    }

    // worldLevelProcess

    public boolean hasWorldLevelProcess(){
        return worldLevelProcess != null;
    }


    public Integer getWorldLevelProcess()
    {
        return worldLevelProcess == null ? 0 : worldLevelProcess;
    }

    public MsgGameEnterRsp setWorldLevelProcess(Integer worldLevelProcess)
    {
        this.worldLevelProcess = worldLevelProcess;
        return this;
    }

    // worldLevelProcessTotal

    public boolean hasWorldLevelProcessTotal(){
        return worldLevelProcessTotal != null;
    }


    public Integer getWorldLevelProcessTotal()
    {
        return worldLevelProcessTotal == null ? 0 : worldLevelProcessTotal;
    }

    public MsgGameEnterRsp setWorldLevelProcessTotal(Integer worldLevelProcessTotal)
    {
        this.worldLevelProcessTotal = worldLevelProcessTotal;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<MsgGameEnterRsp> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public MsgGameEnterRsp newMessage()
    {
        return new MsgGameEnterRsp();
    }

    public Class<MsgGameEnterRsp> typeClass()
    {
        return MsgGameEnterRsp.class;
    }

    public String messageName()
    {
        return MsgGameEnterRsp.class.getSimpleName();
    }

    public String messageFullName()
    {
        return MsgGameEnterRsp.class.getName();
    }

    public boolean isInitialized(MsgGameEnterRsp message)
    {
        return true;
    }

    public void mergeFrom(Input input, MsgGameEnterRsp message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 10:
                    message.time = input.readUInt32();
                    break;
                case 30:
                    message.mpFreeCount = input.readUInt32();
                    break;
                case 40:
                    message.mpResetTime = input.readUInt32();
                    break;
                case 50:
                    message.ri = input.mergeObject(message.ri, ReturnInfo.getSchema());
                    break;

                case 60:
                    message.worldLevel = input.readUInt32();
                    break;
                case 61:
                    message.worldLevelProcess = input.readUInt32();
                    break;
                case 62:
                    message.worldLevelProcessTotal = input.readUInt32();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, MsgGameEnterRsp message) throws IOException
    {
        if(message.time != null)
            output.writeUInt32(10, message.time, false);

        if(message.mpFreeCount != null)
            output.writeUInt32(30, message.mpFreeCount, false);

        if(message.mpResetTime != null)
            output.writeUInt32(40, message.mpResetTime, false);

        if(message.ri != null)
             output.writeObject(50, message.ri, ReturnInfo.getSchema(), false);


        if(message.worldLevel != null)
            output.writeUInt32(60, message.worldLevel, false);

        if(message.worldLevelProcess != null)
            output.writeUInt32(61, message.worldLevelProcess, false);

        if(message.worldLevelProcessTotal != null)
            output.writeUInt32(62, message.worldLevelProcessTotal, false);
    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
