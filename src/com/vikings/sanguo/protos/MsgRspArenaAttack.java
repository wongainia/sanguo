// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from client.proto

package com.vikings.sanguo.protos;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class MsgRspArenaAttack implements Externalizable, Message<MsgRspArenaAttack>, Schema<MsgRspArenaAttack>
{

    public static Schema<MsgRspArenaAttack> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static MsgRspArenaAttack getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final MsgRspArenaAttack DEFAULT_INSTANCE = new MsgRspArenaAttack();

    
    private LordInfo li;
    private ReturnInfo ri;
    private BattleLogInfo battleLog;

    public MsgRspArenaAttack()
    {
        
    }

    // getters and setters

    // li

    public boolean hasLi(){
        return li != null;
    }


    public LordInfo getLi()
    {
        return li == null ? new LordInfo() : li;
    }

    public MsgRspArenaAttack setLi(LordInfo li)
    {
        this.li = li;
        return this;
    }

    // ri

    public boolean hasRi(){
        return ri != null;
    }


    public ReturnInfo getRi()
    {
        return ri == null ? new ReturnInfo() : ri;
    }

    public MsgRspArenaAttack setRi(ReturnInfo ri)
    {
        this.ri = ri;
        return this;
    }

    // battleLog

    public boolean hasBattleLog(){
        return battleLog != null;
    }


    public BattleLogInfo getBattleLog()
    {
        return battleLog == null ? new BattleLogInfo() : battleLog;
    }

    public MsgRspArenaAttack setBattleLog(BattleLogInfo battleLog)
    {
        this.battleLog = battleLog;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<MsgRspArenaAttack> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public MsgRspArenaAttack newMessage()
    {
        return new MsgRspArenaAttack();
    }

    public Class<MsgRspArenaAttack> typeClass()
    {
        return MsgRspArenaAttack.class;
    }

    public String messageName()
    {
        return MsgRspArenaAttack.class.getSimpleName();
    }

    public String messageFullName()
    {
        return MsgRspArenaAttack.class.getName();
    }

    public boolean isInitialized(MsgRspArenaAttack message)
    {
        return true;
    }

    public void mergeFrom(Input input, MsgRspArenaAttack message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 10:
                    message.li = input.mergeObject(message.li, LordInfo.getSchema());
                    break;

                case 20:
                    message.ri = input.mergeObject(message.ri, ReturnInfo.getSchema());
                    break;

                case 30:
                    message.battleLog = input.mergeObject(message.battleLog, BattleLogInfo.getSchema());
                    break;

                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, MsgRspArenaAttack message) throws IOException
    {
        if(message.li != null)
             output.writeObject(10, message.li, LordInfo.getSchema(), false);


        if(message.ri != null)
             output.writeObject(20, message.ri, ReturnInfo.getSchema(), false);


        if(message.battleLog != null)
             output.writeObject(30, message.battleLog, BattleLogInfo.getSchema(), false);

    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
