// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from common.proto

package com.vikings.sanguo.protos;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class ExUserInfo implements Externalizable, Message<ExUserInfo>, Schema<ExUserInfo>
{

    public static Schema<ExUserInfo> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static ExUserInfo getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final ExUserInfo DEFAULT_INSTANCE = new ExUserInfo();

    
    private DataCtrl ctrl;
    private ExAccountInfo accountInfo;
    private ExRoleInfo roleInfo;

    public ExUserInfo()
    {
        
    }

    // getters and setters

    // ctrl

    public boolean hasCtrl(){
        return ctrl != null;
    }


    public DataCtrl getCtrl()
    {
        return ctrl == null ? new DataCtrl() : ctrl;
    }

    public ExUserInfo setCtrl(DataCtrl ctrl)
    {
        this.ctrl = ctrl;
        return this;
    }

    // accountInfo

    public boolean hasAccountInfo(){
        return accountInfo != null;
    }


    public ExAccountInfo getAccountInfo()
    {
        return accountInfo == null ? new ExAccountInfo() : accountInfo;
    }

    public ExUserInfo setAccountInfo(ExAccountInfo accountInfo)
    {
        this.accountInfo = accountInfo;
        return this;
    }

    // roleInfo

    public boolean hasRoleInfo(){
        return roleInfo != null;
    }


    public ExRoleInfo getRoleInfo()
    {
        return roleInfo == null ? new ExRoleInfo() : roleInfo;
    }

    public ExUserInfo setRoleInfo(ExRoleInfo roleInfo)
    {
        this.roleInfo = roleInfo;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<ExUserInfo> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public ExUserInfo newMessage()
    {
        return new ExUserInfo();
    }

    public Class<ExUserInfo> typeClass()
    {
        return ExUserInfo.class;
    }

    public String messageName()
    {
        return ExUserInfo.class.getSimpleName();
    }

    public String messageFullName()
    {
        return ExUserInfo.class.getName();
    }

    public boolean isInitialized(ExUserInfo message)
    {
        return true;
    }

    public void mergeFrom(Input input, ExUserInfo message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 10:
                    message.ctrl = input.mergeObject(message.ctrl, DataCtrl.getSchema());
                    break;

                case 20:
                    message.accountInfo = input.mergeObject(message.accountInfo, ExAccountInfo.getSchema());
                    break;

                case 30:
                    message.roleInfo = input.mergeObject(message.roleInfo, ExRoleInfo.getSchema());
                    break;

                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, ExUserInfo message) throws IOException
    {
        if(message.ctrl != null)
             output.writeObject(10, message.ctrl, DataCtrl.getSchema(), false);


        if(message.accountInfo != null)
             output.writeObject(20, message.accountInfo, ExAccountInfo.getSchema(), false);


        if(message.roleInfo != null)
             output.writeObject(30, message.roleInfo, ExRoleInfo.getSchema(), false);

    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
