// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from common.proto

package com.vikings.sanguo.protos;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class OtherUserInfo implements Externalizable, Message<OtherUserInfo>, Schema<OtherUserInfo>
{

    public static Schema<OtherUserInfo> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static OtherUserInfo getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final OtherUserInfo DEFAULT_INSTANCE = new OtherUserInfo();

    
    private Integer id;
    private Integer image;
    private Integer sex;
    private Integer birthday;
    private Integer province;
    private Integer city;
    private Integer homeProvince;
    private Integer homeCity;
    private String nick;
    private Integer marital;
    private Integer style;
    private Integer blood;
    private String desc;
    private List<RoleAttrInfo> infos;
    private List<RoleStatusInfo> statusInfos;
    private Integer guildid;
    private Integer country;
    private Integer lastLoginTime;
    private Integer charge;

    public OtherUserInfo()
    {
        
    }

    // getters and setters

    // id

    public boolean hasId(){
        return id != null;
    }


    public Integer getId()
    {
        return id == null ? 0 : id;
    }

    public OtherUserInfo setId(Integer id)
    {
        this.id = id;
        return this;
    }

    // image

    public boolean hasImage(){
        return image != null;
    }


    public Integer getImage()
    {
        return image == null ? 0 : image;
    }

    public OtherUserInfo setImage(Integer image)
    {
        this.image = image;
        return this;
    }

    // sex

    public boolean hasSex(){
        return sex != null;
    }


    public Integer getSex()
    {
        return sex == null ? 0 : sex;
    }

    public OtherUserInfo setSex(Integer sex)
    {
        this.sex = sex;
        return this;
    }

    // birthday

    public boolean hasBirthday(){
        return birthday != null;
    }


    public Integer getBirthday()
    {
        return birthday == null ? 0 : birthday;
    }

    public OtherUserInfo setBirthday(Integer birthday)
    {
        this.birthday = birthday;
        return this;
    }

    // province

    public boolean hasProvince(){
        return province != null;
    }


    public Integer getProvince()
    {
        return province == null ? 0 : province;
    }

    public OtherUserInfo setProvince(Integer province)
    {
        this.province = province;
        return this;
    }

    // city

    public boolean hasCity(){
        return city != null;
    }


    public Integer getCity()
    {
        return city == null ? 0 : city;
    }

    public OtherUserInfo setCity(Integer city)
    {
        this.city = city;
        return this;
    }

    // homeProvince

    public boolean hasHomeProvince(){
        return homeProvince != null;
    }


    public Integer getHomeProvince()
    {
        return homeProvince == null ? 0 : homeProvince;
    }

    public OtherUserInfo setHomeProvince(Integer homeProvince)
    {
        this.homeProvince = homeProvince;
        return this;
    }

    // homeCity

    public boolean hasHomeCity(){
        return homeCity != null;
    }


    public Integer getHomeCity()
    {
        return homeCity == null ? 0 : homeCity;
    }

    public OtherUserInfo setHomeCity(Integer homeCity)
    {
        this.homeCity = homeCity;
        return this;
    }

    // nick

    public boolean hasNick(){
        return nick != null;
    }


    public String getNick()
    {
        return nick == null ? "" : nick;
    }

    public OtherUserInfo setNick(String nick)
    {
        this.nick = nick;
        return this;
    }

    // marital

    public boolean hasMarital(){
        return marital != null;
    }


    public Integer getMarital()
    {
        return marital == null ? 0 : marital;
    }

    public OtherUserInfo setMarital(Integer marital)
    {
        this.marital = marital;
        return this;
    }

    // style

    public boolean hasStyle(){
        return style != null;
    }


    public Integer getStyle()
    {
        return style == null ? 0 : style;
    }

    public OtherUserInfo setStyle(Integer style)
    {
        this.style = style;
        return this;
    }

    // blood

    public boolean hasBlood(){
        return blood != null;
    }


    public Integer getBlood()
    {
        return blood == null ? 0 : blood;
    }

    public OtherUserInfo setBlood(Integer blood)
    {
        this.blood = blood;
        return this;
    }

    // desc

    public boolean hasDesc(){
        return desc != null;
    }


    public String getDesc()
    {
        return desc == null ? "" : desc;
    }

    public OtherUserInfo setDesc(String desc)
    {
        this.desc = desc;
        return this;
    }

    // infos

    public boolean hasInfos(){
        return infos != null;
    }


    public List<RoleAttrInfo> getInfosList()
    {
        return infos == null?  new ArrayList<RoleAttrInfo>():infos;
    }

    public int getInfosCount()
    {
        return infos == null?0:infos.size();
    }

    public RoleAttrInfo getInfos(int i)
    {
        return infos == null?null:infos.get(i);
    }


    public OtherUserInfo setInfosList(List<RoleAttrInfo> infos)
    {
        this.infos = infos;
        return this;    
    }

    // statusInfos

    public boolean hasStatusInfos(){
        return statusInfos != null;
    }


    public List<RoleStatusInfo> getStatusInfosList()
    {
        return statusInfos == null?  new ArrayList<RoleStatusInfo>():statusInfos;
    }

    public int getStatusInfosCount()
    {
        return statusInfos == null?0:statusInfos.size();
    }

    public RoleStatusInfo getStatusInfos(int i)
    {
        return statusInfos == null?null:statusInfos.get(i);
    }


    public OtherUserInfo setStatusInfosList(List<RoleStatusInfo> statusInfos)
    {
        this.statusInfos = statusInfos;
        return this;    
    }

    // guildid

    public boolean hasGuildid(){
        return guildid != null;
    }


    public Integer getGuildid()
    {
        return guildid == null ? 0 : guildid;
    }

    public OtherUserInfo setGuildid(Integer guildid)
    {
        this.guildid = guildid;
        return this;
    }

    // country

    public boolean hasCountry(){
        return country != null;
    }


    public Integer getCountry()
    {
        return country == null ? 0 : country;
    }

    public OtherUserInfo setCountry(Integer country)
    {
        this.country = country;
        return this;
    }

    // lastLoginTime

    public boolean hasLastLoginTime(){
        return lastLoginTime != null;
    }


    public Integer getLastLoginTime()
    {
        return lastLoginTime == null ? 0 : lastLoginTime;
    }

    public OtherUserInfo setLastLoginTime(Integer lastLoginTime)
    {
        this.lastLoginTime = lastLoginTime;
        return this;
    }

    // charge

    public boolean hasCharge(){
        return charge != null;
    }


    public Integer getCharge()
    {
        return charge == null ? 0 : charge;
    }

    public OtherUserInfo setCharge(Integer charge)
    {
        this.charge = charge;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<OtherUserInfo> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public OtherUserInfo newMessage()
    {
        return new OtherUserInfo();
    }

    public Class<OtherUserInfo> typeClass()
    {
        return OtherUserInfo.class;
    }

    public String messageName()
    {
        return OtherUserInfo.class.getSimpleName();
    }

    public String messageFullName()
    {
        return OtherUserInfo.class.getName();
    }

    public boolean isInitialized(OtherUserInfo message)
    {
        return true;
    }

    public void mergeFrom(Input input, OtherUserInfo message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 10:
                    message.id = input.readInt32();
                    break;
                case 20:
                    message.image = input.readInt32();
                    break;
                case 30:
                    message.sex = input.readInt32();
                    break;
                case 40:
                    message.birthday = input.readInt32();
                    break;
                case 50:
                    message.province = input.readInt32();
                    break;
                case 60:
                    message.city = input.readInt32();
                    break;
                case 70:
                    message.homeProvince = input.readInt32();
                    break;
                case 80:
                    message.homeCity = input.readInt32();
                    break;
                case 90:
                    message.nick = input.readString();
                    break;
                case 100:
                    message.marital = input.readInt32();
                    break;
                case 110:
                    message.style = input.readInt32();
                    break;
                case 120:
                    message.blood = input.readInt32();
                    break;
                case 130:
                    message.desc = input.readString();
                    break;
                case 140:
                    if(message.infos == null)
                        message.infos = new ArrayList<RoleAttrInfo>();
                    message.infos.add(input.mergeObject(null, RoleAttrInfo.getSchema()));
                    break;

                case 150:
                    if(message.statusInfos == null)
                        message.statusInfos = new ArrayList<RoleStatusInfo>();
                    message.statusInfos.add(input.mergeObject(null, RoleStatusInfo.getSchema()));
                    break;

                case 280:
                    message.guildid = input.readUInt32();
                    break;
                case 290:
                    message.country = input.readUInt32();
                    break;
                case 300:
                    message.lastLoginTime = input.readUInt32();
                    break;
                case 310:
                    message.charge = input.readUInt32();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, OtherUserInfo message) throws IOException
    {
        if(message.id != null)
            output.writeInt32(10, message.id, false);

        if(message.image != null)
            output.writeInt32(20, message.image, false);

        if(message.sex != null)
            output.writeInt32(30, message.sex, false);

        if(message.birthday != null)
            output.writeInt32(40, message.birthday, false);

        if(message.province != null)
            output.writeInt32(50, message.province, false);

        if(message.city != null)
            output.writeInt32(60, message.city, false);

        if(message.homeProvince != null)
            output.writeInt32(70, message.homeProvince, false);

        if(message.homeCity != null)
            output.writeInt32(80, message.homeCity, false);

        if(message.nick != null)
            output.writeString(90, message.nick, false);

        if(message.marital != null)
            output.writeInt32(100, message.marital, false);

        if(message.style != null)
            output.writeInt32(110, message.style, false);

        if(message.blood != null)
            output.writeInt32(120, message.blood, false);

        if(message.desc != null)
            output.writeString(130, message.desc, false);

        if(message.infos != null)
        {
            for(RoleAttrInfo infos : message.infos)
            {
                if(infos != null)
                    output.writeObject(140, infos, RoleAttrInfo.getSchema(), true);
            }
        }


        if(message.statusInfos != null)
        {
            for(RoleStatusInfo statusInfos : message.statusInfos)
            {
                if(statusInfos != null)
                    output.writeObject(150, statusInfos, RoleStatusInfo.getSchema(), true);
            }
        }


        if(message.guildid != null)
            output.writeUInt32(280, message.guildid, false);

        if(message.country != null)
            output.writeUInt32(290, message.country, false);

        if(message.lastLoginTime != null)
            output.writeUInt32(300, message.lastLoginTime, false);

        if(message.charge != null)
            output.writeUInt32(310, message.charge, false);
    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
