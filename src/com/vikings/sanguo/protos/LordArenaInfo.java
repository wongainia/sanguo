// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from common.proto

package com.vikings.sanguo.protos;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class LordArenaInfo implements Externalizable, Message<LordArenaInfo>, Schema<LordArenaInfo>
{

    public static Schema<LordArenaInfo> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static LordArenaInfo getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final LordArenaInfo DEFAULT_INSTANCE = new LordArenaInfo();

    
    private TroopInfo arenaTroopInfo;
    private List<HeroIdInfo> arenaHeroInfos;
    private Integer arenaRank;
    private Integer arenaRewardStart;
    private Integer arenaRewardStartValue;
    private Integer arenaCount;
    private Integer arenaCountResetTime;

    public LordArenaInfo()
    {
        
    }

    // getters and setters

    // arenaTroopInfo

    public boolean hasArenaTroopInfo(){
        return arenaTroopInfo != null;
    }


    public TroopInfo getArenaTroopInfo()
    {
        return arenaTroopInfo == null ? new TroopInfo() : arenaTroopInfo;
    }

    public LordArenaInfo setArenaTroopInfo(TroopInfo arenaTroopInfo)
    {
        this.arenaTroopInfo = arenaTroopInfo;
        return this;
    }

    // arenaHeroInfos

    public boolean hasArenaHeroInfos(){
        return arenaHeroInfos != null;
    }


    public List<HeroIdInfo> getArenaHeroInfosList()
    {
        return arenaHeroInfos == null?  new ArrayList<HeroIdInfo>():arenaHeroInfos;
    }

    public int getArenaHeroInfosCount()
    {
        return arenaHeroInfos == null?0:arenaHeroInfos.size();
    }

    public HeroIdInfo getArenaHeroInfos(int i)
    {
        return arenaHeroInfos == null?null:arenaHeroInfos.get(i);
    }


    public LordArenaInfo setArenaHeroInfosList(List<HeroIdInfo> arenaHeroInfos)
    {
        this.arenaHeroInfos = arenaHeroInfos;
        return this;    
    }

    // arenaRank

    public boolean hasArenaRank(){
        return arenaRank != null;
    }


    public Integer getArenaRank()
    {
        return arenaRank == null ? 0 : arenaRank;
    }

    public LordArenaInfo setArenaRank(Integer arenaRank)
    {
        this.arenaRank = arenaRank;
        return this;
    }

    // arenaRewardStart

    public boolean hasArenaRewardStart(){
        return arenaRewardStart != null;
    }


    public Integer getArenaRewardStart()
    {
        return arenaRewardStart == null ? 0 : arenaRewardStart;
    }

    public LordArenaInfo setArenaRewardStart(Integer arenaRewardStart)
    {
        this.arenaRewardStart = arenaRewardStart;
        return this;
    }

    // arenaRewardStartValue

    public boolean hasArenaRewardStartValue(){
        return arenaRewardStartValue != null;
    }


    public Integer getArenaRewardStartValue()
    {
        return arenaRewardStartValue == null ? 0 : arenaRewardStartValue;
    }

    public LordArenaInfo setArenaRewardStartValue(Integer arenaRewardStartValue)
    {
        this.arenaRewardStartValue = arenaRewardStartValue;
        return this;
    }

    // arenaCount

    public boolean hasArenaCount(){
        return arenaCount != null;
    }


    public Integer getArenaCount()
    {
        return arenaCount == null ? 0 : arenaCount;
    }

    public LordArenaInfo setArenaCount(Integer arenaCount)
    {
        this.arenaCount = arenaCount;
        return this;
    }

    // arenaCountResetTime

    public boolean hasArenaCountResetTime(){
        return arenaCountResetTime != null;
    }


    public Integer getArenaCountResetTime()
    {
        return arenaCountResetTime == null ? 0 : arenaCountResetTime;
    }

    public LordArenaInfo setArenaCountResetTime(Integer arenaCountResetTime)
    {
        this.arenaCountResetTime = arenaCountResetTime;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<LordArenaInfo> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public LordArenaInfo newMessage()
    {
        return new LordArenaInfo();
    }

    public Class<LordArenaInfo> typeClass()
    {
        return LordArenaInfo.class;
    }

    public String messageName()
    {
        return LordArenaInfo.class.getSimpleName();
    }

    public String messageFullName()
    {
        return LordArenaInfo.class.getName();
    }

    public boolean isInitialized(LordArenaInfo message)
    {
        return true;
    }

    public void mergeFrom(Input input, LordArenaInfo message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 200:
                    message.arenaTroopInfo = input.mergeObject(message.arenaTroopInfo, TroopInfo.getSchema());
                    break;

                case 210:
                    if(message.arenaHeroInfos == null)
                        message.arenaHeroInfos = new ArrayList<HeroIdInfo>();
                    message.arenaHeroInfos.add(input.mergeObject(null, HeroIdInfo.getSchema()));
                    break;

                case 220:
                    message.arenaRank = input.readUInt32();
                    break;
                case 230:
                    message.arenaRewardStart = input.readUInt32();
                    break;
                case 240:
                    message.arenaRewardStartValue = input.readUInt32();
                    break;
                case 250:
                    message.arenaCount = input.readUInt32();
                    break;
                case 260:
                    message.arenaCountResetTime = input.readUInt32();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, LordArenaInfo message) throws IOException
    {
        if(message.arenaTroopInfo != null)
             output.writeObject(200, message.arenaTroopInfo, TroopInfo.getSchema(), false);


        if(message.arenaHeroInfos != null)
        {
            for(HeroIdInfo arenaHeroInfos : message.arenaHeroInfos)
            {
                if(arenaHeroInfos != null)
                    output.writeObject(210, arenaHeroInfos, HeroIdInfo.getSchema(), true);
            }
        }


        if(message.arenaRank != null)
            output.writeUInt32(220, message.arenaRank, false);

        if(message.arenaRewardStart != null)
            output.writeUInt32(230, message.arenaRewardStart, false);

        if(message.arenaRewardStartValue != null)
            output.writeUInt32(240, message.arenaRewardStartValue, false);

        if(message.arenaCount != null)
            output.writeUInt32(250, message.arenaCount, false);

        if(message.arenaCountResetTime != null)
            output.writeUInt32(260, message.arenaCountResetTime, false);
    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
