// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from client.proto

package com.vikings.sanguo.protos;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class MsgReqOtherUserHeroInfoQuery implements Externalizable, Message<MsgReqOtherUserHeroInfoQuery>, Schema<MsgReqOtherUserHeroInfoQuery>
{

    public static Schema<MsgReqOtherUserHeroInfoQuery> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static MsgReqOtherUserHeroInfoQuery getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final MsgReqOtherUserHeroInfoQuery DEFAULT_INSTANCE = new MsgReqOtherUserHeroInfoQuery();

    
    private Integer target;
    private List<Long> ids;

    public MsgReqOtherUserHeroInfoQuery()
    {
        
    }

    // getters and setters

    // target

    public boolean hasTarget(){
        return target != null;
    }


    public Integer getTarget()
    {
        return target == null ? 0 : target;
    }

    public MsgReqOtherUserHeroInfoQuery setTarget(Integer target)
    {
        this.target = target;
        return this;
    }

    // ids

    public boolean hasIds(){
        return ids != null;
    }


    public List<Long> getIdsList()
    {
        return ids == null?  new ArrayList<Long>():ids;
    }

    public int getIdsCount()
    {
        return ids == null?0:ids.size();
    }

    public Long getIds(int i)
    {
        return ids == null?null:ids.get(i);
    }


    public MsgReqOtherUserHeroInfoQuery setIdsList(List<Long> ids)
    {
        this.ids = ids;
        return this;    
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<MsgReqOtherUserHeroInfoQuery> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public MsgReqOtherUserHeroInfoQuery newMessage()
    {
        return new MsgReqOtherUserHeroInfoQuery();
    }

    public Class<MsgReqOtherUserHeroInfoQuery> typeClass()
    {
        return MsgReqOtherUserHeroInfoQuery.class;
    }

    public String messageName()
    {
        return MsgReqOtherUserHeroInfoQuery.class.getSimpleName();
    }

    public String messageFullName()
    {
        return MsgReqOtherUserHeroInfoQuery.class.getName();
    }

    public boolean isInitialized(MsgReqOtherUserHeroInfoQuery message)
    {
        return true;
    }

    public void mergeFrom(Input input, MsgReqOtherUserHeroInfoQuery message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 10:
                    message.target = input.readUInt32();
                    break;
                case 20:
                    if(message.ids == null)
                        message.ids = new ArrayList<Long>();
                    message.ids.add(input.readUInt64());
                    break;
                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, MsgReqOtherUserHeroInfoQuery message) throws IOException
    {
        if(message.target != null)
            output.writeUInt32(10, message.target, false);

        if(message.ids != null)
        {
            for(Long ids : message.ids)
            {
                if(ids != null)
                    output.writeUInt64(20, ids, true);
            }
        }
    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
