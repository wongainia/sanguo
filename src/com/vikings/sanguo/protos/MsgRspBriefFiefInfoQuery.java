// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from client.proto

package com.vikings.sanguo.protos;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class MsgRspBriefFiefInfoQuery implements Externalizable, Message<MsgRspBriefFiefInfoQuery>, Schema<MsgRspBriefFiefInfoQuery>
{

    public static Schema<MsgRspBriefFiefInfoQuery> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static MsgRspBriefFiefInfoQuery getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final MsgRspBriefFiefInfoQuery DEFAULT_INSTANCE = new MsgRspBriefFiefInfoQuery();

    
    private List<BriefFiefInfo> infos;
    private List<ManorInfo> manorInfos;
    private List<UserAttrScoreInfo> attrInfos;

    public MsgRspBriefFiefInfoQuery()
    {
        
    }

    // getters and setters

    // infos

    public boolean hasInfos(){
        return infos != null;
    }


    public List<BriefFiefInfo> getInfosList()
    {
        return infos == null?  new ArrayList<BriefFiefInfo>():infos;
    }

    public int getInfosCount()
    {
        return infos == null?0:infos.size();
    }

    public BriefFiefInfo getInfos(int i)
    {
        return infos == null?null:infos.get(i);
    }


    public MsgRspBriefFiefInfoQuery setInfosList(List<BriefFiefInfo> infos)
    {
        this.infos = infos;
        return this;    
    }

    // manorInfos

    public boolean hasManorInfos(){
        return manorInfos != null;
    }


    public List<ManorInfo> getManorInfosList()
    {
        return manorInfos == null?  new ArrayList<ManorInfo>():manorInfos;
    }

    public int getManorInfosCount()
    {
        return manorInfos == null?0:manorInfos.size();
    }

    public ManorInfo getManorInfos(int i)
    {
        return manorInfos == null?null:manorInfos.get(i);
    }


    public MsgRspBriefFiefInfoQuery setManorInfosList(List<ManorInfo> manorInfos)
    {
        this.manorInfos = manorInfos;
        return this;    
    }

    // attrInfos

    public boolean hasAttrInfos(){
        return attrInfos != null;
    }


    public List<UserAttrScoreInfo> getAttrInfosList()
    {
        return attrInfos == null?  new ArrayList<UserAttrScoreInfo>():attrInfos;
    }

    public int getAttrInfosCount()
    {
        return attrInfos == null?0:attrInfos.size();
    }

    public UserAttrScoreInfo getAttrInfos(int i)
    {
        return attrInfos == null?null:attrInfos.get(i);
    }


    public MsgRspBriefFiefInfoQuery setAttrInfosList(List<UserAttrScoreInfo> attrInfos)
    {
        this.attrInfos = attrInfos;
        return this;    
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<MsgRspBriefFiefInfoQuery> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public MsgRspBriefFiefInfoQuery newMessage()
    {
        return new MsgRspBriefFiefInfoQuery();
    }

    public Class<MsgRspBriefFiefInfoQuery> typeClass()
    {
        return MsgRspBriefFiefInfoQuery.class;
    }

    public String messageName()
    {
        return MsgRspBriefFiefInfoQuery.class.getSimpleName();
    }

    public String messageFullName()
    {
        return MsgRspBriefFiefInfoQuery.class.getName();
    }

    public boolean isInitialized(MsgRspBriefFiefInfoQuery message)
    {
        return true;
    }

    public void mergeFrom(Input input, MsgRspBriefFiefInfoQuery message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 10:
                    if(message.infos == null)
                        message.infos = new ArrayList<BriefFiefInfo>();
                    message.infos.add(input.mergeObject(null, BriefFiefInfo.getSchema()));
                    break;

                case 20:
                    if(message.manorInfos == null)
                        message.manorInfos = new ArrayList<ManorInfo>();
                    message.manorInfos.add(input.mergeObject(null, ManorInfo.getSchema()));
                    break;

                case 30:
                    if(message.attrInfos == null)
                        message.attrInfos = new ArrayList<UserAttrScoreInfo>();
                    message.attrInfos.add(input.mergeObject(null, UserAttrScoreInfo.getSchema()));
                    break;

                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, MsgRspBriefFiefInfoQuery message) throws IOException
    {
        if(message.infos != null)
        {
            for(BriefFiefInfo infos : message.infos)
            {
                if(infos != null)
                    output.writeObject(10, infos, BriefFiefInfo.getSchema(), true);
            }
        }


        if(message.manorInfos != null)
        {
            for(ManorInfo manorInfos : message.manorInfos)
            {
                if(manorInfos != null)
                    output.writeObject(20, manorInfos, ManorInfo.getSchema(), true);
            }
        }


        if(message.attrInfos != null)
        {
            for(UserAttrScoreInfo attrInfos : message.attrInfos)
            {
                if(attrInfos != null)
                    output.writeObject(30, attrInfos, UserAttrScoreInfo.getSchema(), true);
            }
        }

    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
