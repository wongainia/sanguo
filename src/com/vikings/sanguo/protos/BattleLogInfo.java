// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from common.proto

package com.vikings.sanguo.protos;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class BattleLogInfo implements Externalizable, Message<BattleLogInfo>, Schema<BattleLogInfo>
{

    public static Schema<BattleLogInfo> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static BattleLogInfo getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final BattleLogInfo DEFAULT_INSTANCE = new BattleLogInfo();

    
    private Long id;
    private Integer attacker;
    private Integer defender;
    private Integer type;
    private Integer battleResult;
    private Integer time;
    private Long attackFiefid;
    private Long defendFiefid;
    private Integer fiefScale;
    private Integer attackerType;
    private Integer version;
    private Integer record;
    private Integer defendFiefPropid;
    private List<BattleLogReturnInfo> ris;
    private List<ReturnHeroInfo> rhis;
    private List<BattleEventInfo> eventInfos;
    private List<MoveTroopInfo> attackBeginTroopInfos;
    private List<MoveTroopInfo> defendBeginTroopInfos;
    private List<MoveTroopInfo> attackEndTroopInfos;
    private List<MoveTroopInfo> defendEndTroopInfos;
    private List<BattleLogHeroInfo> attackHeroInfos;
    private List<BattleLogHeroInfo> defendHeroInfos;
    private List<UserTroopEffectInfo> userTroopEffects;

    public BattleLogInfo()
    {
        
    }

    // getters and setters

    // id

    public boolean hasId(){
        return id != null;
    }


    public Long getId()
    {
        return id == null ? 0L : id;
    }

    public BattleLogInfo setId(Long id)
    {
        this.id = id;
        return this;
    }

    // attacker

    public boolean hasAttacker(){
        return attacker != null;
    }


    public Integer getAttacker()
    {
        return attacker == null ? 0 : attacker;
    }

    public BattleLogInfo setAttacker(Integer attacker)
    {
        this.attacker = attacker;
        return this;
    }

    // defender

    public boolean hasDefender(){
        return defender != null;
    }


    public Integer getDefender()
    {
        return defender == null ? 0 : defender;
    }

    public BattleLogInfo setDefender(Integer defender)
    {
        this.defender = defender;
        return this;
    }

    // type

    public boolean hasType(){
        return type != null;
    }


    public Integer getType()
    {
        return type == null ? 0 : type;
    }

    public BattleLogInfo setType(Integer type)
    {
        this.type = type;
        return this;
    }

    // battleResult

    public boolean hasBattleResult(){
        return battleResult != null;
    }


    public Integer getBattleResult()
    {
        return battleResult == null ? 0 : battleResult;
    }

    public BattleLogInfo setBattleResult(Integer battleResult)
    {
        this.battleResult = battleResult;
        return this;
    }

    // time

    public boolean hasTime(){
        return time != null;
    }


    public Integer getTime()
    {
        return time == null ? 0 : time;
    }

    public BattleLogInfo setTime(Integer time)
    {
        this.time = time;
        return this;
    }

    // attackFiefid

    public boolean hasAttackFiefid(){
        return attackFiefid != null;
    }


    public Long getAttackFiefid()
    {
        return attackFiefid == null ? 0L : attackFiefid;
    }

    public BattleLogInfo setAttackFiefid(Long attackFiefid)
    {
        this.attackFiefid = attackFiefid;
        return this;
    }

    // defendFiefid

    public boolean hasDefendFiefid(){
        return defendFiefid != null;
    }


    public Long getDefendFiefid()
    {
        return defendFiefid == null ? 0L : defendFiefid;
    }

    public BattleLogInfo setDefendFiefid(Long defendFiefid)
    {
        this.defendFiefid = defendFiefid;
        return this;
    }

    // fiefScale

    public boolean hasFiefScale(){
        return fiefScale != null;
    }


    public Integer getFiefScale()
    {
        return fiefScale == null ? 0 : fiefScale;
    }

    public BattleLogInfo setFiefScale(Integer fiefScale)
    {
        this.fiefScale = fiefScale;
        return this;
    }

    // attackerType

    public boolean hasAttackerType(){
        return attackerType != null;
    }


    public Integer getAttackerType()
    {
        return attackerType == null ? 0 : attackerType;
    }

    public BattleLogInfo setAttackerType(Integer attackerType)
    {
        this.attackerType = attackerType;
        return this;
    }

    // version

    public boolean hasVersion(){
        return version != null;
    }


    public Integer getVersion()
    {
        return version == null ? 0 : version;
    }

    public BattleLogInfo setVersion(Integer version)
    {
        this.version = version;
        return this;
    }

    // record

    public boolean hasRecord(){
        return record != null;
    }


    public Integer getRecord()
    {
        return record == null ? 0 : record;
    }

    public BattleLogInfo setRecord(Integer record)
    {
        this.record = record;
        return this;
    }

    // defendFiefPropid

    public boolean hasDefendFiefPropid(){
        return defendFiefPropid != null;
    }


    public Integer getDefendFiefPropid()
    {
        return defendFiefPropid == null ? 0 : defendFiefPropid;
    }

    public BattleLogInfo setDefendFiefPropid(Integer defendFiefPropid)
    {
        this.defendFiefPropid = defendFiefPropid;
        return this;
    }

    // ris

    public boolean hasRis(){
        return ris != null;
    }


    public List<BattleLogReturnInfo> getRisList()
    {
        return ris == null?  new ArrayList<BattleLogReturnInfo>():ris;
    }

    public int getRisCount()
    {
        return ris == null?0:ris.size();
    }

    public BattleLogReturnInfo getRis(int i)
    {
        return ris == null?null:ris.get(i);
    }


    public BattleLogInfo setRisList(List<BattleLogReturnInfo> ris)
    {
        this.ris = ris;
        return this;    
    }

    // rhis

    public boolean hasRhis(){
        return rhis != null;
    }


    public List<ReturnHeroInfo> getRhisList()
    {
        return rhis == null?  new ArrayList<ReturnHeroInfo>():rhis;
    }

    public int getRhisCount()
    {
        return rhis == null?0:rhis.size();
    }

    public ReturnHeroInfo getRhis(int i)
    {
        return rhis == null?null:rhis.get(i);
    }


    public BattleLogInfo setRhisList(List<ReturnHeroInfo> rhis)
    {
        this.rhis = rhis;
        return this;    
    }

    // eventInfos

    public boolean hasEventInfos(){
        return eventInfos != null;
    }


    public List<BattleEventInfo> getEventInfosList()
    {
        return eventInfos == null?  new ArrayList<BattleEventInfo>():eventInfos;
    }

    public int getEventInfosCount()
    {
        return eventInfos == null?0:eventInfos.size();
    }

    public BattleEventInfo getEventInfos(int i)
    {
        return eventInfos == null?null:eventInfos.get(i);
    }


    public BattleLogInfo setEventInfosList(List<BattleEventInfo> eventInfos)
    {
        this.eventInfos = eventInfos;
        return this;    
    }

    // attackBeginTroopInfos

    public boolean hasAttackBeginTroopInfos(){
        return attackBeginTroopInfos != null;
    }


    public List<MoveTroopInfo> getAttackBeginTroopInfosList()
    {
        return attackBeginTroopInfos == null?  new ArrayList<MoveTroopInfo>():attackBeginTroopInfos;
    }

    public int getAttackBeginTroopInfosCount()
    {
        return attackBeginTroopInfos == null?0:attackBeginTroopInfos.size();
    }

    public MoveTroopInfo getAttackBeginTroopInfos(int i)
    {
        return attackBeginTroopInfos == null?null:attackBeginTroopInfos.get(i);
    }


    public BattleLogInfo setAttackBeginTroopInfosList(List<MoveTroopInfo> attackBeginTroopInfos)
    {
        this.attackBeginTroopInfos = attackBeginTroopInfos;
        return this;    
    }

    // defendBeginTroopInfos

    public boolean hasDefendBeginTroopInfos(){
        return defendBeginTroopInfos != null;
    }


    public List<MoveTroopInfo> getDefendBeginTroopInfosList()
    {
        return defendBeginTroopInfos == null?  new ArrayList<MoveTroopInfo>():defendBeginTroopInfos;
    }

    public int getDefendBeginTroopInfosCount()
    {
        return defendBeginTroopInfos == null?0:defendBeginTroopInfos.size();
    }

    public MoveTroopInfo getDefendBeginTroopInfos(int i)
    {
        return defendBeginTroopInfos == null?null:defendBeginTroopInfos.get(i);
    }


    public BattleLogInfo setDefendBeginTroopInfosList(List<MoveTroopInfo> defendBeginTroopInfos)
    {
        this.defendBeginTroopInfos = defendBeginTroopInfos;
        return this;    
    }

    // attackEndTroopInfos

    public boolean hasAttackEndTroopInfos(){
        return attackEndTroopInfos != null;
    }


    public List<MoveTroopInfo> getAttackEndTroopInfosList()
    {
        return attackEndTroopInfos == null?  new ArrayList<MoveTroopInfo>():attackEndTroopInfos;
    }

    public int getAttackEndTroopInfosCount()
    {
        return attackEndTroopInfos == null?0:attackEndTroopInfos.size();
    }

    public MoveTroopInfo getAttackEndTroopInfos(int i)
    {
        return attackEndTroopInfos == null?null:attackEndTroopInfos.get(i);
    }


    public BattleLogInfo setAttackEndTroopInfosList(List<MoveTroopInfo> attackEndTroopInfos)
    {
        this.attackEndTroopInfos = attackEndTroopInfos;
        return this;    
    }

    // defendEndTroopInfos

    public boolean hasDefendEndTroopInfos(){
        return defendEndTroopInfos != null;
    }


    public List<MoveTroopInfo> getDefendEndTroopInfosList()
    {
        return defendEndTroopInfos == null?  new ArrayList<MoveTroopInfo>():defendEndTroopInfos;
    }

    public int getDefendEndTroopInfosCount()
    {
        return defendEndTroopInfos == null?0:defendEndTroopInfos.size();
    }

    public MoveTroopInfo getDefendEndTroopInfos(int i)
    {
        return defendEndTroopInfos == null?null:defendEndTroopInfos.get(i);
    }


    public BattleLogInfo setDefendEndTroopInfosList(List<MoveTroopInfo> defendEndTroopInfos)
    {
        this.defendEndTroopInfos = defendEndTroopInfos;
        return this;    
    }

    // attackHeroInfos

    public boolean hasAttackHeroInfos(){
        return attackHeroInfos != null;
    }


    public List<BattleLogHeroInfo> getAttackHeroInfosList()
    {
        return attackHeroInfos == null?  new ArrayList<BattleLogHeroInfo>():attackHeroInfos;
    }

    public int getAttackHeroInfosCount()
    {
        return attackHeroInfos == null?0:attackHeroInfos.size();
    }

    public BattleLogHeroInfo getAttackHeroInfos(int i)
    {
        return attackHeroInfos == null?null:attackHeroInfos.get(i);
    }


    public BattleLogInfo setAttackHeroInfosList(List<BattleLogHeroInfo> attackHeroInfos)
    {
        this.attackHeroInfos = attackHeroInfos;
        return this;    
    }

    // defendHeroInfos

    public boolean hasDefendHeroInfos(){
        return defendHeroInfos != null;
    }


    public List<BattleLogHeroInfo> getDefendHeroInfosList()
    {
        return defendHeroInfos == null?  new ArrayList<BattleLogHeroInfo>():defendHeroInfos;
    }

    public int getDefendHeroInfosCount()
    {
        return defendHeroInfos == null?0:defendHeroInfos.size();
    }

    public BattleLogHeroInfo getDefendHeroInfos(int i)
    {
        return defendHeroInfos == null?null:defendHeroInfos.get(i);
    }


    public BattleLogInfo setDefendHeroInfosList(List<BattleLogHeroInfo> defendHeroInfos)
    {
        this.defendHeroInfos = defendHeroInfos;
        return this;    
    }

    // userTroopEffects

    public boolean hasUserTroopEffects(){
        return userTroopEffects != null;
    }


    public List<UserTroopEffectInfo> getUserTroopEffectsList()
    {
        return userTroopEffects == null?  new ArrayList<UserTroopEffectInfo>():userTroopEffects;
    }

    public int getUserTroopEffectsCount()
    {
        return userTroopEffects == null?0:userTroopEffects.size();
    }

    public UserTroopEffectInfo getUserTroopEffects(int i)
    {
        return userTroopEffects == null?null:userTroopEffects.get(i);
    }


    public BattleLogInfo setUserTroopEffectsList(List<UserTroopEffectInfo> userTroopEffects)
    {
        this.userTroopEffects = userTroopEffects;
        return this;    
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<BattleLogInfo> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public BattleLogInfo newMessage()
    {
        return new BattleLogInfo();
    }

    public Class<BattleLogInfo> typeClass()
    {
        return BattleLogInfo.class;
    }

    public String messageName()
    {
        return BattleLogInfo.class.getSimpleName();
    }

    public String messageFullName()
    {
        return BattleLogInfo.class.getName();
    }

    public boolean isInitialized(BattleLogInfo message)
    {
        return true;
    }

    public void mergeFrom(Input input, BattleLogInfo message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 10:
                    message.id = input.readUInt64();
                    break;
                case 20:
                    message.attacker = input.readUInt32();
                    break;
                case 30:
                    message.defender = input.readUInt32();
                    break;
                case 40:
                    message.type = input.readUInt32();
                    break;
                case 50:
                    message.battleResult = input.readUInt32();
                    break;
                case 60:
                    message.time = input.readUInt32();
                    break;
                case 70:
                    message.attackFiefid = input.readUInt64();
                    break;
                case 80:
                    message.defendFiefid = input.readUInt64();
                    break;
                case 90:
                    message.fiefScale = input.readUInt32();
                    break;
                case 100:
                    message.attackerType = input.readUInt32();
                    break;
                case 110:
                    message.version = input.readUInt32();
                    break;
                case 120:
                    message.record = input.readUInt32();
                    break;
                case 130:
                    message.defendFiefPropid = input.readUInt32();
                    break;
                case 170:
                    if(message.ris == null)
                        message.ris = new ArrayList<BattleLogReturnInfo>();
                    message.ris.add(input.mergeObject(null, BattleLogReturnInfo.getSchema()));
                    break;

                case 180:
                    if(message.rhis == null)
                        message.rhis = new ArrayList<ReturnHeroInfo>();
                    message.rhis.add(input.mergeObject(null, ReturnHeroInfo.getSchema()));
                    break;

                case 200:
                    if(message.eventInfos == null)
                        message.eventInfos = new ArrayList<BattleEventInfo>();
                    message.eventInfos.add(input.mergeObject(null, BattleEventInfo.getSchema()));
                    break;

                case 210:
                    if(message.attackBeginTroopInfos == null)
                        message.attackBeginTroopInfos = new ArrayList<MoveTroopInfo>();
                    message.attackBeginTroopInfos.add(input.mergeObject(null, MoveTroopInfo.getSchema()));
                    break;

                case 220:
                    if(message.defendBeginTroopInfos == null)
                        message.defendBeginTroopInfos = new ArrayList<MoveTroopInfo>();
                    message.defendBeginTroopInfos.add(input.mergeObject(null, MoveTroopInfo.getSchema()));
                    break;

                case 230:
                    if(message.attackEndTroopInfos == null)
                        message.attackEndTroopInfos = new ArrayList<MoveTroopInfo>();
                    message.attackEndTroopInfos.add(input.mergeObject(null, MoveTroopInfo.getSchema()));
                    break;

                case 240:
                    if(message.defendEndTroopInfos == null)
                        message.defendEndTroopInfos = new ArrayList<MoveTroopInfo>();
                    message.defendEndTroopInfos.add(input.mergeObject(null, MoveTroopInfo.getSchema()));
                    break;

                case 250:
                    if(message.attackHeroInfos == null)
                        message.attackHeroInfos = new ArrayList<BattleLogHeroInfo>();
                    message.attackHeroInfos.add(input.mergeObject(null, BattleLogHeroInfo.getSchema()));
                    break;

                case 260:
                    if(message.defendHeroInfos == null)
                        message.defendHeroInfos = new ArrayList<BattleLogHeroInfo>();
                    message.defendHeroInfos.add(input.mergeObject(null, BattleLogHeroInfo.getSchema()));
                    break;

                case 270:
                    if(message.userTroopEffects == null)
                        message.userTroopEffects = new ArrayList<UserTroopEffectInfo>();
                    message.userTroopEffects.add(input.mergeObject(null, UserTroopEffectInfo.getSchema()));
                    break;

                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, BattleLogInfo message) throws IOException
    {
        if(message.id != null)
            output.writeUInt64(10, message.id, false);

        if(message.attacker != null)
            output.writeUInt32(20, message.attacker, false);

        if(message.defender != null)
            output.writeUInt32(30, message.defender, false);

        if(message.type != null)
            output.writeUInt32(40, message.type, false);

        if(message.battleResult != null)
            output.writeUInt32(50, message.battleResult, false);

        if(message.time != null)
            output.writeUInt32(60, message.time, false);

        if(message.attackFiefid != null)
            output.writeUInt64(70, message.attackFiefid, false);

        if(message.defendFiefid != null)
            output.writeUInt64(80, message.defendFiefid, false);

        if(message.fiefScale != null)
            output.writeUInt32(90, message.fiefScale, false);

        if(message.attackerType != null)
            output.writeUInt32(100, message.attackerType, false);

        if(message.version != null)
            output.writeUInt32(110, message.version, false);

        if(message.record != null)
            output.writeUInt32(120, message.record, false);

        if(message.defendFiefPropid != null)
            output.writeUInt32(130, message.defendFiefPropid, false);

        if(message.ris != null)
        {
            for(BattleLogReturnInfo ris : message.ris)
            {
                if(ris != null)
                    output.writeObject(170, ris, BattleLogReturnInfo.getSchema(), true);
            }
        }


        if(message.rhis != null)
        {
            for(ReturnHeroInfo rhis : message.rhis)
            {
                if(rhis != null)
                    output.writeObject(180, rhis, ReturnHeroInfo.getSchema(), true);
            }
        }


        if(message.eventInfos != null)
        {
            for(BattleEventInfo eventInfos : message.eventInfos)
            {
                if(eventInfos != null)
                    output.writeObject(200, eventInfos, BattleEventInfo.getSchema(), true);
            }
        }


        if(message.attackBeginTroopInfos != null)
        {
            for(MoveTroopInfo attackBeginTroopInfos : message.attackBeginTroopInfos)
            {
                if(attackBeginTroopInfos != null)
                    output.writeObject(210, attackBeginTroopInfos, MoveTroopInfo.getSchema(), true);
            }
        }


        if(message.defendBeginTroopInfos != null)
        {
            for(MoveTroopInfo defendBeginTroopInfos : message.defendBeginTroopInfos)
            {
                if(defendBeginTroopInfos != null)
                    output.writeObject(220, defendBeginTroopInfos, MoveTroopInfo.getSchema(), true);
            }
        }


        if(message.attackEndTroopInfos != null)
        {
            for(MoveTroopInfo attackEndTroopInfos : message.attackEndTroopInfos)
            {
                if(attackEndTroopInfos != null)
                    output.writeObject(230, attackEndTroopInfos, MoveTroopInfo.getSchema(), true);
            }
        }


        if(message.defendEndTroopInfos != null)
        {
            for(MoveTroopInfo defendEndTroopInfos : message.defendEndTroopInfos)
            {
                if(defendEndTroopInfos != null)
                    output.writeObject(240, defendEndTroopInfos, MoveTroopInfo.getSchema(), true);
            }
        }


        if(message.attackHeroInfos != null)
        {
            for(BattleLogHeroInfo attackHeroInfos : message.attackHeroInfos)
            {
                if(attackHeroInfos != null)
                    output.writeObject(250, attackHeroInfos, BattleLogHeroInfo.getSchema(), true);
            }
        }


        if(message.defendHeroInfos != null)
        {
            for(BattleLogHeroInfo defendHeroInfos : message.defendHeroInfos)
            {
                if(defendHeroInfos != null)
                    output.writeObject(260, defendHeroInfos, BattleLogHeroInfo.getSchema(), true);
            }
        }


        if(message.userTroopEffects != null)
        {
            for(UserTroopEffectInfo userTroopEffects : message.userTroopEffects)
            {
                if(userTroopEffects != null)
                    output.writeObject(270, userTroopEffects, UserTroopEffectInfo.getSchema(), true);
            }
        }

    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
