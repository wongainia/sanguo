// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from client.proto

package com.vikings.sanguo.protos;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class MsgRspGeographyInfoQuery implements Externalizable, Message<MsgRspGeographyInfoQuery>, Schema<MsgRspGeographyInfoQuery>
{

    public static Schema<MsgRspGeographyInfoQuery> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static MsgRspGeographyInfoQuery getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final MsgRspGeographyInfoQuery DEFAULT_INSTANCE = new MsgRspGeographyInfoQuery();

    
    private List<GeographyInfo> infos;

    public MsgRspGeographyInfoQuery()
    {
        
    }

    // getters and setters

    // infos

    public boolean hasInfos(){
        return infos != null;
    }


    public List<GeographyInfo> getInfosList()
    {
        return infos == null?  new ArrayList<GeographyInfo>():infos;
    }

    public int getInfosCount()
    {
        return infos == null?0:infos.size();
    }

    public GeographyInfo getInfos(int i)
    {
        return infos == null?null:infos.get(i);
    }


    public MsgRspGeographyInfoQuery setInfosList(List<GeographyInfo> infos)
    {
        this.infos = infos;
        return this;    
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<MsgRspGeographyInfoQuery> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public MsgRspGeographyInfoQuery newMessage()
    {
        return new MsgRspGeographyInfoQuery();
    }

    public Class<MsgRspGeographyInfoQuery> typeClass()
    {
        return MsgRspGeographyInfoQuery.class;
    }

    public String messageName()
    {
        return MsgRspGeographyInfoQuery.class.getSimpleName();
    }

    public String messageFullName()
    {
        return MsgRspGeographyInfoQuery.class.getName();
    }

    public boolean isInitialized(MsgRspGeographyInfoQuery message)
    {
        return true;
    }

    public void mergeFrom(Input input, MsgRspGeographyInfoQuery message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 10:
                    if(message.infos == null)
                        message.infos = new ArrayList<GeographyInfo>();
                    message.infos.add(input.mergeObject(null, GeographyInfo.getSchema()));
                    break;

                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, MsgRspGeographyInfoQuery message) throws IOException
    {
        if(message.infos != null)
        {
            for(GeographyInfo infos : message.infos)
            {
                if(infos != null)
                    output.writeObject(10, infos, GeographyInfo.getSchema(), true);
            }
        }

    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
